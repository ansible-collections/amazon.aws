---
- name: Test amazon.aws.aws_s3_object_info
  module_defaults:
    group/aws:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      security_token: "{{ security_token | default(omit) }}"
      region: "{{ aws_region }}"
  block:
    - name: Create a simple s3_bucket
      s3_bucket:
        name: "{{ bucket_name }}"
        state: present
        object_ownership: BucketOwnerEnforced
        tags:
          "lowercase spaced": "hello cruel world"
          "Title Case": "Hello Cruel World"
          CamelCase: "SimpleCamelCase"
          snake_case: "simple_snake_case"
      register: output

    - name: check that temp directory was made
      assert:
        that:
        - remote_tmp_dir is defined

    - name: Create content
      set_fact:
          content: "{{ lookup('password', '/dev/null chars=ascii_letters,digits,hexdigits,punctuation') }}"

    - name: Create local upload.txt
      copy:
        content: "{{ content }}"
        dest: "{{ remote_tmp_dir }}/upload.txt"

    - name: stat the file
      stat:
        path: "{{ remote_tmp_dir }}/upload.txt"
        get_checksum: yes
      register: upload_file

    - name: Upload a object to bucket
      amazon.aws.aws_s3:
        bucket: "{{ bucket_name }}"
        object: upload.txt
        src: "{{ remote_tmp_dir }}/upload.txt"
        mode: put
        permission: bucket-owner-full-control
        tags:
          "lowercase spaced": "hello cruel world"
          "Title Case": "Hello Cruel World"
          CamelCase: "SimpleCamelCase"
          snake_case: "simple_snake_case"

    - include_tasks: basic.yml

  always:
    - name: list bucket object
      s3_object:
        bucket: "{{ bucket_name }}"
        mode: list
      register: objects
      ignore_errors: true

    - name: remove objects from bucket
      s3_object:
        bucket: "{{ bucket_name }}"
        mode: delobj
        object: "{{ obj }}"
      with_items: "{{ objects.s3_keys }}"
      loop_control:
        loop_var: obj
      when: "'s3_keys' in objects"
      ignore_errors: true

    - name: Delete simple s3_buckets
      s3_bucket:
        name: "{{ bucket_name }}"
        state: absent

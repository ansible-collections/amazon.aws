---
# Test suite for ec2_ami
- module_defaults:
    group/aws:
      aws_region: "{{ aws_region }}"
      access_key: "{{ aws_access_key }}"
      secret_key: "{{ aws_secret_key }}"
      session_token: "{{ security_token | default(omit) }}"
  block:
    # ============================================================

    # SETUP: vpc, ec2 key pair, subnet, security group, ec2 instance, snapshot
    - name: Create a VPC to work in
      amazon.aws.ec2_vpc_net:
        cidr_block: "{{ vpc_cidr }}"
        state: present
        name: "{{ ec2_ami_name }}_setup"
        resource_tags:
          Name: "{{ ec2_ami_name }}_setup"
      register: setup_vpc

    - name: Create a key pair to use for creating an ec2 instance
      amazon.aws.ec2_key:
        name: "{{ ec2_ami_name }}_setup"
        state: present
      register: setup_key

    - name: Create a subnet to use for creating an ec2 instance
      amazon.aws.ec2_vpc_subnet:
        az: "{{ availability_zone }}"
        tags: "{{ ec2_ami_name }}_setup"
        vpc_id: "{{ setup_vpc.vpc.id }}"
        cidr: "{{ subnet_cidr }}"
        state: present
        resource_tags:
          Name: "{{ ec2_ami_name }}_setup"
      register: setup_subnet

    - name: Create a security group to use for creating an ec2 instance
      amazon.aws.ec2_security_group:
        name: "{{ ec2_ami_name }}_setup"
        description: created by Ansible integration tests
        state: present
        vpc_id: "{{ setup_vpc.vpc.id }}"
      register: setup_sg

    - name: Provision ec2 instance to create an image
      amazon.aws.ec2_instance:
        state: running
        key_name: "{{ setup_key.key.name }}"
        instance_type: t2.micro
        image_id: "{{ ec2_ami_id }}"
        tags:
          "{{ec2_ami_name}}_instance_setup": integration_tests
        security_group: "{{ setup_sg.group_id }}"
        vpc_subnet_id: "{{ setup_subnet.subnet.id }}"
        volumes:
          - device_name: /dev/sdc
            virtual_name: ephemeral1
        wait: true
      register: setup_instance

    - name: Store EC2 Instance ID
      ansible.builtin.set_fact:
        ec2_instance_id: "{{ setup_instance.instances[0].instance_id }}"

    - name: Take a snapshot of the instance to create an image
      amazon.aws.ec2_snapshot:
        instance_id: "{{ ec2_instance_id }}"
        device_name: "{{ ec2_ami_root_disk }}"
        state: present
      register: setup_snapshot

    # ============================================================

    - name: Create an image from the snapshot
      amazon.aws.ec2_ami:
        name: "{{ ec2_ami_name }}_ami"
        description: "{{ ec2_ami_description }}"
        state: present
        launch_permissions:
          user_ids: []
        tags:
          Name: "{{ ec2_ami_name }}_ami"
        root_device_name: "{{ ec2_ami_root_disk }}"
        device_mapping:
          - device_name: "{{ ec2_ami_root_disk }}"
            volume_type: gp2
            size: 8
            delete_on_termination: true
            snapshot_id: "{{ setup_snapshot.snapshot_id }}"
      register: result
      ignore_errors: true

    - name: Set image id fact for deletion later
      ansible.builtin.set_fact:
        ec2_ami_image_id: "{{ result.image_id }}"
        ec2_ami_snapshot: "{{ result.block_device_mapping[ec2_ami_root_disk].snapshot_id }}"

    - name: Assert a new ami has been created
      ansible.builtin.assert:
        that:
          - result.changed
          - result.image_id.startswith('ami-')

    # ============================================================

    - name: Test default launch permissions idempotence (check mode)
      amazon.aws.ec2_ami:
        description: "{{ ec2_ami_description }}"
        state: present
        name: "{{ ec2_ami_name }}_ami"
        tags:
          Name: "{{ ec2_ami_name }}_ami"
        root_device_name: "{{ ec2_ami_root_disk }}"
        image_id: "{{ result.image_id }}"
        launch_permissions:
          user_ids: []
        device_mapping:
          - device_name: "{{ ec2_ami_root_disk }}"
            volume_type: gp2
            size: 8
            delete_on_termination: true
            snapshot_id: "{{ setup_snapshot.snapshot_id }}"
      check_mode: true
      register: check_mode_result

    - name: Assert that check_mode result is not changed
      ansible.builtin.assert:
        that:
          - check_mode_result is not changed

    - name: Test default launch permissions idempotence
      amazon.aws.ec2_ami:
        description: "{{ ec2_ami_description }}"
        state: present
        name: "{{ ec2_ami_name }}_ami"
        tags:
          Name: "{{ ec2_ami_name }}_ami"
        root_device_name: "{{ ec2_ami_root_disk }}"
        image_id: "{{ result.image_id }}"
        launch_permissions:
          user_ids: []
        device_mapping:
          - device_name: "{{ ec2_ami_root_disk }}"
            volume_type: gp2
            size: 8
            delete_on_termination: true
            snapshot_id: "{{ setup_snapshot.snapshot_id }}"
      register: result

    - name: Assert a new ami has not been created
      ansible.builtin.assert:
        that:
          - not result.changed
          - result.image_id.startswith('ami-')

    # ============================================================

    - name: Add a tag to the AMI
      amazon.aws.ec2_ami:
        state: present
        description: "{{ ec2_ami_description }}"
        image_id: "{{ result.image_id }}"
        name: "{{ ec2_ami_name }}_ami"
        tags:
          New: Tag
        purge_tags: false
      register: result

    - name: Assert a tag was added
      ansible.builtin.assert:
        that:
          - "'Name' in result.tags and result.tags.Name == ec2_ami_name + '_ami'"
          - "'New' in result.tags and result.tags.New == 'Tag'"

    - name: Use purge_tags to remove a tag from the AMI
      amazon.aws.ec2_ami:
        state: present
        description: "{{ ec2_ami_description }}"
        image_id: "{{ result.image_id }}"
        name: "{{ ec2_ami_name }}_ami"
        tags:
          New: Tag
      register: result

    - name: Assert a tag was removed
      ansible.builtin.assert:
        that:
          - "'Name' not in result.tags"
          - "'New' in result.tags and result.tags.New == 'Tag'"

    # ============================================================

    - name: Update AMI launch permissions (check mode)
      amazon.aws.ec2_ami:
        state: present
        image_id: "{{ result.image_id }}"
        description: "{{ ec2_ami_description }}"
        tags:
          Name: "{{ ec2_ami_name }}_ami"
        launch_permissions:
          group_names: [all]
      check_mode: true
      register: check_mode_result

    - name: Assert that check_mode result is changed
      ansible.builtin.assert:
        that:
          - check_mode_result is changed

    - name: Update AMI launch permissions
      amazon.aws.ec2_ami:
        state: present
        image_id: "{{ result.image_id }}"
        description: "{{ ec2_ami_description }}"
        tags:
          Name: "{{ ec2_ami_name }}_ami"
        launch_permissions:
          group_names: [all]
      register: result

    - name: Assert launch permissions were updated
      ansible.builtin.assert:
        that:
          - result.changed

    # ============================================================

    - name: Modify the AMI description (check mode)
      amazon.aws.ec2_ami:
        state: present
        image_id: "{{ result.image_id }}"
        name: "{{ ec2_ami_name }}_ami"
        description: "{{ ec2_ami_description }}CHANGED"
        tags:
          Name: "{{ ec2_ami_name }}_ami"
        launch_permissions:
          group_names: [all]
      check_mode: true
      register: check_mode_result

    - name: Assert that check_mode result is changed
      ansible.builtin.assert:
        that:
          - check_mode_result is changed

    - name: Modify the AMI description
      amazon.aws.ec2_ami:
        state: present
        image_id: "{{ result.image_id }}"
        name: "{{ ec2_ami_name }}_ami"
        description: "{{ ec2_ami_description }}CHANGED"
        tags:
          Name: "{{ ec2_ami_name }}_ami"
        launch_permissions:
          group_names: [all]
      register: result

    - name: Assert the description changed
      ansible.builtin.assert:
        that:
          - result.changed

    # ============================================================

    - name: Remove public launch permissions
      amazon.aws.ec2_ami:
        state: present
        image_id: "{{ result.image_id }}"
        name: "{{ ec2_ami_name }}_ami"
        tags:
          Name: "{{ ec2_ami_name }}_ami"
        launch_permissions:
          group_names: []
      register: result

    - name: Assert launch permissions were updated
      ansible.builtin.assert:
        that:
          - result.changed

    # ============================================================

    - name: Delete ami without deleting the snapshot (default is not to delete)
      amazon.aws.ec2_ami:
        instance_id: "{{ ec2_instance_id }}"
        state: absent
        name: "{{ ec2_ami_name }}_ami"
        image_id: "{{ ec2_ami_image_id }}"
        tags:
          Name: "{{ ec2_ami_name }}_ami"
        wait: true
      ignore_errors: true
      register: result

    - name: Assert that the image has been deleted
      ansible.builtin.assert:
        that:
          - result.changed
          - "'image_id' not in result"

    - name: Ensure the snapshot still exists
      amazon.aws.ec2_snapshot_info:
        snapshot_ids:
          - "{{ ec2_ami_snapshot }}"
      register: snapshot_result

    - name: Assert the snapshot wasn't deleted
      ansible.builtin.assert:
        that:
          - snapshot_result.snapshots[0].snapshot_id == ec2_ami_snapshot

    - name: Delete ami for a second time (check mode)
      amazon.aws.ec2_ami:
        instance_id: "{{ ec2_instance_id }}"
        state: absent
        name: "{{ ec2_ami_name }}_ami"
        image_id: "{{ ec2_ami_image_id }}"
        tags:
          Name: "{{ ec2_ami_name }}_ami"
        wait: true
      check_mode: true
      register: check_mode_result

    - name: Assert that check_mode result is not changed
      ansible.builtin.assert:
        that:
          - check_mode_result is not changed

    - name: Delete ami for a second time
      amazon.aws.ec2_ami:
        instance_id: "{{ ec2_instance_id }}"
        state: absent
        name: "{{ ec2_ami_name }}_ami"
        image_id: "{{ ec2_ami_image_id }}"
        tags:
          Name: "{{ ec2_ami_name }}_ami"
        wait: true
      register: result

    - name: Assert that image does not exist
      ansible.builtin.assert:
        that:
          - not result.changed
          - not result.failed

  always:
    # ============================================================

    # TEAR DOWN: snapshot, ec2 instance, ec2 key pair, security group, vpc
    - name: Announce teardown start
      ansible.builtin.debug:
        msg: "***** TESTING COMPLETE. COMMENCE TEARDOWN *****"

    - name: Remove setup ec2 instance
      amazon.aws.ec2_instance:
        state: absent
        instance_ids:
          - "{{ ec2_instance_id }}"
        wait: true
      ignore_errors: true

    - name: Delete ami
      amazon.aws.ec2_ami:
        state: absent
        image_id: "{{ ec2_ami_image_id }}"
        name: "{{ ec2_ami_name }}_ami"
        wait: true
      ignore_errors: true

    - name: Remove setup snapshot of ec2 instance
      amazon.aws.ec2_snapshot:
        state: absent
        snapshot_id: "{{ setup_snapshot.snapshot_id }}"
      ignore_errors: true

    - name: Remove setup keypair
      amazon.aws.ec2_key:
        name: "{{ ec2_ami_name }}_setup"
        state: absent
      ignore_errors: true

    - name: Remove setup security group
      amazon.aws.ec2_security_group:
        name: "{{ ec2_ami_name }}_setup"
        description: created by Ansible integration tests
        state: absent
        vpc_id: "{{ setup_vpc.vpc.id }}"
      ignore_errors: true

    - name: Remove setup subnet
      amazon.aws.ec2_vpc_subnet:
        az: "{{ availability_zone }}"
        tags: "{{ ec2_ami_name }}_setup"
        vpc_id: "{{ setup_vpc.vpc.id }}"
        cidr: "{{ subnet_cidr }}"
        state: absent
        resource_tags:
          Name: "{{ ec2_ami_name }}_setup"
      ignore_errors: true

    - name: Remove setup VPC
      amazon.aws.ec2_vpc_net:
        cidr_block: "{{ vpc_cidr }}"
        state: absent
        name: "{{ ec2_ami_name }}_setup"
        resource_tags:
          Name: "{{ ec2_ami_name }}_setup"
      ignore_errors: true

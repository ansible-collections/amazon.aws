---
# ============================================================
- name: add two implicit secondary IPs
  ec2_eni:
    device_index: 1
    private_ip_address: "{{ ip_1 }}"
    subnet_id: "{{ vpc_subnet_id }}"
    state: present
    secondary_private_ip_address_count: 2
  register: result
- ec2_eni_info:
    eni_id: '{{ eni_id_1 }}'
  register: eni_info

- assert:
    that:
      - result.changed
      - result.interface.id == eni_id_1
      - result.interface.private_ip_addresses | length == 3
      - _interface_0.private_ip_addresses | length == 3
      - ip_1 in ( eni_info | community.general.json_query("network_interfaces[].private_ip_addresses[].private_ip_address") | list )
  vars:
    _interface_0: '{{ eni_info.network_interfaces[0] }}'

- name: test idempotence with two implicit secondary IPs
  ec2_eni:
    device_index: 1
    private_ip_address: "{{ ip_1 }}"
    subnet_id: "{{ vpc_subnet_id }}"
    state: present
    secondary_private_ip_address_count: 2
  register: result
- ec2_eni_info:
    eni_id: '{{ eni_id_1 }}'
  register: eni_info

- assert:
    that:
      - not result.changed
      - result.interface.id == eni_id_1
      - result.interface.private_ip_addresses | length == 3
      - _interface_0.private_ip_addresses | length == 3
      - ip_1 in ( eni_info | community.general.json_query("network_interfaces[].private_ip_addresses[].private_ip_address") | list )
  vars:
    _interface_0: '{{ eni_info.network_interfaces[0] }}'

# ============================================================
- name: ensure secondary addresses are only removed if purge is set to true
  ec2_eni:
    purge_secondary_private_ip_addresses: false
    device_index: 1
    private_ip_address: "{{ ip_1 }}"
    subnet_id: "{{ vpc_subnet_id }}"
    state: present
    secondary_private_ip_addresses: []
  register: result
- ec2_eni_info:
    eni_id: '{{ eni_id_1 }}'
  register: eni_info

- assert:
    that:
      - not result.changed
      - result.interface.id == eni_id_1
      - result.interface.private_ip_addresses | length == 3
      - _interface_0.private_ip_addresses | length == 3
      - ip_1 in ( eni_info | community.general.json_query("network_interfaces[].private_ip_addresses[].private_ip_address") | list )
  vars:
    _interface_0: '{{ eni_info.network_interfaces[0] }}'

# ============================================================

# Using secondary_private_ip_address_count leads to unpredicable IP assignment
# For the following test, first find an IP that has not been used yet

- name: save the list of private IPs in use
  set_fact:
    current_private_ips: "{{ result.interface | json_query('private_ip_addresses[*].private_ip_address') | list }}"

- name: set new_secondary_ip to an IP that has not been used
  set_fact:
    new_secondary_ip: "{{ [ip_2, ip_3, ip_4] | difference(current_private_ips) | first }}"

- name: add an explicit secondary address without purging the ones added implicitly
  ec2_eni:
    purge_secondary_private_ip_addresses: false
    device_index: 1
    private_ip_address: "{{ ip_1 }}"
    subnet_id: "{{ vpc_subnet_id }}"
    state: present
    secondary_private_ip_addresses:
      - "{{ new_secondary_ip }}"
  register: result
- ec2_eni_info:
    eni_id: '{{ eni_id_1 }}'
  register: eni_info

- assert:
    that:
      - result.changed
      - result.interface.id == eni_id_1
      - result.interface.private_ip_addresses | length == 4
      - _interface_0.private_ip_addresses | length == 4
      # Only ip_1 and the explicitly requested IP are guaranteed to be present
      - ip_1 in _private_ips
      - new_secondary_ip in _private_ips
  vars:
    _interface_0: '{{ eni_info.network_interfaces[0] }}'
    _private_ips: '{{ eni_info | community.general.json_query("network_interfaces[].private_ip_addresses[].private_ip_address") | list }}'

# ============================================================
- name: remove secondary address
  ec2_eni:
    purge_secondary_private_ip_addresses: true
    device_index: 1
    private_ip_address: "{{ ip_1 }}"
    subnet_id: "{{ vpc_subnet_id }}"
    state: present
    secondary_private_ip_addresses: []
  register: result
- ec2_eni_info:
    eni_id: '{{ eni_id_1 }}'
  register: eni_info

- assert:
    that:
      - result.changed
      - result.interface.id == eni_id_1
      - result.interface.private_ip_addresses | length == 1
      - _interface_0.private_ip_addresses | length == 1
      - ip_1 in ( eni_info | community.general.json_query("network_interfaces[].private_ip_addresses[].private_ip_address") | list )
  vars:
    _interface_0: '{{ eni_info.network_interfaces[0] }}'

- name: test idempotent behavior purging secondary addresses
  ec2_eni:
    purge_secondary_private_ip_addresses: true
    device_index: 1
    private_ip_address: "{{ ip_1 }}"
    subnet_id: "{{ vpc_subnet_id }}"
    state: present
    secondary_private_ip_addresses: []
  register: result
- ec2_eni_info:
    eni_id: '{{ eni_id_1 }}'
  register: eni_info

- assert:
    that:
      - not result.changed
      - result.interface.id == eni_id_1
      - result.interface.private_ip_addresses | length == 1
      - result.interface.private_ip_addresses | length == 1
      - _interface_0.private_ip_addresses | length == 1
      - ip_1 in ( eni_info | community.general.json_query("network_interfaces[].private_ip_addresses[].private_ip_address") | list )
  vars:
    _interface_0: '{{ eni_info.network_interfaces[0] }}'

# ============================================================

- name: Assign secondary IP addess to second ENI
  ec2_eni:
    device_index: 1
    private_ip_address: "{{ ip_5 }}"
    subnet_id: "{{ vpc_subnet_id }}"
    state: present
    secondary_private_ip_addresses:
      - "{{ ip_4 }}"
  register: result
- ec2_eni_info:
    eni_id: '{{ eni_id_2 }}'
  register: eni_info

- assert:
    that:
      - result.changed
      - result.interface.id == eni_id_2
      - result.interface.private_ip_addresses | length == 2
      - _interface_0.private_ip_addresses | length == 2
      - ip_5 in ( eni_info | community.general.json_query("network_interfaces[].private_ip_addresses[].private_ip_address") | list )
      - ip_4 in ( eni_info | community.general.json_query("network_interfaces[].private_ip_addresses[].private_ip_address") | list )
  vars:
    _interface_0: '{{ eni_info.network_interfaces[0] }}'

- name: test that reassignment of an IP already in use fails when not explcitly allowed (default for allow_reassignment == False)
  ec2_eni:
    device_index: 1
    private_ip_address: "{{ ip_1 }}"
    subnet_id: "{{ vpc_subnet_id }}"
    state: present
    secondary_private_ip_addresses:
      - "{{ ip_2 }}"
      - "{{ ip_3 }}"
      - "{{ ip_4 }}"
  register: result
  ignore_errors: yes

- assert:
    that:
      - result.failed
      - '"move is not allowed" in result.msg'

# ============================================================
- name: allow reassignment to add the list of secondary addresses
  ec2_eni:
    allow_reassignment: true
    device_index: 1
    private_ip_address: "{{ ip_1 }}"
    subnet_id: "{{ vpc_subnet_id }}"
    state: present
    secondary_private_ip_addresses:
      - "{{ ip_2 }}"
      - "{{ ip_3 }}"
      - "{{ ip_4 }}"
  register: result

- assert:
    that:
      - result.changed
      - result.interface.id == eni_id_1
      - result.interface.private_ip_addresses | length == 4

- name: test reassigment is idempotent
  ec2_eni:
    allow_reassignment: true
    device_index: 1
    private_ip_address: "{{ ip_1 }}"
    subnet_id: "{{ vpc_subnet_id }}"
    state: present
    secondary_private_ip_addresses:
      - "{{ ip_2 }}"
      - "{{ ip_3 }}"
      - "{{ ip_4 }}"
  register: result

- assert:
    that:
      - not result.changed
      - result.interface.id == eni_id_1

# ============================================================

- name: purge all the secondary addresses
  ec2_eni:
    purge_secondary_private_ip_addresses: true
    device_index: 1
    private_ip_address: "{{ ip_1 }}"
    subnet_id: "{{ vpc_subnet_id }}"
    state: present
    secondary_private_ip_addresses: []
  register: result
- ec2_eni_info:
    eni_id: '{{ eni_id_1 }}'
  register: eni_info
  until: _interface_0.private_ip_addresses | length == 1
  retries: 5
  delay: 2
  vars:
    _interface_0: '{{ eni_info.network_interfaces[0] }}'

- assert:
    that:
      - result.changed
      - _interface_0.private_ip_addresses | length == 1
      - ip_1 in ( eni_info | community.general.json_query("network_interfaces[].private_ip_addresses[].private_ip_address") | list )
  vars:
    _interface_0: '{{ eni_info.network_interfaces[0] }}'

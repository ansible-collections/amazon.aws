---
# ============================================================
- name: create a network interface (check mode)
  ec2_eni:
    device_index: 1
    private_ip_address: "{{ ip_1 }}"
    subnet_id: "{{ vpc_subnet_id }}"
    state: present
  check_mode: true
  register: result_check_mode

- assert:
    that:
      - result_check_mode.changed

- name: create a network interface
  ec2_eni:
    device_index: 1
    private_ip_address: "{{ ip_1 }}"
    subnet_id: "{{ vpc_subnet_id }}"
    state: present
  register: result

- assert:
    that:
      - result.changed
      - result.interface.private_ip_addresses | length == 1

- set_fact:
    eni_id_1: "{{ result.interface.id }}"

- name: Fetch ENI info (by ID)
  ec2_eni_info:
    eni_id: '{{ eni_id_1 }}'
  register: eni_info

- name: Assert that ec2_eni_info returns all the values we expect
  vars:
    _interface_0: '{{ eni_info.network_interfaces[0] }}'
  assert:
    that:
      - '"network_interfaces" in eni_info'
      - eni_info.network_interfaces | length == 1
      - '"association" not in _interface_0'
      - '"attachment" not in _interface_0'
      - '"availability_zone" in _interface_0'
      - _interface_0.availability_zone.startswith(aws_region)
      - '"description" in _interface_0'
      - _interface_0.description == ""
      - '"groups" in _interface_0'
      - _interface_0.groups is iterable
      - _interface_0.groups | length == 1
      - '"id" in _interface_0'
      - _interface_0.id.startswith("eni-")
      - _interface_0.id == eni_id_1
      - '"interface_type" in _interface_0'
      - _interface_0.owner_id is string
      - '"ipv6_addresses" in _interface_0'
      - _interface_0.ipv6_addresses is iterable
      - _interface_0.ipv6_addresses | length == 0
      - '"mac_address" in _interface_0'
      - _interface_0.owner_id is string
      - _interface_0.mac_address | length == 17
      - '"network_interface_id" in _interface_0'
      - _interface_0.network_interface_id.startswith("eni-")
      - _interface_0.network_interface_id == eni_id_1
      - '"owner_id" in _interface_0'
      - _interface_0.owner_id is string
      - '"private_dns_name" in _interface_0'
      - _interface_0.private_dns_name is string
      - _interface_0.private_dns_name.endswith("ec2.internal")
      - '"private_ip_address" in _interface_0'
      - _interface_0.private_ip_address | ansible.utils.ipaddr
      - _interface_0.private_ip_address == ip_1
      - '"private_ip_addresses" in _interface_0'
      - _interface_0.private_ip_addresses | length == 1
      - ip_1 in ( eni_info.network_interfaces | map(attribute='private_ip_addresses') | flatten | map(attribute='private_ip_address') | list )
      - '"requester_id" in _interface_0'
      - _interface_0.requester_id is string
      - '"requester_managed" in _interface_0'
      - _interface_0.requester_managed == False
      - '"source_dest_check" in _interface_0'
      - _interface_0.source_dest_check == True
      - '"status" in _interface_0'
      - _interface_0.status == "available"
      - '"subnet_id" in _interface_0'
      - _interface_0.subnet_id == vpc_subnet_id
      - '"tag_set" in _interface_0'
      - _interface_0.tag_set is mapping
      - '"vpc_id" in _interface_0'
      - _interface_0.vpc_id == vpc_id

- name: test idempotence by using the same private_ip_address (check mode)
  ec2_eni:
    device_index: 1
    private_ip_address: "{{ ip_1 }}"
    subnet_id: "{{ vpc_subnet_id }}"
    state: present
  check_mode: true
  register: result_check_mode

- assert:
    that:
      - not result_check_mode.changed

- name: test idempotence by using the same private_ip_address
  ec2_eni:
    device_index: 1
    private_ip_address: "{{ ip_1 }}"
    subnet_id: "{{ vpc_subnet_id }}"
    state: present
  register: result

- assert:
    that:
      - not result.changed
      - result.interface.id == eni_id_1
      - result.interface.private_ip_addresses | length == 1

# ============================================================

- name: create a second network interface to test IP reassignment
  ec2_eni:
    device_index: 1
    private_ip_address: "{{ ip_5 }}"
    subnet_id: "{{ vpc_subnet_id }}"
    state: present
  register: result

- assert:
    that:
      - result.changed
      - result.interface.id != eni_id_1

- name: save the second network interface ID for cleanup
  set_fact:
    eni_id_2: "{{ result.interface.id }}"

- name: Fetch ENI info (using filter)
  ec2_eni_info:
    filters:
      network-interface-id: '{{ eni_id_2 }}'
  register: eni_info

- name: Assert that ec2_eni_info returns all the values we expect
  vars:
    _interface_0: '{{ eni_info.network_interfaces[0] }}'
  assert:
    that:
      - '"network_interfaces" in eni_info'
      - eni_info.network_interfaces | length == 1
      - '"association" not in _interface_0'
      - '"attachment" not in _interface_0'
      - '"availability_zone" in _interface_0'
      - _interface_0.availability_zone.startswith(aws_region)
      - '"description" in _interface_0'
      - _interface_0.description == ""
      - '"groups" in _interface_0'
      - _interface_0.groups is iterable
      - _interface_0.groups | length == 1
      - '"id" in _interface_0'
      - _interface_0.id.startswith("eni-")
      - _interface_0.id == eni_id_2
      - '"interface_type" in _interface_0'
      - _interface_0.owner_id is string
      - '"ipv6_addresses" in _interface_0'
      - _interface_0.ipv6_addresses is iterable
      - _interface_0.ipv6_addresses | length == 0
      - '"mac_address" in _interface_0'
      - _interface_0.owner_id is string
      - _interface_0.mac_address | length == 17
      - '"network_interface_id" in _interface_0'
      - _interface_0.network_interface_id.startswith("eni-")
      - _interface_0.network_interface_id == eni_id_2
      - '"owner_id" in _interface_0'
      - _interface_0.owner_id is string
      - '"private_dns_name" in _interface_0'
      - _interface_0.private_dns_name is string
      - _interface_0.private_dns_name.endswith("ec2.internal")
      - '"private_ip_address" in _interface_0'
      - _interface_0.private_ip_address | ansible.utils.ipaddr
      - _interface_0.private_ip_address == ip_5
      - '"private_ip_addresses" in _interface_0'
      - _interface_0.private_ip_addresses | length == 1
      - ip_5 in ( eni_info.network_interfaces | map(attribute='private_ip_addresses') | flatten | map(attribute='private_ip_address') | list )
      - '"requester_id" in _interface_0'
      - _interface_0.requester_id is string
      - '"requester_managed" in _interface_0'
      - _interface_0.requester_managed == False
      - '"source_dest_check" in _interface_0'
      - _interface_0.source_dest_check == True
      - '"status" in _interface_0'
      - _interface_0.status == "available"
      - '"subnet_id" in _interface_0'
      - _interface_0.subnet_id == vpc_subnet_id
      - '"tag_set" in _interface_0'
      - _interface_0.tag_set is mapping
      - '"vpc_id" in _interface_0'
      - _interface_0.vpc_id == vpc_id

- name: Fetch ENI info without filter
  ec2_eni_info:
  register: eni_info

- name: Assert that ec2_eni_info contains at least the two interfaces we expect
  assert:
    that:
      - '"network_interfaces" in eni_info'
      - eni_info.network_interfaces | length >= 2
      - eni_id_1 in ( eni_info.network_interfaces | selectattr('id') | map(attribute='id') | list )
      - eni_id_2 in ( eni_info.network_interfaces | selectattr('id') | map(attribute='id') | list )

# ============================================================
# Run some VPC filter based tests of ec2_eni_info

- name: Fetch ENI info with VPC filters - Available
  ec2_eni_info:
    filters:
      vpc-id: '{{ vpc_id }}'
      status: 'available'
  register: eni_info

- name: Assert that ec2_eni_info contains at least the two interfaces we expect
  assert:
    that:
      - '"network_interfaces" in eni_info'
      - eni_info.network_interfaces | length == 2
      - eni_id_1 in ( eni_info.network_interfaces | selectattr('id') | map(attribute='id') | list )
      - eni_id_2 in ( eni_info.network_interfaces | selectattr('id') | map(attribute='id') | list )

- name: Fetch ENI info with VPC filters - VPC
  ec2_eni_info:
    filters:
      vpc-id: '{{ vpc_id }}'
  register: eni_info

- name: Assert that ec2_eni_info contains at least the two interfaces we expect
  assert:
    that:
      - '"network_interfaces" in eni_info'
      - eni_info.network_interfaces | length == 4
      - eni_id_1 in ( eni_info.network_interfaces | selectattr('id') | map(attribute='id') | list )
      - eni_id_2 in ( eni_info.network_interfaces | selectattr('id') | map(attribute='id') | list )
      - ec2_ips[0] in ( eni_info.network_interfaces | map(attribute='private_ip_addresses') | flatten | map(attribute='private_ip_address') | list )
      - ec2_ips[1] in ( eni_info.network_interfaces | map(attribute='private_ip_addresses') | flatten | map(attribute='private_ip_address') | list )


# =========================================================

- name: create another network interface without private_ip_address
  ec2_eni:
    device_index: 1
    subnet_id: "{{ vpc_subnet_id }}"
    state: present
  register: result_no_private_ip

- assert:
    that:
      - result_no_private_ip.changed

- name: save the third network interface ID for cleanup
  set_fact:
    eni_id_3: "{{ result_no_private_ip.interface.id }}"

---
- module_defaults:
    group/aws:
      access_key: "{{ aws_access_key }}"
      secret_key: "{{ aws_secret_key }}"
      session_token: "{{ security_token | default(omit) }}"
      region: "{{ aws_region }}"

  collections:
  - amazon.aws
  - ansible.utils
  - community.aws

  block:

  # ============================================================
  - name: create a VPC
    ec2_vpc_net:
      name: "{{ resource_prefix }}-vpc"
      state: present
      cidr_block: "{{ vpc_cidr }}"
      tags:
        Name: "{{ resource_prefix }}-vpc"
        Description: "Created by ansible-test"
    register: vpc_result

  - name: create a subnet
    ec2_vpc_subnet:
      cidr: "{{ vpc_cidr }}"
      az: "{{ availability_zone }}"
      vpc_id: "{{ vpc_result.vpc.id }}"
      tags:
        Name: "{{ resource_prefix }}-vpc"
        Description: "Created by ansible-test"
      state: present
    register: vpc_subnet_result

  - name: create a security group
    ec2_security_group:
      name: "{{ resource_prefix }}-sg"
      description: "Created by {{ resource_prefix }}"
      rules: []
      state: present
      vpc_id: "{{ vpc_result.vpc.id }}"
    register: vpc_sg_result

  - name: Set facts to simplify use of extra resources
    set_fact:
      vpc_id: "{{ vpc_result.vpc.id }}"
      vpc_subnet_id: "{{ vpc_subnet_result.subnet.id }}"
      vpc_sg_id: "{{ vpc_sg_result.group_id }}"

  # ============================================================

  - name: Create 2 instances to test attaching and detaching network interfaces
    ec2_instance:
      name: "{{ resource_prefix }}-eni-instance-{{ item }}"
      image_id: "{{ ec2_ami_id }}"
      vpc_subnet_id: "{{ vpc_subnet_id }}"
      instance_type: t2.micro
      wait: false
      security_group: "{{ vpc_sg_id }}"
      network:
        private_ip_address: '{{ ec2_ips[item] }}'
    register: ec2_instances
    loop:
      - 0
      - 1

  # We only need these instances to be running
  - name: set variables for the instance IDs
    set_fact:
      instance_id_1: "{{ ec2_instances.results[0].instance_ids[0] }}"
      instance_id_2: "{{ ec2_instances.results[1].instance_ids[0] }}"

  # ============================================================
  - name: test attaching and detaching network interfaces
    include_tasks: ./test_eni_basic_creation.yaml

  - name: test attaching and detaching network interfaces
    include_tasks: ./test_ipaddress_assign.yaml

  - name: test attaching and detaching network interfaces
    include_tasks: ./test_attachment.yaml

  - name: test attaching and detaching multiple network interfaces
    include_tasks: ./test_create_attached_multiple.yml

  - name: test modifying source_dest_check
    include_tasks: ./test_modifying_source_dest_check.yaml

  - name: test modifying tags
    include_tasks: ./test_modifying_tags.yaml

  # Note: will delete *both* EC2 instances
  - name: test modifying delete_on_termination
    include_tasks: ./test_modifying_delete_on_termination.yaml

  - name: test deleting ENIs
    include_tasks: ./test_deletion.yaml

  always:
    # ============================================================
      # Some test problems are caused by "eventual consistency"
      # describe the ENIs in the account so we can see what's happening
      - name: Describe ENIs in account
        ec2_eni_info: {}

    # ============================================================
      - name: remove the network interfaces
        ec2_eni:
          eni_id: "{{ item }}"
          force_detach: True
          state: absent
        ignore_errors: true
        retries: 5
        loop:
          - "{{ eni_id_1 | default(omit) }}"
          - "{{ eni_id_2 | default(omit) }}"
          - "{{ eni_id_3 | default(omit) }}"

      - name: terminate the instances
        ec2_instance:
          state: absent
          instance_ids:
            - "{{ instance_id_1 }}"
            - "{{ instance_id_2 }}"
          wait: True
        ignore_errors: true
        retries: 5
        when: instance_id_1 is defined and instance_id_2 is defined

      - name: remove the security group
        ec2_security_group:
          name: "{{ resource_prefix }}-sg"
          description: "{{ resource_prefix }}"
          rules: []
          state: absent
          vpc_id: "{{ vpc_result.vpc.id }}"
        ignore_errors: true
        retries: 5

      - name: remove the subnet
        ec2_vpc_subnet:
          cidr: "{{ vpc_cidr }}"
          az: "{{ availability_zone }}"
          vpc_id: "{{ vpc_result.vpc.id }}"
          state: absent
        ignore_errors: true
        retries: 5
        when: vpc_subnet_result is defined

      - name: remove the VPC
        ec2_vpc_net:
          name: "{{ resource_prefix }}-vpc"
          cidr_block: "{{ vpc_cidr }}"
          state: absent
        ignore_errors: true
        retries: 5

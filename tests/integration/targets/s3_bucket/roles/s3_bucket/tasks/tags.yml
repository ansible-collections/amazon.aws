---
- name: 'Run tagging tests'
  block:
    - set_fact:
        local_bucket_name: "{{ bucket_name | hash('md5')}}-tags"
    # ============================================================
    - name: 'Create simple s3_bucket for testing tagging'
      s3_bucket:
        name: '{{ local_bucket_name }}'
        state: present
      register: output

    - assert:
        that:
          - output.changed
          - output.name == '{{ local_bucket_name }}'

    # ============================================================

    - name: 'Add tags to s3 bucket'
      s3_bucket:
        name: '{{ local_bucket_name }}'
        state: present
        tags:
          example: tag1
          another: tag2
      register: output

    - assert:
        that:
          - output.changed
          - output.name == '{{ local_bucket_name }}'
          - output.tags.example == 'tag1'
          - output.tags.another == 'tag2'

    - name: 'Re-Add tags to s3 bucket'
      s3_bucket:
        name: '{{ local_bucket_name }}'
        state: present
        tags:
          example: tag1
          another: tag2
      register: output

    - assert:
        that:
          - output is not changed
          - output.name == '{{ local_bucket_name }}'
          - output.tags.example == 'tag1'
          - output.tags.another == 'tag2'

    # ============================================================

    - name: Remove a tag from an s3_bucket
      s3_bucket:
        name: '{{ local_bucket_name }}'
        state: present
        tags:
          example: tag1
      register: output

    - assert:
        that:
          - output.changed
          - output.name == '{{ local_bucket_name }}'
          - output.tags.example == 'tag1'
          - "'another' not in output.tags"

    - name: Re-remove the tag from an s3_bucket
      s3_bucket:
        name: '{{ local_bucket_name }}'
        state: present
        tags:
          example: tag1
      register: output

    - assert:
        that:
          - output is not changed
          - output.name == '{{ local_bucket_name }}'
          - output.tags.example == 'tag1'
          - "'another' not in output.tags"

    ## ============================================================

    #- name: 'Pause to help with s3 bucket eventual consistency'
    #  wait_for:
    #    timeout: 10
    #  delegate_to: localhost

    ## ============================================================

    - name: 'Add a tag for s3_bucket with purge_tags False'
      s3_bucket:
        name: '{{ local_bucket_name }}'
        state: present
        purge_tags: no
        tags:
          anewtag: here
      register: output

    - assert:
        that:
          - output.changed
          - output.name == '{{ local_bucket_name }}'
          - output.tags.example == 'tag1'
          - output.tags.anewtag == 'here'

    - name: 'Re-add a tag for s3_bucket with purge_tags False'
      s3_bucket:
        name: '{{ local_bucket_name }}'
        state: present
        purge_tags: no
        tags:
          anewtag: here
      register: output

    - assert:
        that:
          - output is not changed
          - output.name == '{{ local_bucket_name }}'
          - output.tags.example == 'tag1'
          - output.tags.anewtag == 'here'

    ## ============================================================

    #- name: 'Pause to help with s3 bucket eventual consistency'
    #  wait_for:
    #    timeout: 10
    #  delegate_to: localhost

    ## ============================================================

    - name: Update a tag for s3_bucket with purge_tags False
      s3_bucket:
        name: '{{ local_bucket_name }}'
        state: present
        purge_tags: no
        tags:
          anewtag: next
      register: output

    - assert:
        that:
          - output.changed
          - output.name == '{{ local_bucket_name }}'
          - output.tags.example == 'tag1'
          - output.tags.anewtag == 'next'

    - name: Re-update a tag for s3_bucket with purge_tags False
      s3_bucket:
        name: '{{ local_bucket_name }}'
        state: present
        purge_tags: no
        tags:
          anewtag: next
      register: output

    - assert:
        that:
          - output is not changed
          - output.name == '{{ local_bucket_name }}'
          - output.tags.example == 'tag1'
          - output.tags.anewtag == 'next'

    ## ============================================================

    #- name: 'Pause to help with s3 bucket eventual consistency'
    #  wait_for:
    #    timeout: 10
    #  delegate_to: localhost

    ## ============================================================

    - name: Pass empty tags dict for s3_bucket with purge_tags False
      s3_bucket:
        name: '{{ local_bucket_name }}'
        state: present
        purge_tags: no
        tags: {}
      register: output

    - assert:
        that:
          - output is not changed
          - output.name == '{{ local_bucket_name }}'
          - output.tags.example == 'tag1'
          - output.tags.anewtag == 'next'

    ## ============================================================

    #- name: 'Pause to help with s3 bucket eventual consistency'
    #  wait_for:
    #    timeout: 10
    #  delegate_to: localhost

    ## ============================================================

    - name: Do not specify any tag to ensure previous tags are not removed
      s3_bucket:
        name: '{{ local_bucket_name }}'
        state: present
      register: output

    - assert:
        that:
          - not output.changed
          - output.name == '{{ local_bucket_name }}'
          - output.tags.example == 'tag1'

    # ============================================================

    - name: Remove all tags
      s3_bucket:
        name: '{{ local_bucket_name }}'
        state: present
        tags: {}
      register: output

    - assert:
        that:
          - output.changed
          - output.name == '{{ local_bucket_name }}'
          - output.tags == {}

    - name: Re-remove all tags
      s3_bucket:
        name: '{{ local_bucket_name }}'
        state: present
        tags: {}
      register: output

    - assert:
        that:
          - output is not changed
          - output.name == '{{ local_bucket_name }}'
          - output.tags == {}

    # ============================================================

    - name: Delete bucket
      s3_bucket:
        name: '{{ local_bucket_name }}'
        state: absent
      register: output

    - assert:
        that:
          - output.changed

  # ============================================================
  always:
    - name: Ensure all buckets are deleted
      s3_bucket:
        name: '{{ local_bucket_name }}'
        state: absent
      ignore_errors: yes

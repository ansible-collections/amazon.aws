---
- module_defaults:
    group/aws:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      security_token: "{{ security_token | default(omit) }}"
      region: "{{ aws_region }}"
  block:
    - include_role:
        name: setup_botocore_pip
      vars:
        botocore_version: '1.18.11'

    # ============================================================
    - name: Wrap test in virtualenv
      vars:
        ansible_python_interpreter: "{{ botocore_virtualenv_interpreter }}"
      block:
        - set_fact:
            local_bucket_name: "{{ bucket_name | hash('md5')}}ownership"

        - name: 'Create a simple bucket bad value for ownership controls'
          s3_bucket:
            name: '{{ local_bucket_name }}'
            state: present
            object_ownership: default
          ignore_errors: true
          register: output

        - assert:
            that:
              - output.failed

        - name: 'Create bucket with object_ownership set to object_writer'
          s3_bucket:
            name: '{{ local_bucket_name }}'
            state: present
          ignore_errors: true
          register: output

        - assert:
            that:
              - output.changed
              - not output.object_ownership|bool

        - name: delete s3 bucket
          s3_bucket:
            name: '{{ local_bucket_name }}'
            state: absent

        - name: 'create s3 bucket with object ownership controls'
          s3_bucket:
            name: '{{ local_bucket_name }}'
            state: present
            object_ownership: ObjectWriter
          register: output

        - assert:
            that:
              - output.changed
              - output.object_ownership
              - output.object_ownership == 'ObjectWriter'

        - name: 'update s3 bucket ownership controls'
          s3_bucket:
            name: '{{ local_bucket_name }}'
            state: present
            object_ownership: BucketOwnerPreferred
          register: output

        - assert:
            that:
              - output.changed
              - output.object_ownership
              - output.object_ownership == 'BucketOwnerPreferred'

        - name: 'test idempotency update s3 bucket ownership controls'
          s3_bucket:
            name: '{{ local_bucket_name }}'
            state: present
            object_ownership: BucketOwnerPreferred
          register: output

        - assert:
            that:
              - output.changed is false
              - output.object_ownership
              - output.object_ownership == 'BucketOwnerPreferred'

        - name: 'delete s3 bucket ownership controls'
          s3_bucket:
            name: '{{ local_bucket_name }}'
            state: present
            delete_object_ownership: true
          register: output

        - assert:
            that:
              - output.changed
              - not output.object_ownership|bool

        - name: 'delete s3 bucket ownership controls once again (idempotency)'
          s3_bucket:
            name: '{{ local_bucket_name }}'
            state: present
            delete_object_ownership: true
          register: idempotency

        - assert:
            that:
              - not idempotency.changed
              - not idempotency.object_ownership|bool

  # ============================================================
  always:
    - name: delete s3 bucket ownership controls
      s3_bucket:
        name: '{{ local_bucket_name }}'
        state: present
        delete_object_ownership: true
      ignore_errors: yes

    - name: Ensure all buckets are deleted
      s3_bucket:
        name: '{{ local_bucket_name }}'
        state: absent
      ignore_errors: yes

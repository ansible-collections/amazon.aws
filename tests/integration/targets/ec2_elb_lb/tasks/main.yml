---
# __Test Info__
# Create a self signed cert and upload it to AWS
# http://www.akadia.com/services/ssh_test_certificate.html
# http://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/ssl-server-cert.html

# __Test Outline__
#
# __ec2_elb_lb__
# create test elb with listeners and certificate
# change AZ's
# change listeners
# remove listeners
# remove elb

- module_defaults:
    group/aws:
      region: "{{ aws_region }}"
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      security_token: "{{ security_token | default(omit) }}"
  block:

    # ============================================================
    # create test elb with listeners, certificate, and health check

    - name: Create ELB (check_mode)
      ec2_elb_lb:
        name: "{{ elb_name }}"
        state: present
        zones:
          - "{{ aws_region }}a"
          - "{{ aws_region }}b"
        listeners:
          - protocol: http
            load_balancer_port: 80
            instance_port: 80
          - protocol: http
            load_balancer_port: 8080
            instance_port: 8080
        health_check:
            ping_protocol: http
            ping_port: 80
            ping_path: "/index.html"
            response_timeout: 5
            interval: 30
            unhealthy_threshold: 2
            healthy_threshold: 10
      register: result
      check_mode: True

    - assert:
        that:
          - result is changed
          - result.elb.status == "created"

    - name: Create ELB
      ec2_elb_lb:
        name: "{{ elb_name }}"
        state: present
        zones:
          - "{{ aws_region }}a"
          - "{{ aws_region }}b"
        listeners:
          - protocol: http
            load_balancer_port: 80
            instance_port: 80
          - protocol: http
            load_balancer_port: 8080
            instance_port: 8080
        health_check:
            ping_protocol: http
            ping_port: 80
            ping_path: "/index.html"
            response_timeout: 5
            interval: 30
            unhealthy_threshold: 2
            healthy_threshold: 10
      register: result

    - assert:
        that:
          - result is changed
          - result.elb.status == "created"
          - '"{{ aws_region }}a" in result.elb.zones'
          - '"{{ aws_region }}b" in result.elb.zones'
          - 'result.elb.health_check.healthy_threshold == 10'
          - 'result.elb.health_check.interval == 30'
          # XXX Needs to be set after creation
          #- 'result.elb.health_check.target == "HTTP:80/index.html"'
          - 'result.elb.health_check.timeout == 5'
          - 'result.elb.health_check.unhealthy_threshold == 2'
          - '[80, 80, "HTTP", "HTTP"] in result.elb.listeners'
          - '[8080, 8080, "HTTP", "HTTP"] in result.elb.listeners'

    # ============================================================

    # check ports, would be cool, but we are at the mercy of AWS
    # to start things in a timely manner

    #- name: check to make sure 80 is listening
    #  wait_for: host={{ info.elb.dns_name }} port=80 timeout=600
    #  register: result

    #- name: assert can connect to port#
    #  assert: 'result.state == "started"'

    #- name: check to make sure 443 is listening
    #  wait_for: host={{ info.elb.dns_name }} port=443 timeout=600
    #  register: result

    #- name: assert can connect to port#
    #  assert: 'result.state == "started"'

    # ============================================================

    # Change AZ's
#
#    - name: Change AZ's
#      ec2_elb_lb:
#        name: "{{ elb_name }}"
#        state: present
#        zones:
#          - "{{ aws_region }}c"
#        listeners:
#          - protocol: http
#            load_balancer_port: 80
#            instance_port: 80
#        purge_zones: yes
#        health_check:
#            ping_protocol: http
#            ping_port: 80
#            ping_path: "/index.html"
#            response_timeout: 5
#            interval: 30
#            unhealthy_threshold: 2
#            healthy_threshold: 10
#      register: info
#
#    - assert:
#        that:
#          - 'info.elb.status == "ok"'
#          - 'info.changed'
#          - 'info.elb.zones[0] == "{{ aws_region }}c"'
#
#    # ============================================================
#
#    # Update AZ's
#
#    - name: Update AZ's
#      ec2_elb_lb:
#        name: "{{ elb_name }}"
#        state: present
#        zones:
#          - "{{ aws_region }}a"
#          - "{{ aws_region }}b"
#          - "{{ aws_region }}c"
#        listeners:
#          - protocol: http
#            load_balancer_port: 80
#            instance_port: 80
#        purge_zones: yes
#      register: info
#
#    - assert:
#        that:
#          - 'info.changed'
#          - 'info.elb.status == "ok"'
#          - '"{{ aws_region }}a" in info.elb.zones'
#          - '"{{ aws_region }}b" in info.elb.zones'
#          - '"{{ aws_region }}c" in info.elb.zones'
#
#
#    # ============================================================
#
#    # Purge Listeners
#
#    - name: Purge Listeners
#      ec2_elb_lb:
#        name: "{{ elb_name }}"
#        state: present
#        zones:
#          - "{{ aws_region }}a"
#          - "{{ aws_region }}b"
#          - "{{ aws_region }}c"
#        listeners:
#          - protocol: http
#            load_balancer_port: 80
#            instance_port: 81
#        purge_listeners: yes
#      register: info
#
#    - assert:
#        that:
#          - 'info.elb.status == "ok"'
#          - 'info.changed'
#          - '[80, 81, "HTTP", "HTTP"] in info.elb.listeners'
#          - 'info.elb.listeners|length == 1'
#
#
#
#    # ============================================================
#
#    # add Listeners
#
#    - name: Add Listeners
#      ec2_elb_lb:
#        name: "{{ elb_name }}"
#        state: present
#        zones:
#          - "{{ aws_region }}a"
#          - "{{ aws_region }}b"
#          - "{{ aws_region }}c"
#        listeners:
#          - protocol: http
#            load_balancer_port: 8081
#            instance_port: 8081
#        purge_listeners: no
#      register: info
#
#    - assert:
#        that:
#          - 'info.elb.status == "ok"'
#          - 'info.changed'
#          - '[80, 81, "HTTP", "HTTP"] in info.elb.listeners'
#          - '[8081, 8081, "HTTP", "HTTP"] in info.elb.listeners'
#          - 'info.elb.listeners|length == 2'
#
#
    # ============================================================
    - name: remove the test load balancer completely (check_mode)
      ec2_elb_lb:
        name: "{{ elb_name }}"
        state: absent
      register: result
      check_mode: True

    - name: assert the load balancer would be removed
      assert:
        that:
           - result is changed
           - 'result.elb.name == "{{ elb_name }}"'
           - 'result.elb.status == "deleted"'

    - name: remove the test load balancer completely
      ec2_elb_lb:
        name: "{{ elb_name }}"
        state: absent
      register: result

    - name: assert the load balancer was removed
      assert:
        that:
           - result is changed
           - 'result.elb.name == "{{ elb_name }}"'
           - 'result.elb.status == "deleted"'

    - name: remove the test load balancer completely (idempotency) (check_mode)
      ec2_elb_lb:
        name: "{{ elb_name }}"
        state: absent
      register: result
      check_mode: True

    - name: assert the load balancer is gone
      assert:
        that:
           - result is not changed
           - 'result.elb.name == "{{ elb_name }}"'
           - 'result.elb.status == "gone"'

    - name: remove the test load balancer completely (idempotency)
      ec2_elb_lb:
        name: "{{ elb_name }}"
        state: absent
      register: result

    - name: assert the load balancer is gone
      assert:
        that:
           - result is not changed
           - 'result.elb.name == "{{ elb_name }}"'
           - 'result.elb.status == "gone"'

    # ============================================================

    - name: test with no name
      ec2_elb_lb:
        state: present
      register: result
      ignore_errors: true

    - name: assert failure when called with no parameters
      assert:
        that:
           - 'result.failed'
           - '"missing required arguments" in result.msg'
           - '"name" in result.msg'

    - name: test with only name (state missing)
      ec2_elb_lb:
        name: "{{ elb_name }}"
      register: result
      ignore_errors: true

    - name: assert failure when called with only name
      assert:
        that:
           - 'result.failed'
           - '"missing required arguments" in result.msg'
           - '"state" in result.msg'

  always:

    # ============================================================
    - name: remove the test load balancer
      ec2_elb_lb:
        name: "{{ elb_name }}"
        state: absent
      register: result
      ignore_errors: True

---
- module_defaults:
    group/aws:
      access_key: "{{ aws_access_key }}"
      secret_key: "{{ aws_secret_key }}"
      session_token: "{{ security_token | default(omit) }}"
      region: "{{ aws_region }}"
  block:
  # Make custom ENIs and attach via the `network` parameter
    - amazon.aws.ec2_eni:
        state: present
        delete_on_termination: true
        subnet_id: "{{ testing_subnet_b.subnet.id }}"
        security_groups:
          - "{{ sg.group_id }}"
      register: eni_a

    - amazon.aws.ec2_eni:
        state: present
        delete_on_termination: true
        subnet_id: "{{ testing_subnet_b.subnet.id }}"
        security_groups:
          - "{{ sg.group_id }}"
      register: eni_b

    - amazon.aws.ec2_eni:
        state: present
        delete_on_termination: true
        subnet_id: "{{ testing_subnet_b.subnet.id }}"
        security_groups:
          - "{{ sg.group_id }}"
      register: eni_c

    - amazon.aws.ec2_key:
        name: "{{ resource_prefix }}_test_key"

    - name: Make instance in the testing subnet created in the test VPC
      amazon.aws.ec2_instance:
        state: present
        name: "{{ resource_prefix }}-test-eni-vpc"
        key_name: "{{ resource_prefix }}_test_key"
        network:
          interfaces:
            - id: "{{ eni_a.interface.id }}"
        image_id: "{{ ec2_ami_id }}"
        availability_zone: "{{ subnet_b_az }}"
        tags:
          TestId: "{{ ec2_instance_tag_TestId }}"
        instance_type: "{{ ec2_instance_type }}"
        wait: false
      register: in_test_vpc

    - name: Gather {{ resource_prefix }}-test-eni-vpc info
      amazon.aws.ec2_instance_info:
        filters:
          tag:Name: "{{ resource_prefix }}-test-eni-vpc"
      register: in_test_vpc_instance

    - ansible.builtin.assert:
        that:
          - in_test_vpc_instance.instances.0.key_name == resource_prefix+"_test_key"
          - (in_test_vpc_instance.instances.0.network_interfaces | length) == 1

    - name: Add a second interface (check_mode=true)
      amazon.aws.ec2_instance:
        state: present
        name: "{{ resource_prefix }}-test-eni-vpc"
        network:
          interfaces:
            - id: "{{ eni_a.interface.id }}"
            - id: "{{ eni_b.interface.id }}"
        image_id: "{{ ec2_ami_id }}"
        tags:
          TestId: "{{ ec2_instance_tag_TestId }}"
        instance_type: "{{ ec2_instance_type }}"
        wait: false
      register: add_interface_check_mode
      check_mode: true

    - name: Validate task reported changed
      ansible.builtin.assert:
        that:
          - add_interface_check_mode is changed

    - name: Gather {{ resource_prefix }}-test-eni-vpc info
      amazon.aws.ec2_instance_info:
        filters:
          tag:Name: "{{ resource_prefix }}-test-eni-vpc"
      register: in_test_vpc_instance

    - name: Validate that only 1 ENI is attached to instance as we run using check_mode=true
      ansible.builtin.assert:
        that:
          - in_test_vpc_instance.instances.0.key_name == resource_prefix+"_test_key"
          - (in_test_vpc_instance.instances.0.network_interfaces | length) == 1

    - name: Add a second interface
      amazon.aws.ec2_instance:
        state: present
        name: "{{ resource_prefix }}-test-eni-vpc"
        network:
          interfaces:
            - id: "{{ eni_a.interface.id }}"
            - id: "{{ eni_b.interface.id }}"
        image_id: "{{ ec2_ami_id }}"
        tags:
          TestId: "{{ ec2_instance_tag_TestId }}"
        instance_type: "{{ ec2_instance_type }}"
        wait: false
      register: add_interface
      until: add_interface is not failed
      ignore_errors: true
      retries: 10

    - name: Validate that the instance has now 2 interfaces attached
      block:
        - name: Gather {{ resource_prefix }}-test-eni-vpc info
          amazon.aws.ec2_instance_info:
            filters:
              tag:Name: "{{ resource_prefix }}-test-eni-vpc"
          register: in_test_vpc_instance

        - name: Validate that only 1 ENI is attached to instance as we run using check_mode=true
          ansible.builtin.assert:
            that:
              - in_test_vpc_instance.instances.0.key_name == resource_prefix+"_test_key"
              - (in_test_vpc_instance.instances.0.network_interfaces | length) == 2

      when: add_interface is successful

    - name: Make instance in the testing subnet created in the test VPC(check mode)
      amazon.aws.ec2_instance:
        state: present
        name: "{{ resource_prefix }}-test-eni-vpc-checkmode"
        key_name: "{{ resource_prefix }}_test_key"
        network:
          interfaces:
            - id: "{{ eni_c.interface.id }}"
        image_id: "{{ ec2_ami_id }}"
        availability_zone: "{{ subnet_b_az }}"
        tags:
          TestId: "{{ ec2_instance_tag_TestId }}"
        instance_type: "{{ ec2_instance_type }}"
      check_mode: true

    - name: fact presented ec2 instance
      amazon.aws.ec2_instance_info:
        filters:
          tag:Name: "{{ resource_prefix }}-test-eni-vpc"
      register: presented_instance_fact

    - name: fact checkmode ec2 instance
      amazon.aws.ec2_instance_info:
        filters:
          tag:Name: "{{ resource_prefix }}-test-eni-vpc-checkmode"
      register: checkmode_instance_fact

    - name: Confirm existence of instance id.
      ansible.builtin.assert:
        that:
          - presented_instance_fact.instances | length > 0
          - checkmode_instance_fact.instances | length == 0

- name: ec2_vpc_route_table integration tests
  module_defaults:
    group/aws:
      access_key: '{{ aws_access_key }}'
      secret_key: '{{ aws_secret_key }}'
      session_token: '{{ security_token | default(omit) }}'
      region: '{{ aws_region }}'
  block:

  - name: create VPC
    ec2_vpc_net:
      cidr_block: '{{ vpc_cidr }}'
      name: '{{ resource_prefix }}_vpc'
      state: present
    register: vpc
  - name: assert that VPC has an id
    assert:
      that:
      - vpc.vpc.id is defined
      - vpc.changed
  - name: Assign IPv6 CIDR block to existing VPC, check mode
    ec2_vpc_net:
      cidr_block: '{{ vpc_cidr }}'
      name: '{{ resource_prefix }}_vpc'
      ipv6_cidr: true
    check_mode: true
    register: vpc_update
  - name: assert that VPC would changed
    assert:
      that:
      - vpc_update.changed
  - name: Assign Amazon-provided IPv6 CIDR block to existing VPC
    ec2_vpc_net:
      cidr_block: '{{ vpc_cidr }}'
      name: '{{ resource_prefix }}_vpc'
      ipv6_cidr: true
    register: vpc_update
  - name: assert that VPC was changed, IPv6 CIDR is configured
    assert:
      that:
      - vpc_update.vpc.id == vpc.vpc.id
      - vpc_update.changed
      - vpc_update.vpc.ipv6_cidr_block_association_set | length == 1
  - name: Fetch existing VPC info
    ec2_vpc_net_info:
      filters:
        "tag:Name": "{{ resource_prefix }}_vpc"
    register: vpc_info
  - name: assert vpc net info after configuring IPv6 CIDR
    assert:
      that:
        - vpc_info.vpcs | length == 1
        - vpc_info.vpcs[0].id == vpc.vpc.id
        - vpc_info.vpcs[0].ipv6_cidr_block_association_set | length == 1
        - vpc_info.vpcs[0].ipv6_cidr_block_association_set[0].ipv6_cidr_block_state.state == "associated"
  - name: get Amazon-provided IPv6 CIDR associated with the VPC
    set_fact:
      # Example value: 2600:1f1c:1b3:8f00::/56
      vpc_ipv6_cidr_block: '{{ vpc_info.vpcs[0].ipv6_cidr_block_association_set[0].ipv6_cidr_block }}'
  - name: create subnets
    ec2_vpc_subnet:
      cidr: '{{ item.cidr }}'
      az: '{{ item.zone }}'
      assign_instances_ipv6: '{{ item.assign_instances_ipv6 }}'
      ipv6_cidr: '{{ item.ipv6_cidr  }}'
      vpc_id: '{{ vpc.vpc.id }}'
      state: present
      tags:
        Public: '{{ item.public | string }}'
        Name: "{{ (item.public | bool) | ternary('public', 'private') }}-{{ item.zone }}"
    with_items:
    - cidr: 10.228.224.0/24
      zone: '{{ availability_zone_a }}'
      public: 'True'
      assign_instances_ipv6: false
      ipv6_cidr: null
    - cidr: 10.228.225.0/24
      zone: '{{ availability_zone_b }}'
      public: 'True'
      assign_instances_ipv6: false
      ipv6_cidr: null
    - cidr: 10.228.226.0/24
      zone: '{{ availability_zone_a }}'
      public: 'False'
      assign_instances_ipv6: false
      ipv6_cidr: null
    - cidr: 10.228.227.0/24
      zone: '{{ availability_zone_b }}'
      public: 'False'
      assign_instances_ipv6: false
      ipv6_cidr: null
    - cidr: 10.228.228.0/24
      zone: '{{ availability_zone_a }}'
      public: 'False'
      assign_instances_ipv6: true
      # Carve first /64 subnet of the Amazon-provided CIDR for the VPC.
      ipv6_cidr: "{{ vpc_ipv6_cidr_block | ansible.netcommon.ipsubnet(64, 1) }}"
    - cidr: 10.228.229.0/24
      zone: '{{ availability_zone_a }}'
      public: 'True'
      assign_instances_ipv6: true
      ipv6_cidr: "{{ vpc_ipv6_cidr_block | ansible.netcommon.ipsubnet(64, 2) }}"
    - cidr: 10.228.230.0/24
      zone: '{{ availability_zone_b }}'
      public: 'False'
      assign_instances_ipv6: true
      ipv6_cidr: "{{ vpc_ipv6_cidr_block | ansible.netcommon.ipsubnet(64, 3) }}"
    register: subnets
  - ec2_vpc_subnet_info:
      filters:
        vpc-id: '{{ vpc.vpc.id }}'
    register: vpc_subnets
  - set_fact:
      public_subnets: "{{ (vpc_subnets.subnets | selectattr('tags.Public', 'equalto',\
        \ 'True') | map(attribute='id') | list) }}"
      public_cidrs: "{{ (vpc_subnets.subnets | selectattr('tags.Public', 'equalto',\
        \ 'True') | map(attribute='cidr_block') | list) }}"
      private_subnets: "{{ (vpc_subnets.subnets | selectattr('tags.Public', 'equalto',\
        \ 'False') | map(attribute='id') | list) }}"
  - name: create IGW
    ec2_vpc_igw:
      vpc_id: '{{ vpc.vpc.id }}'
    register: vpc_igw
  - name: create NAT GW
    ec2_vpc_nat_gateway:
      if_exist_do_not_create: yes
      wait: yes
      subnet_id: '{{ subnets.results[0].subnet.id }}'
    register: nat_gateway
  - name: CHECK MODE - route table should be created
    ec2_vpc_route_table:
      vpc_id: '{{ vpc.vpc.id }}'
      tags:
        Public: 'true'
        Name: Public route table
    check_mode: true
    register: check_mode_results
  - name: assert that the public route table would be created
    assert:
      that:
      - check_mode_results.changed

  - name: create public route table
    ec2_vpc_route_table:
      vpc_id: '{{ vpc.vpc.id }}'
      tags:
        Public: 'true'
        Name: Public route table
    register: create_public_table
  - name: assert that public route table has an id
    assert:
      that:
      - create_public_table.changed
      - create_public_table.route_table.id.startswith('rtb-')
      - "'Public' in create_public_table.route_table.tags"
      - create_public_table.route_table.tags['Public'] == 'true'
      - create_public_table.route_table.associations | length == 0
      - create_public_table.route_table.vpc_id == "{{ vpc.vpc.id }}"
      - create_public_table.route_table.propagating_vgws | length == 0
      # One route for IPv4, one route for IPv6
      - create_public_table.route_table.routes | length == 2

  - name: CHECK MODE - route table should already exist
    ec2_vpc_route_table:
      vpc_id: '{{ vpc.vpc.id }}'
      tags:
        Public: 'true'
        Name: Public route table
    check_mode: true
    register: check_mode_results
  - name: assert the table already exists
    assert:
      that:
      - not check_mode_results.changed

  - name: recreate public route table
    ec2_vpc_route_table:
      vpc_id: '{{ vpc.vpc.id }}'
      tags:
        Public: 'true'
        Name: Public route table
    register: recreate_public_route_table
  - name: assert that public route table did not change
    assert:
      that:
      - not recreate_public_route_table.changed
      - create_public_table.route_table.id.startswith('rtb-')
      - "'Public' in create_public_table.route_table.tags"
      - create_public_table.route_table.tags['Public'] == 'true'
      - create_public_table.route_table.associations | length == 0
      - create_public_table.route_table.vpc_id == "{{ vpc.vpc.id }}"
      - create_public_table.route_table.propagating_vgws | length == 0
      - create_public_table.route_table.routes | length == 2

  - name: CHECK MODE - add route to public route table
    ec2_vpc_route_table:
      vpc_id: '{{ vpc.vpc.id }}'
      tags:
        Public: 'true'
        Name: Public route table
      routes:
      - dest: 0.0.0.0/0
        gateway_id: igw
      - dest: ::/0
        gateway_id: igw
    check_mode: true
    register: check_mode_results
  - name: assert a route would be added
    assert:
      that:
      - check_mode_results.changed

  - name: add a route to public route table
    ec2_vpc_route_table:
      vpc_id: '{{ vpc.vpc.id }}'
      tags:
        Public: 'true'
        Name: Public route table
      routes:
      - dest: 0.0.0.0/0
        gateway_id: igw
      - dest: ::/0
        gateway_id: igw
    register: add_routes
  - name: assert route table contains new route
    assert:
      that:
      - add_routes.changed
      - add_routes.route_table.id.startswith('rtb-')
      - "'Public' in add_routes.route_table.tags"
      - add_routes.route_table.tags['Public'] == 'true'
      # 10.228.224.0/21
      # 0.0.0.0/0
      # ::/0
      # Amazon-provide IPv6 block
      - add_routes.route_table.routes | length == 4
      - add_routes.route_table.associations | length == 0
      - add_routes.route_table.vpc_id == "{{ vpc.vpc.id }}"
      - add_routes.route_table.propagating_vgws | length == 0

  - name: CHECK MODE - re-add route to public route table
    ec2_vpc_route_table:
      vpc_id: '{{ vpc.vpc.id }}'
      tags:
        Public: 'true'
        Name: Public route table
      routes:
      - dest: 0.0.0.0/0
        gateway_id: igw
    check_mode: true
    register: check_mode_results
  - name: assert a route would not be added
    assert:
      that:
      - check_mode_results is not changed

  - name: re-add a route to public route table
    ec2_vpc_route_table:
      vpc_id: '{{ vpc.vpc.id }}'
      tags:
        Public: 'true'
        Name: Public route table
      routes:
      - dest: 0.0.0.0/0
        gateway_id: igw
    register: add_routes
  - name: assert route table contains route
    assert:
      that:
      - add_routes is not changed
      - add_routes.route_table.routes | length == 4

  - name: CHECK MODE - add subnets to public route table
    ec2_vpc_route_table:
      vpc_id: '{{ vpc.vpc.id }}'
      tags:
        Public: 'true'
        Name: Public route table
      routes:
      - dest: 0.0.0.0/0
        gateway_id: igw
      subnets: '{{ public_subnets }}'
    check_mode: true
    register: check_mode_results
  - name: assert the subnets would be added to the route table
    assert:
      that:
      - check_mode_results.changed

  - name: add subnets to public route table
    ec2_vpc_route_table:
      vpc_id: '{{ vpc.vpc.id }}'
      tags:
        Public: 'true'
        Name: Public route table
      routes:
      - dest: 0.0.0.0/0
        gateway_id: igw
      subnets: '{{ public_subnets }}'
    register: add_subnets
  - name: assert route table contains subnets
    assert:
      that:
      - add_subnets.changed
      - add_subnets.route_table.associations | length == 3

  - name: CHECK MODE - no routes but purge_routes set to false
    ec2_vpc_route_table:
      vpc_id: '{{ vpc.vpc.id }}'
      tags:
        Public: 'true'
        Name: Public route table
      purge_routes: no
      subnets: '{{ public_subnets }}'
    check_mode: true
    register: check_mode_results
  - name: assert no routes would be removed
    assert:
      that:
      - not check_mode_results.changed

  - name: rerun with purge_routes set to false
    ec2_vpc_route_table:
      vpc_id: '{{ vpc.vpc.id }}'
      tags:
        Public: 'true'
        Name: Public route table
      purge_routes: no
      subnets: '{{ public_subnets }}'
    register: no_purge_routes
  - name: assert route table still has routes
    assert:
      that:
      - not no_purge_routes.changed
      - no_purge_routes.route_table.routes | length == 4
      - no_purge_routes.route_table.associations | length == 3

  - name: rerun with purge_subnets set to false
    ec2_vpc_route_table:
      vpc_id: '{{ vpc.vpc.id }}'
      tags:
        Public: 'true'
        Name: Public route table
      purge_subnets: no
      routes:
      - dest: 0.0.0.0/0
        gateway_id: igw
    register: no_purge_subnets
  - name: assert route table still has subnets
    assert:
      that:
      - not no_purge_subnets.changed
      - no_purge_subnets.route_table.routes | length == 4
      - no_purge_subnets.route_table.associations | length == 3

  - name: rerun with purge_tags not set (implicitly false)
    ec2_vpc_route_table:
      vpc_id: '{{ vpc.vpc.id }}'
      routes:
      - dest: 0.0.0.0/0
        gateway_id: igw
      lookup: id
      route_table_id: '{{ create_public_table.route_table.id }}'
      subnets: '{{ public_subnets }}'
    register: no_purge_tags
  - name: assert route table still has tags
    assert:
      that:
      - not no_purge_tags.changed
      - "'Public' in no_purge_tags.route_table.tags"
      - no_purge_tags.route_table.tags['Public'] == 'true'

  - name: CHECK MODE - purge subnets
    ec2_vpc_route_table:
      vpc_id: '{{ vpc.vpc.id }}'
      routes:
      - dest: 0.0.0.0/0
        gateway_id: igw
      subnets: []
      tags:
        Public: 'true'
        Name: Public route table
    check_mode: true
    register: check_mode_results
  - name: assert subnets would be removed
    assert:
      that:
      - check_mode_results.changed

  - name: purge subnets
    ec2_vpc_route_table:
      vpc_id: '{{ vpc.vpc.id }}'
      routes:
      - dest: 0.0.0.0/0
        gateway_id: igw
      subnets: []
      tags:
        Public: 'true'
        Name: Public route table
    register: purge_subnets
  - name: assert purge subnets worked
    assert:
      that:
      - purge_subnets.changed
      - purge_subnets.route_table.associations | length == 0
      - purge_subnets.route_table.id == create_public_table.route_table.id

  - name: CHECK MODE - purge routes
    ec2_vpc_route_table:
      vpc_id: '{{ vpc.vpc.id }}'
      tags:
        Public: 'true'
        Name: Public route table
      routes: []
    check_mode: true
    register: check_mode_results
  - name: assert routes would be removed
    assert:
      that:
      - check_mode_results.changed

  - name: add subnets by cidr to public route table
    ec2_vpc_route_table:
      vpc_id: '{{ vpc.vpc.id }}'
      routes:
      - dest: 0.0.0.0/0
        gateway_id: igw
      subnets: '{{ public_cidrs }}'
      lookup: id
      route_table_id: '{{ create_public_table.route_table.id }}'
    register: add_subnets_cidr
  - name: assert route table contains subnets added by cidr
    assert:
      that:
      - add_subnets_cidr.changed
      - add_subnets_cidr.route_table.associations | length == 3

  - name: purge subnets added by cidr
    ec2_vpc_route_table:
      vpc_id: '{{ vpc.vpc.id }}'
      routes:
      - dest: 0.0.0.0/0
        gateway_id: igw
      subnets: []
      lookup: id
      route_table_id: '{{ create_public_table.route_table.id }}'
    register: purge_subnets_cidr
  - name: assert purge subnets added by cidr worked
    assert:
      that:
      - purge_subnets_cidr.changed
      - purge_subnets_cidr.route_table.associations | length == 0

  - name: add subnets by name to public route table
    ec2_vpc_route_table:
      vpc_id: '{{ vpc.vpc.id }}'
      routes:
      - dest: 0.0.0.0/0
        gateway_id: igw
      subnets: '{{ public_subnets }}'
      lookup: id
      route_table_id: '{{ create_public_table.route_table.id }}'
    register: add_subnets_name
  - name: assert route table contains subnets added by name
    assert:
      that:
      - add_subnets_name.changed
      - add_subnets_name.route_table.associations | length == 3

  - name: purge subnets added by name
    ec2_vpc_route_table:
      vpc_id: '{{ vpc.vpc.id }}'
      routes:
      - dest: 0.0.0.0/0
        gateway_id: igw
      subnets: []
      lookup: id
      route_table_id: '{{ create_public_table.route_table.id }}'
    register: purge_subnets_name
  - name: assert purge subnets added by name worked
    assert:
      that:
      - purge_subnets_name.changed
      - purge_subnets_name.route_table.associations | length == 0

  - name: purge routes
    ec2_vpc_route_table:
      vpc_id: '{{ vpc.vpc.id }}'
      tags:
        Public: 'true'
        Name: Public route table
      routes: []
    register: purge_routes
  - name: assert purge routes worked
    assert:
      that:
      - purge_routes.changed
      - purge_routes.route_table.routes | length == 3
      - purge_routes.route_table.id == create_public_table.route_table.id

  - name: CHECK MODE - update tags
    ec2_vpc_route_table:
      vpc_id: '{{ vpc.vpc.id }}'
      route_table_id: '{{ create_public_table.route_table.id }}'
      lookup: id
      purge_tags: yes
      tags:
        Name: Public route table
        Updated: new_tag
    check_mode: true
    register: check_mode_results
  - name: assert tags would be changed
    assert:
      that:
      - check_mode_results.changed

  - name: update tags
    ec2_vpc_route_table:
      vpc_id: '{{ vpc.vpc.id }}'
      route_table_id: '{{ create_public_table.route_table.id }}'
      lookup: id
      purge_tags: yes
      tags:
        Name: Public route table
        Updated: new_tag
    register: update_tags
  - name: assert update tags worked
    assert:
      that:
      - update_tags.changed
      - "'Updated' in update_tags.route_table.tags"
      - update_tags.route_table.tags['Updated'] == 'new_tag'
      - "'Public' not in update_tags.route_table.tags"

  - name: create NAT GW
    ec2_vpc_nat_gateway:
      if_exist_do_not_create: yes
      wait: yes
      subnet_id: '{{ subnets.results[0].subnet.id }}'
    register: nat_gateway
  - name: CHECK MODE - create private route table
    ec2_vpc_route_table:
      vpc_id: '{{ vpc.vpc.id }}'
      tags:
        Public: 'false'
        Name: Private route table
      routes:
      - gateway_id: '{{ nat_gateway.nat_gateway_id }}'
        dest: 0.0.0.0/0
      subnets: '{{ private_subnets }}'
    check_mode: true
    register: check_mode_results
  - name: assert the route table would be created
    assert:
      that:
      - check_mode_results.changed

  - name: create private route table
    ec2_vpc_route_table:
      vpc_id: '{{ vpc.vpc.id }}'
      tags:
        Public: 'false'
        Name: Private route table
      routes:
      - gateway_id: '{{ nat_gateway.nat_gateway_id }}'
        dest: 0.0.0.0/0
      subnets: '{{ private_subnets }}'
    register: create_private_table
  - name: assert creating private route table worked
    assert:
      that:
      - create_private_table.changed
      - create_private_table.route_table.id != create_public_table.route_table.id
      - "'Public' in create_private_table.route_table.tags"

  - name: CHECK MODE - destroy public route table by tags
    ec2_vpc_route_table:
      vpc_id: '{{ vpc.vpc.id }}'
      state: absent
      tags:
        Updated: new_tag
        Name: Public route table
    check_mode: true
    register: check_mode_results
  - name: assert the route table would be deleted
    assert:
      that: check_mode_results.changed
  - name: destroy public route table by tags
    ec2_vpc_route_table:
      vpc_id: '{{ vpc.vpc.id }}'
      state: absent
      tags:
        Updated: new_tag
        Name: Public route table
    register: destroy_table
  - name: assert destroy table worked
    assert:
      that:
      - destroy_table.changed

  - name: CHECK MODE - redestroy public route table
    ec2_vpc_route_table:
      route_table_id: '{{ create_public_table.route_table.id }}'
      lookup: id
      state: absent
    check_mode: true
    register: check_mode_results
  - name: assert the public route table does not exist
    assert:
      that:
      - not check_mode_results.changed

  - name: redestroy public route table
    ec2_vpc_route_table:
      route_table_id: '{{ create_public_table.route_table.id }}'
      lookup: id
      state: absent
    register: redestroy_table
  - name: assert redestroy table worked
    assert:
      that:
      - not redestroy_table.changed

  - name: destroy NAT GW
    ec2_vpc_nat_gateway:
      state: absent
      wait: yes
      release_eip: yes
      subnet_id: '{{ subnets.results[0].subnet.id }}'
      nat_gateway_id: '{{ nat_gateway.nat_gateway_id }}'
    register: nat_gateway
  - name: show route table info, get table using route-table-id
    ec2_vpc_route_table_info:
      filters:
        route-table-id: '{{ create_private_table.route_table.id }}'
    register: route_table_info
  - name: assert route_table_info has correct attributes
    assert:
      that:
      - '"route_tables" in route_table_info'
      - route_table_info.route_tables | length == 1
      - '"id" in route_table_info.route_tables[0]'
      - '"routes" in route_table_info.route_tables[0]'
      - '"associations" in route_table_info.route_tables[0]'
      - '"tags" in route_table_info.route_tables[0]'
      - '"vpc_id" in route_table_info.route_tables[0]'
      - route_table_info.route_tables[0].id == create_private_table.route_table.id
      - '"propagating_vgws" in route_table_info.route_tables[0]'

  - name: show route table info, get table using tags
    ec2_vpc_route_table_info:
      filters:
        tag:Public: 'false'
        tag:Name: Private route table
        vpc-id: '{{ vpc.vpc.id }}'
    register: route_table_info
  - name: assert route_table_info has correct tags
    assert:
      that:
      - route_table_info.route_tables | length == 1
      - '"tags" in route_table_info.route_tables[0]'
      - '"Public" in route_table_info.route_tables[0].tags'
      - route_table_info.route_tables[0].tags["Public"] == "false"
      - '"Name" in route_table_info.route_tables[0].tags'
      - route_table_info.route_tables[0].tags["Name"] == "Private route table"

  - name: create NAT GW
    ec2_vpc_nat_gateway:
      if_exist_do_not_create: yes
      wait: yes
      subnet_id: '{{ subnets.results[0].subnet.id }}'
    register: nat_gateway
  - name: show route table info
    ec2_vpc_route_table_info:
      filters:
        route-table-id: '{{ create_private_table.route_table.id }}'
  - name: recreate private route table with new NAT GW
    ec2_vpc_route_table:
      vpc_id: '{{ vpc.vpc.id }}'
      tags:
        Public: 'false'
        Name: Private route table
      routes:
      - nat_gateway_id: '{{ nat_gateway.nat_gateway_id }}'
        dest: 0.0.0.0/0
      subnets: '{{ private_subnets }}'
    register: recreate_private_table
  - name: assert creating private route table worked
    assert:
      that:
      - recreate_private_table.changed
      - recreate_private_table.route_table.id != create_public_table.route_table.id

  - name: create a VPC endpoint to test ec2_vpc_route_table ignores it
    ec2_vpc_endpoint:
      state: present
      vpc_id: '{{ vpc.vpc.id }}'
      service: com.amazonaws.{{ aws_region }}.s3
      route_table_ids:
      - '{{ recreate_private_table.route_table.route_table_id }}'
      wait: True
    register: vpc_endpoint
  - name: purge routes
    ec2_vpc_route_table:
      vpc_id: '{{ vpc.vpc.id }}'
      tags:
        Public: 'false'
        Name: Private route table
      routes:
      - nat_gateway_id: '{{ nat_gateway.nat_gateway_id }}'
        dest: 0.0.0.0/0
      subnets: '{{ private_subnets }}'
      purge_routes: true
    register: result
  - name: Get endpoint infos to verify that it wasn't purged from the route table
    ec2_vpc_endpoint_info:
      vpc_endpoint_ids:
      - '{{ vpc_endpoint.result.vpc_endpoint_id }}'
    register: endpoint_details
  - name: assert the route table is associated with the VPC endpoint
    assert:
      that:
      - endpoint_details.vpc_endpoints[0].route_table_ids[0] == recreate_private_table.route_table.route_table_id

  # ------------------------------------------------------------------------------------------

  - name: Create gateway route table - check_mode
    ec2_vpc_route_table:
      vpc_id: "{{ vpc.vpc.id }}"
      tags:
        Public: 'true'
        Name: Gateway route table
      gateway_id: "{{ vpc_igw.gateway_id }}"
    register: create_gateway_table
    check_mode: yes

  - assert:
      that:
        - create_gateway_table is changed

  - name: Create gateway route table
    ec2_vpc_route_table:
      vpc_id: "{{ vpc.vpc.id }}"
      tags:
        Public: 'true'
        Name: Gateway route table
      gateway_id: "{{ vpc_igw.gateway_id }}"
    register: create_gateway_table

  - assert:
      that:
        - create_gateway_table is changed
        - create_gateway_table.route_table.id.startswith('rtb-')
        - "'Public' in create_gateway_table.route_table.tags"
        - create_gateway_table.route_table.tags['Public'] == 'true'
        - create_gateway_table.route_table.routes | length == 2
        - create_gateway_table.route_table.associations | length == 1
        - create_gateway_table.route_table.vpc_id == vpc.vpc.id
        - create_gateway_table.route_table.propagating_vgws | length == 0

  - name: Create gateway route table (idempotence) - check_mode
    ec2_vpc_route_table:
      vpc_id: "{{ vpc.vpc.id }}"
      tags:
        Public: 'true'
        Name: Gateway route table
      gateway_id: "{{ vpc_igw.gateway_id }}"
    register: create_gateway_table
    check_mode: yes

  - assert:
      that:
        - create_gateway_table is not changed

  - name: Create gateway route table (idempotence)
    ec2_vpc_route_table:
      vpc_id: "{{ vpc.vpc.id }}"
      tags:
        Public: 'true'
        Name: Gateway route table
      gateway_id: "{{ vpc_igw.gateway_id }}"
    register: create_gateway_table

  - assert:
      that:
        - create_gateway_table is not changed
        - create_gateway_table.route_table.id.startswith('rtb-')
        - "'Public' in create_gateway_table.route_table.tags"
        - create_gateway_table.route_table.tags['Public'] == 'true'
        - create_gateway_table.route_table.routes | length == 2
        - create_gateway_table.route_table.associations | length == 1
        - create_gateway_table.route_table.vpc_id == vpc.vpc.id
        - create_gateway_table.route_table.propagating_vgws | length == 0

  # ------------------------------------------------------------------------------------------

  - name: Create ENI for gateway route table
    ec2_eni:
      subnet_id: '{{ public_subnets[0] }}'
    register: eni

  - name: Replace route to gateway route table - check_mode
    ec2_vpc_route_table:
      vpc_id: "{{ vpc.vpc.id }}"
      tags:
        Public: 'true'
        Name: Gateway route table
      gateway_id: "{{ vpc_igw.gateway_id }}"
      routes:
      - dest: "{{ vpc_cidr }}"
        network_interface_id: "{{ eni.interface.id }}"
      purge_routes: no
    register: create_gateway_table
    check_mode: yes

  - assert:
      that:
        - create_gateway_table is changed

  - name: Replace route to gateway route table
    ec2_vpc_route_table:
      vpc_id: "{{ vpc.vpc.id }}"
      tags:
        Public: 'true'
        Name: Gateway route table
      gateway_id: "{{ vpc_igw.gateway_id }}"
      routes:
      - dest: "{{ vpc_cidr }}"
        network_interface_id: "{{ eni.interface.id }}"
      purge_routes: no
    register: create_gateway_table

  - assert:
      that:
        - create_gateway_table is changed
        - create_gateway_table.route_table.id.startswith('rtb-')
        - "'Public' in create_gateway_table.route_table.tags"
        - create_gateway_table.route_table.tags['Public'] == 'true'
        - create_gateway_table.route_table.routes | length == 2
        - create_gateway_table.route_table.associations | length == 1
        - create_gateway_table.route_table.vpc_id == vpc.vpc.id
        - create_gateway_table.route_table.propagating_vgws | length == 0
        - create_gateway_table.route_table.routes[0].destination_cidr_block == vpc_cidr
        - create_gateway_table.route_table.routes[0].network_interface_id == eni.interface.id

  - name: Replace route to gateway route table (idempotence) - check_mode
    ec2_vpc_route_table:
      vpc_id: "{{ vpc.vpc.id }}"
      tags:
        Public: 'true'
        Name: Gateway route table
      gateway_id: "{{ vpc_igw.gateway_id }}"
      routes:
      - dest: "{{ vpc_cidr }}"
        network_interface_id: "{{ eni.interface.id }}"
      purge_routes: no
    register: create_gateway_table
    check_mode: yes

  - assert:
      that:
        - create_gateway_table is not changed

  - name: Replace route to gateway route table (idempotence)
    ec2_vpc_route_table:
      vpc_id: "{{ vpc.vpc.id }}"
      tags:
        Public: 'true'
        Name: Gateway route table
      gateway_id: "{{ vpc_igw.gateway_id }}"
      routes:
      - dest: "{{ vpc_cidr }}"
        network_interface_id: "{{ eni.interface.id }}"
      purge_routes: no
    register: create_gateway_table

  - assert:
      that:
        - create_gateway_table is not changed
        - create_gateway_table.route_table.id.startswith('rtb-')
        - "'Public' in create_gateway_table.route_table.tags"
        - create_gateway_table.route_table.tags['Public'] == 'true'
        - create_gateway_table.route_table.routes | length == 2
        - create_gateway_table.route_table.associations | length == 1
        - create_gateway_table.route_table.vpc_id == vpc.vpc.id
        - create_gateway_table.route_table.propagating_vgws | length == 0
        - create_gateway_table.route_table.routes[0].destination_cidr_block == vpc_cidr
        - create_gateway_table.route_table.routes[0].network_interface_id == eni.interface.id

  # ------------------------------------------------------------------------------------------

  - name: Add route to gateway route table - check_mode
    ec2_vpc_route_table:
      vpc_id: "{{ vpc.vpc.id }}"
      tags:
        Public: 'true'
        Name: Gateway route table
      gateway_id: "{{ vpc_igw.gateway_id }}"
      routes:
      - dest: "10.228.228.0/24"
        network_interface_id: "{{ eni.interface.id }}"
      purge_routes: no
    register: create_gateway_table
    check_mode: yes

  - assert:
      that:
        - create_gateway_table is changed

  - name: Add route to gateway route table
    ec2_vpc_route_table:
      vpc_id: "{{ vpc.vpc.id }}"
      tags:
        Public: 'true'
        Name: Gateway route table
      gateway_id: "{{ vpc_igw.gateway_id }}"
      routes:
      - dest: "10.228.228.0/24"
        network_interface_id: "{{ eni.interface.id }}"
      purge_routes: no
    register: create_gateway_table

  - assert:
      that:
        - create_gateway_table is changed
        - create_gateway_table.route_table.id.startswith('rtb-')
        - "'Public' in create_gateway_table.route_table.tags"
        - create_gateway_table.route_table.tags['Public'] == 'true'
        - create_gateway_table.route_table.routes | length == 3
        - create_gateway_table.route_table.associations | length == 1
        - create_gateway_table.route_table.vpc_id == vpc.vpc.id
        - create_gateway_table.route_table.propagating_vgws | length == 0

  - name: Add route to gateway route table (idempotence) - check_mode
    ec2_vpc_route_table:
      vpc_id: "{{ vpc.vpc.id }}"
      tags:
        Public: 'true'
        Name: Gateway route table
      gateway_id: "{{ vpc_igw.gateway_id }}"
      routes:
      - dest: "10.228.228.0/24"
        network_interface_id: "{{ eni.interface.id }}"
      purge_routes: no
    register: create_gateway_table
    check_mode: yes

  - assert:
      that:
        - create_gateway_table is not changed

  - name: Add route to gateway route table (idempotence)
    ec2_vpc_route_table:
      vpc_id: "{{ vpc.vpc.id }}"
      tags:
        Public: 'true'
        Name: Gateway route table
      gateway_id: "{{ vpc_igw.gateway_id }}"
      routes:
      - dest: "10.228.228.0/24"
        network_interface_id: "{{ eni.interface.id }}"
      purge_routes: no
    register: create_gateway_table

  - assert:
      that:
        - create_gateway_table is not changed
        - create_gateway_table.route_table.id.startswith('rtb-')
        - "'Public' in create_gateway_table.route_table.tags"
        - create_gateway_table.route_table.tags['Public'] == 'true'
        - create_gateway_table.route_table.routes | length == 3
        - create_gateway_table.route_table.associations | length == 1
        - create_gateway_table.route_table.vpc_id == vpc.vpc.id
        - create_gateway_table.route_table.propagating_vgws | length == 0

  # ------------------------------------------------------------------------------------------

  - name: Ensure gateway doesn't disassociate when not passed in - check_mode
    ec2_vpc_route_table:
      vpc_id: "{{ vpc.vpc.id }}"
      tags:
        Public: 'true'
        Name: Gateway route table
      routes:
      - dest: "10.228.228.0/24"
        network_interface_id: "{{ eni.interface.id }}"
      purge_routes: no
    register: create_gateway_table
    check_mode: yes

  - assert:
      that:
        - create_gateway_table is not changed

  - name: Ensure gateway doesn't disassociate when not passed in
    ec2_vpc_route_table:
      vpc_id: "{{ vpc.vpc.id }}"
      tags:
        Public: 'true'
        Name: Gateway route table
      routes:
      - dest: "10.228.228.0/24"
        network_interface_id: "{{ eni.interface.id }}"
      purge_routes: no
    register: create_gateway_table

  - assert:
      that:
        - create_gateway_table is not changed
        - create_gateway_table.route_table.id.startswith('rtb-')
        - "'Public' in create_gateway_table.route_table.tags"
        - create_gateway_table.route_table.tags['Public'] == 'true'
        - create_gateway_table.route_table.routes | length == 3
        - "{{ create_gateway_table.route_table.associations | map(attribute='association_state') | selectattr('state', '==', 'associated') | length == 1 }}"
        - create_gateway_table.route_table.vpc_id == vpc.vpc.id
        - create_gateway_table.route_table.propagating_vgws | length == 0

  # ------------------------------------------------------------------------------------------

  - name: Disassociate gateway when gateway_id is 'None' - check_mode
    ec2_vpc_route_table:
      vpc_id: "{{ vpc.vpc.id }}"
      tags:
        Public: 'true'
        Name: Gateway route table
      gateway_id: None
      routes:
      - dest: "10.228.228.0/24"
        network_interface_id: "{{ eni.interface.id }}"
      purge_routes: no
    register: create_gateway_table
    check_mode: yes

  - assert:
      that:
        - create_gateway_table is changed

  - name: Disassociate gateway when gateway_id is 'None'
    ec2_vpc_route_table:
      vpc_id: "{{ vpc.vpc.id }}"
      tags:
        Public: 'true'
        Name: Gateway route table
      gateway_id: None
      routes:
      - dest: "10.228.228.0/24"
        network_interface_id: "{{ eni.interface.id }}"
      purge_routes: no
    register: create_gateway_table

  - assert:
      that:
        - create_gateway_table is changed
        - create_gateway_table.route_table.id.startswith('rtb-')
        - "'Public' in create_gateway_table.route_table.tags"
        - create_gateway_table.route_table.tags['Public'] == 'true'
        - create_gateway_table.route_table.routes | length == 3
        - "{{ create_gateway_table.route_table.associations | map(attribute='association_state') | selectattr('state', '==', 'associated') | length == 0 }}"
        - create_gateway_table.route_table.vpc_id == vpc.vpc.id
        - create_gateway_table.route_table.propagating_vgws | length == 0

  - name: Disassociate gateway when gateway_id is 'None' (idempotence) - check_mode
    ec2_vpc_route_table:
      vpc_id: "{{ vpc.vpc.id }}"
      tags:
        Public: 'true'
        Name: Gateway route table
      gateway_id: None
      routes:
      - dest: "10.228.228.0/24"
        network_interface_id: "{{ eni.interface.id }}"
      purge_routes: no
    register: create_gateway_table
    check_mode: yes

  - assert:
      that:
        - create_gateway_table is not changed

  - name: Disassociate gateway when gateway_id is 'None' (idempotence)
    ec2_vpc_route_table:
      vpc_id: "{{ vpc.vpc.id }}"
      tags:
        Public: 'true'
        Name: Gateway route table
      gateway_id: None
      routes:
      - dest: "10.228.228.0/24"
        network_interface_id: "{{ eni.interface.id }}"
      purge_routes: no
    register: create_gateway_table

  - assert:
      that:
        - create_gateway_table is not changed
        - create_gateway_table.route_table.id.startswith('rtb-')
        - "'Public' in create_gateway_table.route_table.tags"
        - create_gateway_table.route_table.tags['Public'] == 'true'
        - create_gateway_table.route_table.routes | length == 3
        - "{{ create_gateway_table.route_table.associations | map(attribute='association_state') | selectattr('state', '==', 'associated') | length == 0 }}"
        - create_gateway_table.route_table.vpc_id == vpc.vpc.id
        - create_gateway_table.route_table.propagating_vgws | length == 0

  # ------------------------------------------------------------------------------------------

  - name: Associate gateway with route table - check_mode
    ec2_vpc_route_table:
      vpc_id: "{{ vpc.vpc.id }}"
      tags:
        Public: 'true'
        Name: Gateway route table
      gateway_id: "{{ vpc_igw.gateway_id }}"
      purge_routes: no
    register: create_gateway_table
    check_mode: yes

  - assert:
      that:
        - create_gateway_table is changed

  - name: Associate gateway with route table
    ec2_vpc_route_table:
      vpc_id: "{{ vpc.vpc.id }}"
      tags:
        Public: 'true'
        Name: Gateway route table
      gateway_id: "{{ vpc_igw.gateway_id }}"
      purge_routes: no
    register: create_gateway_table

  - assert:
      that:
        - create_gateway_table is changed
        - create_gateway_table.route_table.id.startswith('rtb-')
        - "'Public' in create_gateway_table.route_table.tags"
        - create_gateway_table.route_table.tags['Public'] == 'true'
        - create_gateway_table.route_table.routes | length == 3
        - create_gateway_table.route_table.associations | length == 1
        - "{{ create_gateway_table.route_table.associations | map(attribute='association_state') | selectattr('state', '==', 'associated') | length == 1 }}"
        - create_gateway_table.route_table.vpc_id == vpc.vpc.id
        - create_gateway_table.route_table.propagating_vgws | length == 0

  - name: Associate gateway with route table (idempotence) - check_mode
    ec2_vpc_route_table:
      vpc_id: "{{ vpc.vpc.id }}"
      tags:
        Public: 'true'
        Name: Gateway route table
      gateway_id: "{{ vpc_igw.gateway_id }}"
      purge_routes: no
    register: create_gateway_table
    check_mode: yes

  - assert:
      that:
        - create_gateway_table is not changed

  - name: Associate gateway with route table (idempotence)
    ec2_vpc_route_table:
      vpc_id: "{{ vpc.vpc.id }}"
      tags:
        Public: 'true'
        Name: Gateway route table
      gateway_id: "{{ vpc_igw.gateway_id }}"
      purge_routes: no
    register: create_gateway_table

  - assert:
      that:
        - create_gateway_table is not changed
        - create_gateway_table.route_table.id.startswith('rtb-')
        - "'Public' in create_gateway_table.route_table.tags"
        - create_gateway_table.route_table.tags['Public'] == 'true'
        - create_gateway_table.route_table.routes | length == 3
        - create_gateway_table.route_table.associations | length == 1
        - "{{ create_gateway_table.route_table.associations | map(attribute='association_state') | selectattr('state', '==', 'associated') | length == 1 }}"
        - create_gateway_table.route_table.vpc_id == vpc.vpc.id
        - create_gateway_table.route_table.propagating_vgws | length == 0

  # ------------------------------------------------------------------------------------------

  - name: Disassociate gateway when gateway_id is '' - check_mode
    ec2_vpc_route_table:
      vpc_id: "{{ vpc.vpc.id }}"
      tags:
        Public: 'true'
        Name: Gateway route table
      gateway_id: ''
      routes:
      - dest: "10.228.228.0/24"
        network_interface_id: "{{ eni.interface.id }}"
      purge_routes: no
    register: create_gateway_table
    check_mode: yes

  - assert:
      that:
        - create_gateway_table is changed

  - name: Disassociate gateway when gateway_id is ''
    ec2_vpc_route_table:
      vpc_id: "{{ vpc.vpc.id }}"
      tags:
        Public: 'true'
        Name: Gateway route table
      gateway_id: ''
      routes:
      - dest: "10.228.228.0/24"
        network_interface_id: "{{ eni.interface.id }}"
      purge_routes: no
    register: create_gateway_table

  - assert:
      that:
        - create_gateway_table is changed
        - create_gateway_table.route_table.id.startswith('rtb-')
        - "'Public' in create_gateway_table.route_table.tags"
        - create_gateway_table.route_table.tags['Public'] == 'true'
        - create_gateway_table.route_table.routes | length == 3
        - "{{ create_gateway_table.route_table.associations | map(attribute='association_state') | selectattr('state', '==', 'associated') | length == 0 }}"
        - create_gateway_table.route_table.vpc_id == vpc.vpc.id
        - create_gateway_table.route_table.propagating_vgws | length == 0

  - name: Disassociate gateway when gateway_id is '' (idempotence) - check_mode
    ec2_vpc_route_table:
      vpc_id: "{{ vpc.vpc.id }}"
      tags:
        Public: 'true'
        Name: Gateway route table
      gateway_id: ''
      routes:
      - dest: "10.228.228.0/24"
        network_interface_id: "{{ eni.interface.id }}"
      purge_routes: no
    register: create_gateway_table
    check_mode: yes

  - assert:
      that:
        - create_gateway_table is not changed

  - name: Disassociate gateway when gateway_id is '' (idempotence)
    ec2_vpc_route_table:
      vpc_id: "{{ vpc.vpc.id }}"
      tags:
        Public: 'true'
        Name: Gateway route table
      gateway_id: ''
      routes:
      - dest: "10.228.228.0/24"
        network_interface_id: "{{ eni.interface.id }}"
      purge_routes: no
    register: create_gateway_table

  - assert:
      that:
        - create_gateway_table is not changed
        - create_gateway_table.route_table.id.startswith('rtb-')
        - "'Public' in create_gateway_table.route_table.tags"
        - create_gateway_table.route_table.tags['Public'] == 'true'
        - create_gateway_table.route_table.routes | length == 3
        - "{{ create_gateway_table.route_table.associations | map(attribute='association_state') | selectattr('state', '==', 'associated') | length == 0 }}"
        - create_gateway_table.route_table.vpc_id == vpc.vpc.id
        - create_gateway_table.route_table.propagating_vgws | length == 0

  # ------------------------------------------------------------------------------------------

  - name: Create vgw for gateway route table
    ec2_vpc_vgw:
      state: present
      vpc_id: "{{ vpc.vpc.id }}"
      type: ipsec.1
      name: '{{ resource_prefix }}_vpc'
    register: vgw

  - name: Associate vgw with route table - check_mode
    ec2_vpc_route_table:
      vpc_id: "{{ vpc.vpc.id }}"
      tags:
        Public: 'true'
        Name: Gateway route table
      gateway_id: "{{ vgw.vgw.id }}"
      purge_routes: no
    register: create_gateway_table
    check_mode: yes

  - assert:
      that:
        - create_gateway_table is changed

  - name: Associate vgw with route table
    ec2_vpc_route_table:
      vpc_id: "{{ vpc.vpc.id }}"
      tags:
        Public: 'true'
        Name: Gateway route table
      gateway_id: "{{ vgw.vgw.id }}"
      purge_routes: no
    register: create_gateway_table

  - assert:
      that:
        - create_gateway_table is changed
        - create_gateway_table.route_table.id.startswith('rtb-')
        - "'Public' in create_gateway_table.route_table.tags"
        - create_gateway_table.route_table.tags['Public'] == 'true'
        - create_gateway_table.route_table.routes | length == 3
        - create_gateway_table.route_table.associations | length == 2
        - "{{ create_gateway_table.route_table.associations | map(attribute='association_state') | selectattr('state', '==', 'associated') | length == 1 }}"
        - create_gateway_table.route_table.vpc_id == vpc.vpc.id
        - create_gateway_table.route_table.propagating_vgws | length == 0

  - name: Associate vgw with route table (idempotence) - check_mode
    ec2_vpc_route_table:
      vpc_id: "{{ vpc.vpc.id }}"
      tags:
        Public: 'true'
        Name: Gateway route table
      gateway_id: "{{ vgw.vgw.id }}"
      purge_routes: no
    register: create_gateway_table
    check_mode: yes

  - assert:
      that:
        - create_gateway_table is not changed

  - name: Associate vgw with route table (idempotence)
    ec2_vpc_route_table:
      vpc_id: "{{ vpc.vpc.id }}"
      tags:
        Public: 'true'
        Name: Gateway route table
      gateway_id: "{{ vgw.vgw.id }}"
      purge_routes: no
    register: create_gateway_table

  - assert:
      that:
        - create_gateway_table is not changed
        - create_gateway_table.route_table.id.startswith('rtb-')
        - "'Public' in create_gateway_table.route_table.tags"
        - create_gateway_table.route_table.tags['Public'] == 'true'
        - create_gateway_table.route_table.routes | length == 3
        - create_gateway_table.route_table.associations | length == 2
        - "{{ create_gateway_table.route_table.associations | map(attribute='association_state') | selectattr('state', '==', 'associated') | length == 1 }}"
        - create_gateway_table.route_table.vpc_id == vpc.vpc.id
        - create_gateway_table.route_table.propagating_vgws | length == 0

  # ------------------------------------------------------------------------------------------

  - name: Get route table info
    ec2_vpc_route_table_info:
      filters:
        route-table-id: "{{ create_gateway_table.route_table.id }}"
    register: rt_info

  - name: Assert route table exists prior to deletion
    assert:
      that:
        - rt_info.route_tables | length == 1

  - name: Delete gateway route table - check_mode
    ec2_vpc_route_table:
      vpc_id: "{{ vpc.vpc.id }}"
      tags:
        Public: 'true'
        Name: Gateway route table
      state: absent
    register: delete_gateway_table
    check_mode: yes

  - assert:
      that:
        - delete_gateway_table is changed

  - name: Delete gateway route table
    ec2_vpc_route_table:
      vpc_id: "{{ vpc.vpc.id }}"
      tags:
        Public: 'true'
        Name: Gateway route table
      state: absent
    register: delete_gateway_table

  - name: Get route table info
    ec2_vpc_route_table_info:
      filters:
        route-table-id: "{{ create_gateway_table.route_table.id }}"
    register: rt_info

  - name: Assert route table was deleted
    assert:
      that:
        - delete_gateway_table is changed
        - rt_info.route_tables | length == 0

  - name: Delete gateway route table (idempotence) - check_mode
    ec2_vpc_route_table:
      vpc_id: "{{ vpc.vpc.id }}"
      tags:
        Public: 'true'
        Name: Gateway route table
      state: absent
    register: delete_gateway_table
    check_mode: yes

  - assert:
      that:
        - delete_gateway_table is not changed

  - name: Delete gateway route table (idempotence)
    ec2_vpc_route_table:
      vpc_id: "{{ vpc.vpc.id }}"
      tags:
        Public: 'true'
        Name: Gateway route table
      state: absent
    register: delete_gateway_table

  - name: Get route table info
    ec2_vpc_route_table_info:
      filters:
        route-table-id: "{{ create_gateway_table.route_table.id }}"
    register: rt_info

  - name: Assert route table was deleted
    assert:
      that:
        - delete_gateway_table is not changed
        - rt_info.route_tables | length == 0

  always:
  #############################################################################
  # TEAR DOWN STARTS HERE
  #############################################################################
  - name: remove the VPC endpoint
    ec2_vpc_endpoint:
      state: absent
      vpc_endpoint_id: '{{ vpc_endpoint.result.vpc_endpoint_id }}'
    when: vpc_endpoint is defined
    ignore_errors: yes
  - name: destroy route tables
    ec2_vpc_route_table:
      route_table_id: '{{ item.route_table.id }}'
      lookup: id
      state: absent
    with_items:
    - '{{ create_public_table | default() }}'
    - '{{ create_private_table | default() }}'
    - '{{ create_gateway_table | default() }}'
    when: item and not item.failed
    ignore_errors: yes
  - name: destroy NAT GW
    ec2_vpc_nat_gateway:
      state: absent
      wait: yes
      release_eip: yes
      subnet_id: '{{ subnets.results[0].subnet.id }}'
      nat_gateway_id: '{{ nat_gateway.nat_gateway_id }}'
    ignore_errors: yes
  - name: destroy IGW
    ec2_vpc_igw:
      vpc_id: '{{ vpc.vpc.id }}'
      state: absent
    ignore_errors: yes
  - name: destroy VGW
    ec2_vpc_vgw:
      state: absent
      type: ipsec.1
      name: '{{ resource_prefix }}_vpc'
      vpc_id: "{{ vpc.vpc.id }}"
    ignore_errors: yes
  - name: destroy ENI
    ec2_eni:
      state: absent
      eni_id: '{{ eni.interface.id }}'
    ignore_errors: yes
  - name: destroy subnets
    ec2_vpc_subnet:
      cidr: '{{ item.cidr }}'
      vpc_id: '{{ vpc.vpc.id }}'
      state: absent
    with_items:
    - cidr: 10.228.224.0/24
    - cidr: 10.228.225.0/24
    - cidr: 10.228.226.0/24
    - cidr: 10.228.227.0/24
    - cidr: 10.228.228.0/24
    - cidr: 10.228.229.0/24
    - cidr: 10.228.230.0/24
    ignore_errors: yes
  - name: destroy VPC
    ec2_vpc_net:
      cidr_block: 10.228.224.0/21
      name: '{{ resource_prefix }}_vpc'
      state: absent
    ignore_errors: yes

---
- name: ec2_vpc_route_table integration tests
  module_defaults:
    group/aws:
      access_key: "{{ aws_access_key }}"
      secret_key: "{{ aws_secret_key }}"
      session_token: "{{ security_token | default(omit) }}"
      region: "{{ aws_region }}"
  block:
    - name: Create VPC
      amazon.aws.ec2_vpc_net:
        cidr_block: "{{ vpc_cidr }}"
        name: "{{ resource_prefix }}_vpc"
        state: present
      register: vpc

    - name: Assert that VPC has an id
      ansible.builtin.assert:
        that:
          - vpc.vpc.id is defined
          - vpc.changed

    - name: Assign IPv6 CIDR block to existing VPC, check mode
      amazon.aws.ec2_vpc_net:
        cidr_block: "{{ vpc_cidr }}"
        name: "{{ resource_prefix }}_vpc"
        ipv6_cidr: true
      check_mode: true
      register: vpc_update

    - name: Assert that VPC would changed
      ansible.builtin.assert:
        that:
          - vpc_update.changed

    - name: Assign Amazon-provided IPv6 CIDR block to existing VPC
      amazon.aws.ec2_vpc_net:
        cidr_block: "{{ vpc_cidr }}"
        name: "{{ resource_prefix }}_vpc"
        ipv6_cidr: true
      register: vpc_update

    - name: Assert that VPC was changed, IPv6 CIDR is configured
      ansible.builtin.assert:
        that:
          - vpc_update.vpc.id == vpc.vpc.id
          - vpc_update.changed
          - vpc_update.vpc.ipv6_cidr_block_association_set | length == 1

    - name: Fetch existing VPC info
      amazon.aws.ec2_vpc_net_info:
        filters:
          tag:Name: "{{ resource_prefix }}_vpc"
      register: vpc_info

    - name: Assert vpc net info after configuring IPv6 CIDR
      ansible.builtin.assert:
        that:
          - vpc_info.vpcs | length == 1
          - vpc_info.vpcs[0].id == vpc.vpc.id
          - vpc_info.vpcs[0].ipv6_cidr_block_association_set | length == 1
          - vpc_info.vpcs[0].ipv6_cidr_block_association_set[0].ipv6_cidr_block_state.state == "associated"

    - name: Get Amazon-provided IPv6 CIDR associated with the VPC
      ansible.builtin.set_fact:
      # Example value: 2600:1f1c:1b3:8f00::/56
        vpc_ipv6_cidr_block: "{{ vpc_info.vpcs[0].ipv6_cidr_block_association_set[0].ipv6_cidr_block }}"

    - name: Create subnets
      amazon.aws.ec2_vpc_subnet:
        cidr: "{{ item.cidr }}"
        az: "{{ item.zone }}"
        assign_instances_ipv6: "{{ item.assign_instances_ipv6 }}"
        ipv6_cidr: "{{ item.ipv6_cidr  }}"
        vpc_id: "{{ vpc.vpc.id }}"
        state: present
        tags:
          Public: "{{ item.public | string }}"
          Name: "{{ (item.public | bool) | ternary('public', 'private') }}-{{ item.zone }}"
      with_items:
        - cidr: 10.228.224.0/24
          zone: "{{ availability_zone_a }}"
          public: "True"
          assign_instances_ipv6: false
          ipv6_cidr:
        - cidr: 10.228.225.0/24
          zone: "{{ availability_zone_b }}"
          public: "True"
          assign_instances_ipv6: false
          ipv6_cidr:
        - cidr: 10.228.226.0/24
          zone: "{{ availability_zone_a }}"
          public: "False"
          assign_instances_ipv6: false
          ipv6_cidr:
        - cidr: 10.228.227.0/24
          zone: "{{ availability_zone_b }}"
          public: "False"
          assign_instances_ipv6: false
          ipv6_cidr:
        - cidr: 10.228.228.0/24
          zone: "{{ availability_zone_a }}"
          public: "False"
          assign_instances_ipv6: true
          # Carve first /64 subnet of the Amazon-provided CIDR for the VPC.
          ipv6_cidr: "{{ vpc_ipv6_cidr_block | ansible.utils.ipsubnet(64, 1) }}"
        - cidr: 10.228.229.0/24
          zone: "{{ availability_zone_a }}"
          public: "True"
          assign_instances_ipv6: true
          ipv6_cidr: "{{ vpc_ipv6_cidr_block | ansible.utils.ipsubnet(64, 2) }}"
        - cidr: 10.228.230.0/24
          zone: "{{ availability_zone_b }}"
          public: "False"
          assign_instances_ipv6: true
          ipv6_cidr: "{{ vpc_ipv6_cidr_block | ansible.utils.ipsubnet(64, 3) }}"
      register: subnets

    - name: Get subnet info
      amazon.aws.ec2_vpc_subnet_info:
        filters:
          vpc-id: "{{ vpc.vpc.id }}"
      register: vpc_subnets

    - name: Set subnet facts
      ansible.builtin.set_fact:
        public_subnets: "{{ (vpc_subnets.subnets | selectattr('tags.Public', 'equalto', 'True') | map(attribute='id') | list) }}"
        public_cidrs: "{{ (vpc_subnets.subnets | selectattr('tags.Public', 'equalto', 'True') | map(attribute='cidr_block') | list) }}"
        private_subnets: "{{ (vpc_subnets.subnets | selectattr('tags.Public', 'equalto', 'False') | map(attribute='id') | list) }}"

    - name: Create IGW
      amazon.aws.ec2_vpc_igw:
        vpc_id: "{{ vpc.vpc.id }}"
      register: vpc_igw

    - name: Create NAT GW
      amazon.aws.ec2_vpc_nat_gateway:
        if_exist_do_not_create: true
        wait: true
        subnet_id: "{{ subnets.results[0].subnet.id }}"
      register: nat_gateway

    - name: Create  transit gateway
      amazon.aws.ec2_transit_gateway:
        state: present
        description: "Ansible TGW"
        asn: 4200000000
        wait: true
        tags:
            "team": "cloud"
      register: transit_gateway

    - name: Create VPC attachment
      amazon.aws.ec2_transit_gateway_vpc_attachment:
        state: present
        name: "{{ resource_prefix }}_vpc_attachment"
        transit_gateway: "{{ transit_gateway.transit_gateway.transit_gateway_id }}"
        subnets: "{{ public_subnets[0] }}"
        tags:
          "team": "cloud"
        wait: true
        purge_subnets: False
      register: vpc_attachment

    - name: CHECK MODE - route table should be created
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Public: "true"
          Name: Public route table
      check_mode: true
      register: check_mode_results

    - name: Assert that the public route table would be created
      ansible.builtin.assert:
        that:
          - check_mode_results.changed

    - name: Create public route table
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Public: "true"
          Name: Public route table
      register: create_public_table

    - name: Assert that public route table has an id
      ansible.builtin.assert:
        that:
          - create_public_table.changed
          - "'ec2:CreateTags' not in create_public_table.resource_actions"
          - "'ec2:DeleteTags' not in create_public_table.resource_actions"
          - create_public_table.route_table.id.startswith('rtb-')
          - "'Public' in create_public_table.route_table.tags"
          - create_public_table.route_table.tags['Public'] == 'true'
          - create_public_table.route_table.associations | length == 0
          - create_public_table.route_table.vpc_id == vpc.vpc.id
          - create_public_table.route_table.propagating_vgws | length == 0
          # One route for IPv4, one route for IPv6
          - create_public_table.route_table.routes | length == 2

    - name: CHECK MODE - route table should already exist
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Public: "true"
          Name: Public route table
      check_mode: true
      register: check_mode_results

    - name: Assert the table already exists
      ansible.builtin.assert:
        that:
          - not check_mode_results.changed

    - name: Recreate public route table
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Public: "true"
          Name: Public route table
      register: recreate_public_route_table

    - name: Assert that public route table did not change
      ansible.builtin.assert:
        that:
          - not recreate_public_route_table.changed
          - create_public_table.route_table.id.startswith('rtb-')
          - "'Public' in create_public_table.route_table.tags"
          - create_public_table.route_table.tags['Public'] == 'true'
          - create_public_table.route_table.associations | length == 0
          - create_public_table.route_table.vpc_id == vpc.vpc.id
          - create_public_table.route_table.propagating_vgws | length == 0
          - create_public_table.route_table.routes | length == 2

    - name: CHECK MODE - add route to public route table
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Public: "true"
          Name: Public route table
        routes:
          - dest: "0.0.0.0/0"
            gateway_id: igw
          - dest: ::/0
            gateway_id: igw
          - dest: "0.0.0.0/8"
            gateway_id: "{{ transit_gateway.transit_gateway.transit_gateway_id }}"
      check_mode: true
      register: check_mode_results

    - name: Assert a route would be added
      ansible.builtin.assert:
        that:
          - check_mode_results.changed

    - name: Add a route to public route table
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Public: "true"
          Name: Public route table
        routes:
          - dest: "0.0.0.0/0"
            gateway_id: igw
          - dest: ::/0
            gateway_id: igw
          - dest: "0.0.0.0/8"
            gateway_id: "{{ transit_gateway.transit_gateway.transit_gateway_id }}"
      register: add_routes

    - name: Assert route table contains new route
      ansible.builtin.assert:
        that:
          - add_routes.changed
          - add_routes.route_table.id.startswith('rtb-')
          - "'Public' in add_routes.route_table.tags"
          - add_routes.route_table.tags['Public'] == 'true'
          # 10.228.224.0/21
          # 0.0.0.0/0
          # ::/0
          # Amazon-provide IPv6 block
          - add_routes.route_table.routes | length == 5
          - add_routes.route_table.associations | length == 0
          - add_routes.route_table.vpc_id == vpc.vpc.id
          - add_routes.route_table.propagating_vgws | length == 0

    - name: CHECK MODE - re-add route to public route table
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Public: "true"
          Name: Public route table
        purge_routes: false
        routes:
          - dest: "0.0.0.0/0"
            gateway_id: igw
      check_mode: true
      register: check_mode_results

    - name: Assert a route would not be added
      ansible.builtin.assert:
        that:
          - check_mode_results is not changed

    - name: Re-add a route to public route table
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Public: "true"
          Name: Public route table
        purge_routes: false
        routes:
          - dest: "0.0.0.0/0"
            gateway_id: igw
      register: add_routes

    - name: Assert route table contains route
      ansible.builtin.assert:
        that:
          - add_routes is not changed
          - add_routes.route_table.routes | length == 5

    - name: CHECK MODE - add subnets to public route table
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Public: "true"
          Name: Public route table
        routes:
          - dest: "0.0.0.0/0"
            gateway_id: igw
        subnets: "{{ public_subnets }}"
      check_mode: true
      register: check_mode_results

    - name: Assert the subnets would be added to the route table
      ansible.builtin.assert:
        that:
          - check_mode_results.changed

    - name: Add subnets to public route table
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Public: "true"
          Name: Public route table
        routes:
          - dest: "0.0.0.0/0"
            gateway_id: igw
        subnets: "{{ public_subnets }}"
      register: add_subnets

    - name: Assert route table contains subnets
      ansible.builtin.assert:
        that:
          - add_subnets.changed
          - add_subnets.route_table.associations | length == 3

    - name: CHECK MODE - no routes but purge_routes set to false
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Public: "true"
          Name: Public route table
        purge_routes: false
        subnets: "{{ public_subnets }}"
      check_mode: true
      register: check_mode_results

    - name: Assert no routes would be removed
      ansible.builtin.assert:
        that:
          - not check_mode_results.changed

    - name: rerun with purge_routes set to false
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Public: "true"
          Name: Public route table
        purge_routes: false
        subnets: "{{ public_subnets }}"
      register: no_purge_routes

    - name: Assert route table still has routes
      ansible.builtin.assert:
        that:
          - not no_purge_routes.changed
          - no_purge_routes.route_table.routes | length == 4
          - no_purge_routes.route_table.associations | length == 3

    - name: rerun with purge_subnets set to false
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Public: "true"
          Name: Public route table
        purge_subnets: false
        routes:
          - dest: "0.0.0.0/0"
            gateway_id: igw
      register: no_purge_subnets

    - name: Assert route table still has subnets
      ansible.builtin.assert:
        that:
          - not no_purge_subnets.changed
          - no_purge_subnets.route_table.routes | length == 4
          - no_purge_subnets.route_table.associations | length == 3

    - name: rerun with purge_tags not set (implicitly false)
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        routes:
          - dest: "0.0.0.0/0"
            gateway_id: igw
        lookup: id
        route_table_id: "{{ create_public_table.route_table.id }}"
        subnets: "{{ public_subnets }}"
      register: no_purge_tags
    - name: Assert route table still has tags
      ansible.builtin.assert:
        that:
          - not no_purge_tags.changed
          - "'Public' in no_purge_tags.route_table.tags"
          - no_purge_tags.route_table.tags['Public'] == 'true'

    - name: CHECK MODE - purge subnets
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        routes:
          - dest: "0.0.0.0/0"
            gateway_id: igw
        subnets: []
        tags:
          Public: "true"
          Name: Public route table
      check_mode: true
      register: check_mode_results
    - name: Assert subnets would be removed
      ansible.builtin.assert:
        that:
          - check_mode_results.changed

    - name: Purge subnets
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        routes:
          - dest: "0.0.0.0/0"
            gateway_id: igw
        subnets: []
        tags:
          Public: "true"
          Name: Public route table
      register: purge_subnets
    - name: Assert purge subnets worked
      ansible.builtin.assert:
        that:
          - purge_subnets.changed
          - purge_subnets.route_table.associations | length == 0
          - purge_subnets.route_table.id == create_public_table.route_table.id

    - name: CHECK MODE - purge routes
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Public: "true"
          Name: Public route table
        routes: []
      check_mode: true
      register: check_mode_results
    - name: Assert routes would be removed
      ansible.builtin.assert:
        that:
          - check_mode_results.changed

    - name: add subnets by cidr to public route table
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        routes:
          - dest: "0.0.0.0/0"
            gateway_id: igw
        subnets: "{{ public_cidrs }}"
        lookup: id
        route_table_id: "{{ create_public_table.route_table.id }}"
      register: add_subnets_cidr
    - name: Assert route table contains subnets added by cidr
      ansible.builtin.assert:
        that:
          - add_subnets_cidr.changed
          - add_subnets_cidr.route_table.associations | length == 3

    - name: Purge subnets added by cidr
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        routes:
          - dest: "0.0.0.0/0"
            gateway_id: igw
        subnets: []
        lookup: id
        route_table_id: "{{ create_public_table.route_table.id }}"
      register: purge_subnets_cidr
    - name: Assert purge subnets added by cidr worked
      ansible.builtin.assert:
        that:
          - purge_subnets_cidr.changed
          - purge_subnets_cidr.route_table.associations | length == 0

    - name: add subnets by name to public route table
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        routes:
          - dest: "0.0.0.0/0"
            gateway_id: igw
        subnets: "{{ public_subnets }}"
        lookup: id
        route_table_id: "{{ create_public_table.route_table.id }}"
      register: add_subnets_name
    - name: Assert route table contains subnets added by name
      ansible.builtin.assert:
        that:
          - add_subnets_name.changed
          - add_subnets_name.route_table.associations | length == 3

    - name: Purge subnets added by name
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        routes:
          - dest: "0.0.0.0/0"
            gateway_id: igw
        subnets: []
        lookup: id
        route_table_id: "{{ create_public_table.route_table.id }}"
      register: purge_subnets_name
    - name: Assert purge subnets added by name worked
      ansible.builtin.assert:
        that:
          - purge_subnets_name.changed
          - purge_subnets_name.route_table.associations | length == 0

    - name: Purge routes
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Public: "true"
          Name: Public route table
        routes: []
      register: purge_routes
    - name: Assert purge routes worked
      ansible.builtin.assert:
        that:
          - purge_routes.changed
          - purge_routes.route_table.routes | length == 3
          - purge_routes.route_table.id == create_public_table.route_table.id

    - name: CHECK MODE - update tags
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        route_table_id: "{{ create_public_table.route_table.id }}"
        lookup: id
        purge_tags: true
        tags:
          Name: Public route table
          Updated: new_tag
      check_mode: true
      register: check_mode_results
    - name: Assert tags would be changed
      ansible.builtin.assert:
        that:
          - check_mode_results.changed

    - name: update tags
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        route_table_id: "{{ create_public_table.route_table.id }}"
        lookup: id
        purge_tags: true
        tags:
          Name: Public route table
          Updated: new_tag
      register: update_tags
    - name: Assert update tags worked
      ansible.builtin.assert:
        that:
          - update_tags.changed
          - "'Updated' in update_tags.route_table.tags"
          - update_tags.route_table.tags['Updated'] == 'new_tag'
          - "'Public' not in update_tags.route_table.tags"

    - name: Create NAT GW
      amazon.aws.ec2_vpc_nat_gateway:
        if_exist_do_not_create: true
        wait: true
        subnet_id: "{{ subnets.results[0].subnet.id }}"
      register: nat_gateway
    - name: CHECK MODE - create private route table
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Public: "false"
          Name: Private route table
        routes:
          - gateway_id: "{{ nat_gateway.nat_gateway_id }}"
            dest: "0.0.0.0/0"
        subnets: "{{ private_subnets }}"
      check_mode: true
      register: check_mode_results
    - name: Assert the route table would be created
      ansible.builtin.assert:
        that:
          - check_mode_results.changed

    - name: Create private route table
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Public: "false"
          Name: Private route table
        routes:
          - gateway_id: "{{ nat_gateway.nat_gateway_id }}"
            dest: "0.0.0.0/0"
        subnets: "{{ private_subnets }}"
      register: create_private_table
    - name: Assert creating private route table worked
      ansible.builtin.assert:
        that:
          - create_private_table.changed
          - create_private_table.route_table.id != create_public_table.route_table.id
          - "'Public' in create_private_table.route_table.tags"

    - name: CHECK MODE - Destroy public route table by tags
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        state: absent
        tags:
          Updated: new_tag
          Name: Public route table
      check_mode: true
      register: check_mode_results
    - name: Assert the route table would be deleted
      ansible.builtin.assert:
        that: check_mode_results.changed
    - name: Destroy public route table by tags
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        state: absent
        tags:
          Updated: new_tag
          Name: Public route table
      register: Destroy_table
    - name: Assert Destroy table worked
      ansible.builtin.assert:
        that:
          - Destroy_table.changed

    - name: CHECK MODE - redestroy public route table
      amazon.aws.ec2_vpc_route_table:
        route_table_id: "{{ create_public_table.route_table.id }}"
        lookup: id
        state: absent
      check_mode: true
      register: check_mode_results
    - name: Assert the public route table does not exist
      ansible.builtin.assert:
        that:
          - not check_mode_results.changed

    - name: redestroy public route table
      amazon.aws.ec2_vpc_route_table:
        route_table_id: "{{ create_public_table.route_table.id }}"
        lookup: id
        state: absent
      register: redestroy_table

    - name: Assert redestroy table worked
      ansible.builtin.assert:
        that:
          - not redestroy_table.changed

    - name: Destroy NAT GW
      amazon.aws.ec2_vpc_nat_gateway:
        state: absent
        wait: true
        release_eip: true
        subnet_id: "{{ subnets.results[0].subnet.id }}"
        nat_gateway_id: "{{ nat_gateway.nat_gateway_id }}"
      register: nat_gateway
    - name: show route table info, get table using route-table-id
      amazon.aws.ec2_vpc_route_table_info:
        filters:
          route-table-id: "{{ create_private_table.route_table.id }}"
      register: route_table_info
    - name: Assert route_table_info has correct attributes
      ansible.builtin.assert:
        that:
          - '"route_tables" in route_table_info'
          - route_table_info.route_tables | length == 1
          - '"id" in route_table_info.route_tables[0]'
          - '"routes" in route_table_info.route_tables[0]'
          - '"associations" in route_table_info.route_tables[0]'
          - '"tags" in route_table_info.route_tables[0]'
          - '"vpc_id" in route_table_info.route_tables[0]'
          - route_table_info.route_tables[0].id == create_private_table.route_table.id
          - '"propagating_vgws" in route_table_info.route_tables[0]'

    - name: show route table info, get table using tags
      amazon.aws.ec2_vpc_route_table_info:
        filters:
          tag:Public: "false"
          tag:Name: Private route table
          vpc-id: "{{ vpc.vpc.id }}"
      register: route_table_info
    - name: Assert route_table_info has correct tags
      ansible.builtin.assert:
        that:
          - route_table_info.route_tables | length == 1
          - '"tags" in route_table_info.route_tables[0]'
          - '"Public" in route_table_info.route_tables[0].tags'
          - route_table_info.route_tables[0].tags["Public"] == "false"
          - '"Name" in route_table_info.route_tables[0].tags'
          - route_table_info.route_tables[0].tags["Name"] == "Private route table"

    - name: Create NAT GW
      amazon.aws.ec2_vpc_nat_gateway:
        if_exist_do_not_create: true
        wait: true
        subnet_id: "{{ subnets.results[0].subnet.id }}"
      register: nat_gateway

    - name: Show route table info
      amazon.aws.ec2_vpc_route_table_info:
        filters:
          route-table-id: "{{ create_private_table.route_table.id }}"

    - name: Rereate private route table with new NAT GW
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Public: "false"
          Name: Private route table
        routes:
          - nat_gateway_id: "{{ nat_gateway.nat_gateway_id }}"
            dest: "0.0.0.0/0"
        subnets: "{{ private_subnets }}"
      register: recreate_private_table

    - name: Assert creating private route table worked
      ansible.builtin.assert:
        that:
          - recreate_private_table.changed
          - recreate_private_table.route_table.id != create_public_table.route_table.id

    - name: Create a VPC endpoint to test ec2_vpc_route_table ignores it
      amazon.aws.ec2_vpc_endpoint:
        state: present
        vpc_id: "{{ vpc.vpc.id }}"
        service: com.amazonaws.{{ aws_region }}.s3
        route_table_ids:
          - "{{ recreate_private_table.route_table.route_table_id }}"
        wait: true
      register: vpc_endpoint

    - name: Purge routes
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Public: "false"
          Name: Private route table
        routes:
          - nat_gateway_id: "{{ nat_gateway.nat_gateway_id }}"
            dest: "0.0.0.0/0"
        subnets: "{{ private_subnets }}"
        purge_routes: true
      register: result

    - name: Get endpoint infos to verify that it wasn't purged from the route table
      amazon.aws.ec2_vpc_endpoint_info:
        vpc_endpoint_ids:
          - "{{ vpc_endpoint.result.vpc_endpoint_id }}"
      register: endpoint_details

    - name: Assert the route table is associated with the VPC endpoint
      ansible.builtin.assert:
        that:
          - endpoint_details.vpc_endpoints[0].route_table_ids[0] == recreate_private_table.route_table.route_table_id

    # ------------------------------------------------------------------------------------------

    - name: Create gateway route table - check_mode
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Public: "true"
          Name: Gateway route table
        gateway_id: "{{ vpc_igw.gateway_id }}"
      register: create_gateway_table
      check_mode: true

    - name: Assert that there is change
      ansible.builtin.assert:
        that:
          - create_gateway_table is changed

    - name: Create gateway route table
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Public: "true"
          Name: Gateway route table
        gateway_id: "{{ vpc_igw.gateway_id }}"
      register: create_gateway_table

    - name: Assert that the gateway route table is created
      ansible.builtin.assert:
        that:
          - create_gateway_table is changed
          - create_gateway_table.route_table.id.startswith('rtb-')
          - "'Public' in create_gateway_table.route_table.tags"
          - create_gateway_table.route_table.tags['Public'] == 'true'
          - create_gateway_table.route_table.routes | length == 2
          - create_gateway_table.route_table.associations | length == 1
          - create_gateway_table.route_table.vpc_id == vpc.vpc.id
          - create_gateway_table.route_table.propagating_vgws | length == 0

    - name: Create gateway route table (idempotence) - check_mode
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Public: "true"
          Name: Gateway route table
        gateway_id: "{{ vpc_igw.gateway_id }}"
      register: create_gateway_table
      check_mode: true

    - name: Assert that there is no change
      ansible.builtin.assert:
        that:
          - create_gateway_table is not changed

    - name: Create gateway route table (idempotence)
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Public: "true"
          Name: Gateway route table
        gateway_id: "{{ vpc_igw.gateway_id }}"
      register: create_gateway_table

    - name: Assert that there is no change
      ansible.builtin.assert:
        that:
          - create_gateway_table is not changed
          - create_gateway_table.route_table.id.startswith('rtb-')
          - "'Public' in create_gateway_table.route_table.tags"
          - create_gateway_table.route_table.tags['Public'] == 'true'
          - create_gateway_table.route_table.routes | length == 2
          - create_gateway_table.route_table.associations | length == 1
          - create_gateway_table.route_table.vpc_id == vpc.vpc.id
          - create_gateway_table.route_table.propagating_vgws | length == 0

    # ------------------------------------------------------------------------------------------

    - name: Create ENI for gateway route table
      amazon.aws.ec2_eni:
        subnet_id: "{{ public_subnets[0] }}"
      register: eni

    - name: Replace route to gateway route table - check_mode
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Public: "true"
          Name: Gateway route table
        gateway_id: "{{ vpc_igw.gateway_id }}"
        routes:
          - dest: "{{ vpc_cidr }}"
            network_interface_id: "{{ eni.interface.id }}"
        purge_routes: false
      register: create_gateway_table
      check_mode: true

    - name: Assert that there is change
      ansible.builtin.assert:
        that:
          - create_gateway_table is changed

    - name: Replace route to gateway route table
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Public: "true"
          Name: Gateway route table
        gateway_id: "{{ vpc_igw.gateway_id }}"
        routes:
          - dest: "{{ vpc_cidr }}"
            network_interface_id: "{{ eni.interface.id }}"
        purge_routes: false
      register: create_gateway_table

    - name: Assert that the the route is replaced
      ansible.builtin.assert:
        that:
          - create_gateway_table is changed
          - create_gateway_table.route_table.id.startswith('rtb-')
          - "'Public' in create_gateway_table.route_table.tags"
          - create_gateway_table.route_table.tags['Public'] == 'true'
          - create_gateway_table.route_table.routes | length == 2
          - create_gateway_table.route_table.associations | length == 1
          - create_gateway_table.route_table.vpc_id == vpc.vpc.id
          - create_gateway_table.route_table.propagating_vgws | length == 0
          - create_gateway_table.route_table.routes[0].destination_cidr_block == vpc_cidr
          - create_gateway_table.route_table.routes[0].network_interface_id == eni.interface.id

    - name: Replace route to gateway route table (idempotence) - check_mode
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Public: "true"
          Name: Gateway route table
        gateway_id: "{{ vpc_igw.gateway_id }}"
        routes:
          - dest: "{{ vpc_cidr }}"
            network_interface_id: "{{ eni.interface.id }}"
        purge_routes: false
      register: create_gateway_table
      check_mode: true

    - name: Assert that there is no change
      ansible.builtin.assert:
        that:
          - create_gateway_table is not changed

    - name: Replace route to gateway route table (idempotence)
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Public: "true"
          Name: Gateway route table
        gateway_id: "{{ vpc_igw.gateway_id }}"
        routes:
          - dest: "{{ vpc_cidr }}"
            network_interface_id: "{{ eni.interface.id }}"
        purge_routes: false
      register: create_gateway_table

    - name: Assert that there is no change
      ansible.builtin.assert:
        that:
          - create_gateway_table is not changed
          - create_gateway_table.route_table.id.startswith('rtb-')
          - "'Public' in create_gateway_table.route_table.tags"
          - create_gateway_table.route_table.tags['Public'] == 'true'
          - create_gateway_table.route_table.routes | length == 2
          - create_gateway_table.route_table.associations | length == 1
          - create_gateway_table.route_table.vpc_id == vpc.vpc.id
          - create_gateway_table.route_table.propagating_vgws | length == 0
          - create_gateway_table.route_table.routes[0].destination_cidr_block == vpc_cidr
          - create_gateway_table.route_table.routes[0].network_interface_id == eni.interface.id

    # ------------------------------------------------------------------------------------------

    - name: Add route to gateway route table - check_mode
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Public: "true"
          Name: Gateway route table
        gateway_id: "{{ vpc_igw.gateway_id }}"
        routes:
          - dest: 10.228.228.0/24
            network_interface_id: "{{ eni.interface.id }}"
        purge_routes: false
      register: create_gateway_table
      check_mode: true

    - name: Assert that there is change
      ansible.builtin.assert:
        that:
          - create_gateway_table is changed

    - name: Add route to gateway route table
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Public: "true"
          Name: Gateway route table
        gateway_id: "{{ vpc_igw.gateway_id }}"
        routes:
          - dest: 10.228.228.0/24
            network_interface_id: "{{ eni.interface.id }}"
        purge_routes: false
      register: create_gateway_table

    - name: Assert that the route is added
      ansible.builtin.assert:
        that:
          - create_gateway_table is changed
          - create_gateway_table.route_table.id.startswith('rtb-')
          - "'Public' in create_gateway_table.route_table.tags"
          - create_gateway_table.route_table.tags['Public'] == 'true'
          - create_gateway_table.route_table.routes | length == 3
          - create_gateway_table.route_table.associations | length == 1
          - create_gateway_table.route_table.vpc_id == vpc.vpc.id
          - create_gateway_table.route_table.propagating_vgws | length == 0

    - name: Add route to gateway route table (idempotence) - check_mode
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Public: "true"
          Name: Gateway route table
        gateway_id: "{{ vpc_igw.gateway_id }}"
        routes:
          - dest: 10.228.228.0/24
            network_interface_id: "{{ eni.interface.id }}"
        purge_routes: false
      register: create_gateway_table
      check_mode: true

    - name: Assert that there is no change
      ansible.builtin.assert:
        that:
          - create_gateway_table is not changed

    - name: Add route to gateway route table (idempotence)
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Public: "true"
          Name: Gateway route table
        gateway_id: "{{ vpc_igw.gateway_id }}"
        routes:
          - dest: 10.228.228.0/24
            network_interface_id: "{{ eni.interface.id }}"
        purge_routes: false
      register: create_gateway_table

    - name: Assert that there is no change
      ansible.builtin.assert:
        that:
          - create_gateway_table is not changed
          - create_gateway_table.route_table.id.startswith('rtb-')
          - "'Public' in create_gateway_table.route_table.tags"
          - create_gateway_table.route_table.tags['Public'] == 'true'
          - create_gateway_table.route_table.routes | length == 3
          - create_gateway_table.route_table.associations | length == 1
          - create_gateway_table.route_table.vpc_id == vpc.vpc.id
          - create_gateway_table.route_table.propagating_vgws | length == 0

    # ------------------------------------------------------------------------------------------

    - name: Ensure gateway doesn't disassociate when not passed in - check_mode
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Public: "true"
          Name: Gateway route table
        routes:
          - dest: 10.228.228.0/24
            network_interface_id: "{{ eni.interface.id }}"
        purge_routes: false
      register: create_gateway_table
      check_mode: true

    - name: Assert that there is no change
      ansible.builtin.assert:
        that:
          - create_gateway_table is not changed

    - name: Ensure gateway doesn't disassociate when not passed in
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Public: "true"
          Name: Gateway route table
        routes:
          - dest: 10.228.228.0/24
            network_interface_id: "{{ eni.interface.id }}"
        purge_routes: false
      register: create_gateway_table

    - name: Assert that there is no change
      ansible.builtin.assert:
        that:
          - create_gateway_table is not changed
          - create_gateway_table.route_table.id.startswith('rtb-')
          - "'Public' in create_gateway_table.route_table.tags"
          - create_gateway_table.route_table.tags['Public'] == 'true'
          - create_gateway_table.route_table.routes | length == 3
          - create_gateway_table.route_table.associations | map(attribute='association_state') | selectattr('state', '==', 'associated') | length == 1
          - create_gateway_table.route_table.vpc_id == vpc.vpc.id
          - create_gateway_table.route_table.propagating_vgws | length == 0

    # ------------------------------------------------------------------------------------------

    - name: Disassociate gateway when gateway_id is 'None' - check_mode
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Public: "true"
          Name: Gateway route table
        gateway_id: None
        routes:
          - dest: 10.228.228.0/24
            network_interface_id: "{{ eni.interface.id }}"
        purge_routes: false
      register: create_gateway_table
      check_mode: true

    - name: Assert that there is change
      ansible.builtin.assert:
        that:
          - create_gateway_table is changed

    - name: Disassociate gateway when gateway_id is 'None'
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Public: "true"
          Name: Gateway route table
        gateway_id: None
        routes:
          - dest: 10.228.228.0/24
            network_interface_id: "{{ eni.interface.id }}"
        purge_routes: false
      register: create_gateway_table

    - name: Assert that the the disassociation is successful
      ansible.builtin.assert:
        that:
          - create_gateway_table is changed
          - create_gateway_table.route_table.id.startswith('rtb-')
          - "'Public' in create_gateway_table.route_table.tags"
          - create_gateway_table.route_table.tags['Public'] == 'true'
          - create_gateway_table.route_table.routes | length == 3
          - create_gateway_table.route_table.associations | map(attribute='association_state') | selectattr('state', '==', 'associated') | length == 0
          - create_gateway_table.route_table.vpc_id == vpc.vpc.id
          - create_gateway_table.route_table.propagating_vgws | length == 0

    - name: Disassociate gateway when gateway_id is 'None' (idempotence) - check_mode
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Public: "true"
          Name: Gateway route table
        gateway_id: None
        routes:
          - dest: 10.228.228.0/24
            network_interface_id: "{{ eni.interface.id }}"
        purge_routes: false
      register: create_gateway_table
      check_mode: true

    - name: Assert that there is no change
      ansible.builtin.assert:
        that:
          - create_gateway_table is not changed

    - name: Disassociate gateway when gateway_id is 'None' (idempotence)
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Public: "true"
          Name: Gateway route table
        gateway_id: None
        routes:
          - dest: 10.228.228.0/24
            network_interface_id: "{{ eni.interface.id }}"
        purge_routes: false
      register: create_gateway_table

    - name: Assert that there is no change
      ansible.builtin.assert:
        that:
          - create_gateway_table is not changed
          - create_gateway_table.route_table.id.startswith('rtb-')
          - "'Public' in create_gateway_table.route_table.tags"
          - create_gateway_table.route_table.tags['Public'] == 'true'
          - create_gateway_table.route_table.routes | length == 3
          - create_gateway_table.route_table.associations | map(attribute='association_state') | selectattr('state', '==', 'associated') | length == 0
          - create_gateway_table.route_table.vpc_id == vpc.vpc.id
          - create_gateway_table.route_table.propagating_vgws | length == 0

    # ------------------------------------------------------------------------------------------

    - name: Associate gateway with route table - check_mode
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Public: "true"
          Name: Gateway route table
        gateway_id: "{{ vpc_igw.gateway_id }}"
        purge_routes: false
      register: create_gateway_table
      check_mode: true

    - name: Assert that there is change
      ansible.builtin.assert:
        that:
          - create_gateway_table is changed

    - name: Associate gateway with route table
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Public: "true"
          Name: Gateway route table
        gateway_id: "{{ vpc_igw.gateway_id }}"
        purge_routes: false
      register: create_gateway_table

    - name: Assert that the association is successful
      ansible.builtin.assert:
        that:
          - create_gateway_table is changed
          - create_gateway_table.route_table.id.startswith('rtb-')
          - "'Public' in create_gateway_table.route_table.tags"
          - create_gateway_table.route_table.tags['Public'] == 'true'
          - create_gateway_table.route_table.routes | length == 3
          - create_gateway_table.route_table.associations | length == 1
          - create_gateway_table.route_table.associations | map(attribute='association_state') | selectattr('state', '==', 'associated') | length == 1
          - create_gateway_table.route_table.vpc_id == vpc.vpc.id
          - create_gateway_table.route_table.propagating_vgws | length == 0

    - name: Associate gateway with route table (idempotence) - check_mode
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Public: "true"
          Name: Gateway route table
        gateway_id: "{{ vpc_igw.gateway_id }}"
        purge_routes: false
      register: create_gateway_table
      check_mode: true

    - name: Assert that there is no change
      ansible.builtin.assert:
        that:
          - create_gateway_table is not changed

    - name: Associate gateway with route table (idempotence)
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Public: "true"
          Name: Gateway route table
        gateway_id: "{{ vpc_igw.gateway_id }}"
        purge_routes: false
      register: create_gateway_table

    - name: Assert that there is no change
      ansible.builtin.assert:
        that:
          - create_gateway_table is not changed
          - create_gateway_table.route_table.id.startswith('rtb-')
          - "'Public' in create_gateway_table.route_table.tags"
          - create_gateway_table.route_table.tags['Public'] == 'true'
          - create_gateway_table.route_table.routes | length == 3
          - create_gateway_table.route_table.associations | length == 1
          - create_gateway_table.route_table.associations | map(attribute='association_state') | selectattr('state', '==', 'associated') | length == 1
          - create_gateway_table.route_table.vpc_id == vpc.vpc.id
          - create_gateway_table.route_table.propagating_vgws | length == 0

    # ------------------------------------------------------------------------------------------

    - name: Disassociate gateway when gateway_id is '' - check_mode
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Public: "true"
          Name: Gateway route table
        gateway_id: ""
        routes:
          - dest: 10.228.228.0/24
            network_interface_id: "{{ eni.interface.id }}"
        purge_routes: false
      register: create_gateway_table
      check_mode: true

    - name: Assert that there is change
      ansible.builtin.assert:
        that:
          - create_gateway_table is changed

    - name: Disassociate gateway when gateway_id is ''
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Public: "true"
          Name: Gateway route table
        gateway_id: ""
        routes:
          - dest: 10.228.228.0/24
            network_interface_id: "{{ eni.interface.id }}"
        purge_routes: false
      register: create_gateway_table

    - name: Assert that the disassociation is successful
      ansible.builtin.assert:
        that:
          - create_gateway_table is changed
          - create_gateway_table.route_table.id.startswith('rtb-')
          - "'Public' in create_gateway_table.route_table.tags"
          - create_gateway_table.route_table.tags['Public'] == 'true'
          - create_gateway_table.route_table.routes | length == 3
          - create_gateway_table.route_table.associations | map(attribute='association_state') | selectattr('state', '==', 'associated') | length == 0
          - create_gateway_table.route_table.vpc_id == vpc.vpc.id
          - create_gateway_table.route_table.propagating_vgws | length == 0

    - name: Disassociate gateway when gateway_id is '' (idempotence) - check_mode
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Public: "true"
          Name: Gateway route table
        gateway_id: ""
        routes:
          - dest: 10.228.228.0/24
            network_interface_id: "{{ eni.interface.id }}"
        purge_routes: false
      register: create_gateway_table
      check_mode: true

    - name: Assert that there is no change
      ansible.builtin.assert:
        that:
          - create_gateway_table is not changed

    - name: Disassociate gateway when gateway_id is '' (idempotence)
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Public: "true"
          Name: Gateway route table
        gateway_id: ""
        routes:
          - dest: 10.228.228.0/24
            network_interface_id: "{{ eni.interface.id }}"
        purge_routes: false
      register: create_gateway_table

    - name: Assert that there is no change
      ansible.builtin.assert:
        that:
          - create_gateway_table is not changed
          - create_gateway_table.route_table.id.startswith('rtb-')
          - "'Public' in create_gateway_table.route_table.tags"
          - create_gateway_table.route_table.tags['Public'] == 'true'
          - create_gateway_table.route_table.routes | length == 3
          - create_gateway_table.route_table.associations | map(attribute='association_state') | selectattr('state', '==', 'associated') | length == 0
          - create_gateway_table.route_table.vpc_id == vpc.vpc.id
          - create_gateway_table.route_table.propagating_vgws | length == 0

    # ------------------------------------------------------------------------------------------

    - name: Create vgw for gateway route table
      amazon.aws.ec2_vpc_vgw:
        state: present
        vpc_id: "{{ vpc.vpc.id }}"
        type: ipsec.1
        name: "{{ resource_prefix }}_vpc"
      register: vgw

    - name: Associate vgw with route table - check_mode
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Public: "true"
          Name: Gateway route table
        gateway_id: "{{ vgw.vgw.id }}"
        purge_routes: false
      register: create_gateway_table
      check_mode: true

    - name: Assert that there is change
      ansible.builtin.assert:
        that:
          - create_gateway_table is changed

    - name: Associate vgw with route table
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Public: "true"
          Name: Gateway route table
        gateway_id: "{{ vgw.vgw.id }}"
        purge_routes: false
      register: create_gateway_table

    - name: Assert that the association is successful
      ansible.builtin.assert:
        that:
          - create_gateway_table is changed
          - create_gateway_table.route_table.id.startswith('rtb-')
          - "'Public' in create_gateway_table.route_table.tags"
          - create_gateway_table.route_table.tags['Public'] == 'true'
          - create_gateway_table.route_table.routes | length == 3
          - create_gateway_table.route_table.associations | length == 2
          - create_gateway_table.route_table.associations | map(attribute='association_state') | selectattr('state', '==', 'associated') | length == 1
          - create_gateway_table.route_table.vpc_id == vpc.vpc.id
          - create_gateway_table.route_table.propagating_vgws | length == 0

    - name: Associate vgw with route table (idempotence) - check_mode
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Public: "true"
          Name: Gateway route table
        gateway_id: "{{ vgw.vgw.id }}"
        purge_routes: false
      register: create_gateway_table
      check_mode: true

    - name: Assert that there is no change
      ansible.builtin.assert:
        that:
          - create_gateway_table is not changed

    - name: Associate vgw with route table (idempotence)
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Public: "true"
          Name: Gateway route table
        gateway_id: "{{ vgw.vgw.id }}"
        purge_routes: false
      register: create_gateway_table
 
    - name: Assert that there is no change
      ansible.builtin.assert:
        that:
          - create_gateway_table is not changed
          - create_gateway_table.route_table.id.startswith('rtb-')
          - "'Public' in create_gateway_table.route_table.tags"
          - create_gateway_table.route_table.tags['Public'] == 'true'
          - create_gateway_table.route_table.routes | length == 3
          - create_gateway_table.route_table.associations | length == 2
          - create_gateway_table.route_table.associations | map(attribute='association_state') | selectattr('state', '==', 'associated') | length == 1
          - create_gateway_table.route_table.vpc_id == vpc.vpc.id
          - create_gateway_table.route_table.propagating_vgws | length == 0

    # ------------------------------------------------------------------------------------------

    - name: Get route table info
      amazon.aws.ec2_vpc_route_table_info:
        filters:
          route-table-id: "{{ create_gateway_table.route_table.id }}"
      register: rt_info

    - name: Assert route table exists prior to deletion
      ansible.builtin.assert:
        that:
          - rt_info.route_tables | length == 1

    - name: Delete gateway route table - check_mode
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Public: "true"
          Name: Gateway route table
        state: absent
      register: delete_gateway_table
      check_mode: true

    - name: Assert that there is change
      ansible.builtin.assert:
        that:
          - delete_gateway_table is changed

    - name: Delete gateway route table
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Public: "true"
          Name: Gateway route table
        state: absent
      register: delete_gateway_table

    - name: Get route table info
      amazon.aws.ec2_vpc_route_table_info:
        filters:
          route-table-id: "{{ create_gateway_table.route_table.id }}"
      register: rt_info

    - name: Assert route table was deleted
      ansible.builtin.assert:
        that:
          - delete_gateway_table is changed
          - rt_info.route_tables | length == 0

    - name: Delete gateway route table (idempotence) - check_mode
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Public: "true"
          Name: Gateway route table
        state: absent
      register: delete_gateway_table
      check_mode: true

    - name: Assert that there is no change
      ansible.builtin.assert:
        that:
          - delete_gateway_table is not changed

    - name: Delete gateway route table (idempotence)
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Public: "true"
          Name: Gateway route table
        state: absent
      register: delete_gateway_table

    - name: Get route table info
      amazon.aws.ec2_vpc_route_table_info:
        filters:
          route-table-id: "{{ create_gateway_table.route_table.id }}"
      register: rt_info

    - name: Assert route table was deleted
      ansible.builtin.assert:
        that:
          - delete_gateway_table is not changed
          - rt_info.route_tables | length == 0

  always:
  #############################################################################
  # TEAR DOWN STARTS HERE
  #############################################################################
    - name: Remove the VPC endpoint
      amazon.aws.ec2_vpc_endpoint:
        state: absent
        vpc_endpoint_id: "{{ vpc_endpoint.result.vpc_endpoint_id }}"
      when: vpc_endpoint is defined
      ignore_errors: true
    - name: Destroy route tables
      amazon.aws.ec2_vpc_route_table:
        route_table_id: "{{ item.route_table.id }}"
        lookup: id
        state: absent
      with_items:
        - "{{ create_public_table | default() }}"
        - "{{ create_private_table | default() }}"
        - "{{ create_gateway_table | default() }}"
      when: item and not item.failed
      ignore_errors: true
    - name: Destroy NAT GW
      amazon.aws.ec2_vpc_nat_gateway:
        state: absent
        wait: true
        release_eip: true
        subnet_id: "{{ subnets.results[0].subnet.id }}"
        nat_gateway_id: "{{ nat_gateway.nat_gateway_id }}"
      ignore_errors: true
    - name: Destroy IGW
      amazon.aws.ec2_vpc_igw:
        vpc_id: "{{ vpc.vpc.id }}"
        state: absent
      ignore_errors: true
    - name: Destroy VGW
      amazon.aws.ec2_vpc_vgw:
        state: absent
        type: ipsec.1
        name: "{{ resource_prefix }}_vpc"
        vpc_id: "{{ vpc.vpc.id }}"
      ignore_errors: true
    - name: Delete VPC attachment
      amazon.aws.ec2_transit_gateway_vpc_attachment:
        state: absent
        id: "{{ vpc_attachment.attachments[0].transit_gateway_attachment_id }}"
        wait: true
      ignore_errors: true
    - name: Delete transit gateway
      amazon.aws.ec2_transit_gateway:
        state: absent
        transit_gateway_id: '{{ transit_gateway.transit_gateway.transit_gateway_id }}'
        wait: true
      ignore_errors: true
    - name: Destroy ENI
      amazon.aws.ec2_eni:
        state: absent
        eni_id: "{{ eni.interface.id }}"
      ignore_errors: true
    - name: Destroy subnets
      amazon.aws.ec2_vpc_subnet:
        cidr: "{{ item.cidr }}"
        vpc_id: "{{ vpc.vpc.id }}"
        state: absent
      with_items:
        - cidr: 10.228.224.0/24
        - cidr: 10.228.225.0/24
        - cidr: 10.228.226.0/24
        - cidr: 10.228.227.0/24
        - cidr: 10.228.228.0/24
        - cidr: 10.228.229.0/24
        - cidr: 10.228.230.0/24
      ignore_errors: true
    - name: Destroy VPC
      amazon.aws.ec2_vpc_net:
        cidr_block: 10.228.224.0/21
        name: "{{ resource_prefix }}_vpc"
        state: absent
      ignore_errors: true

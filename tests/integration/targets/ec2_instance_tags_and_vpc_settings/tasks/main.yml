- module_defaults:
    group/aws:
      access_key: "{{ aws_access_key }}"
      secret_key: "{{ aws_secret_key }}"
      session_token: "{{ security_token | default(omit) }}"
      region: "{{ aws_region }}"
  block:
  - name: "Make instance in the testing subnet created in the test VPC"
    ec2_instance:
      state: present
      name: "{{ resource_prefix }}-test-basic-vpc-create"
      image_id: "{{ ec2_ami_id }}"
      user_data: |
        #cloud-config
        package_upgrade: true
        package_update: true
      tags:
        TestId: "{{ ec2_instance_tag_TestId }}"
        Something: else
      security_groups: "{{ sg.group_id }}"
      network:
        source_dest_check: false
      vpc_subnet_id: "{{ testing_subnet_b.subnet.id }}"
      instance_type: "{{ ec2_instance_type }}"
      wait: false
    register: in_test_vpc

  - name: "Make instance in the testing subnet created in the test VPC(check mode)"
    ec2_instance:
      state: present
      name: "{{ resource_prefix }}-test-basic-vpc-create-checkmode"
      image_id: "{{ ec2_ami_id }}"
      user_data: |
        #cloud-config
        package_upgrade: true
        package_update: true
      tags:
        TestId: "{{ ec2_instance_tag_TestId }}"
        Something: else
      security_groups: "{{ sg.group_id }}"
      network:
        source_dest_check: false
      vpc_subnet_id: "{{ testing_subnet_b.subnet.id }}"
      instance_type: "{{ ec2_instance_type }}"
    check_mode: yes

  - name: "Try to re-make the instance, hopefully this shows changed=False"
    ec2_instance:
      state: present
      name: "{{ resource_prefix }}-test-basic-vpc-create"
      image_id: "{{ ec2_ami_id }}"
      user_data: |
        #cloud-config
        package_upgrade: true
        package_update: true
      tags:
        TestId: "{{ ec2_instance_tag_TestId }}"
        Something: else
      security_groups: "{{ sg.group_id }}"
      vpc_subnet_id: "{{ testing_subnet_b.subnet.id }}"
      instance_type: "{{ ec2_instance_type }}"
    register: remake_in_test_vpc
  - name: "Remaking the same instance resulted in no changes"
    assert:
      that: not remake_in_test_vpc.changed
  - name: "check that instance IDs match anyway"
    assert:
      that: 'remake_in_test_vpc.instance_ids[0] == in_test_vpc.instance_ids[0]'
  - name: "check that source_dest_check was set to false"
    assert:
      that: 'not remake_in_test_vpc.instances[0].source_dest_check'

  - name: "fact presented ec2 instance"
    ec2_instance_info:
      filters:
        "tag:Name": "{{ resource_prefix }}-test-basic-vpc-create"
    register: presented_instance_fact

  - name: "fact checkmode ec2 instance"
    ec2_instance_info:
      filters:
        "tag:Name": "{{ resource_prefix }}-test-basic-vpc-create-checkmode"
    register: checkmode_instance_fact

  - name: "Confirm whether the check mode is working normally."
    assert:
      that:
        - "{{ presented_instance_fact.instances | length }} > 0"
        - "{{ checkmode_instance_fact.instances | length }} == 0"

  - name: "Alter it by adding tags"
    ec2_instance:
      state: present
      name: "{{ resource_prefix }}-test-basic-vpc-create"
      image_id: "{{ ec2_ami_id }}"
      tags:
        TestId: "{{ ec2_instance_tag_TestId }}"
        Another: thing
      purge_tags: false
      security_groups: "{{ sg.group_id }}"
      vpc_subnet_id: "{{ testing_subnet_b.subnet.id }}"
      instance_type: "{{ ec2_instance_type }}"
    register: add_another_tag

  - ec2_instance_info:
      instance_ids: "{{ add_another_tag.instance_ids }}"
    register: check_tags
  - name: "Remaking the same instance resulted in no changes"
    assert:
      that:
        - check_tags.instances[0].tags.Another == 'thing'
        - check_tags.instances[0].tags.Something == 'else'

  - name: "Purge a tag"
    ec2_instance:
      state: present
      name: "{{ resource_prefix }}-test-basic-vpc-create"
      image_id: "{{ ec2_ami_id }}"
      tags:
        TestId: "{{ ec2_instance_tag_TestId }}"
        Another: thing
      security_groups: "{{ sg.group_id }}"
      vpc_subnet_id: "{{ testing_subnet_b.subnet.id }}"
      instance_type: "{{ ec2_instance_type }}"

  - ec2_instance_info:
      instance_ids: "{{ add_another_tag.instance_ids }}"
    register: check_tags

  - name: "Remaking the same instance resulted in no changes"
    assert:
      that:
        - "'Something' not in check_tags.instances[0].tags"

  - name: "check that subnet-default public IP rule was followed"
    assert:
      that:
        - check_tags.instances[0].public_dns_name == ""
        - check_tags.instances[0].private_ip_address.startswith(subnet_b_startswith)
        - check_tags.instances[0].subnet_id == testing_subnet_b.subnet.id
  - name: "check that tags were applied"
    assert:
      that:
        - check_tags.instances[0].tags.Name.startswith(resource_prefix)
        - "'{{ check_tags.instances[0].state.name }}' in  ['pending', 'running']"

  - name: "Try setting purge_tags to True without specifiying tags (should NOT purge tags)"
    ec2_instance:
      state: present
      name: "{{ resource_prefix }}-test-basic-vpc-create"
      image_id: "{{ ec2_ami_id }}"
      purge_tags: true
      security_groups: "{{ sg.group_id }}"
      vpc_subnet_id: "{{ testing_subnet_b.subnet.id }}"
      instance_type: "{{ ec2_instance_type }}"
    register: _purge_tags_without_tags

  - name: Assert tags were not purged
    assert:
      that:
        - _purge_tags_without_tags.instances[0].tags | length > 1

  - name: "Purge all tags (aside from Name)"
    ec2_instance:
      state: present
      name: "{{ resource_prefix }}-test-basic-vpc-create"
      image_id: "{{ ec2_ami_id }}"
      purge_tags: true
      tags: {}
      security_groups: "{{ sg.group_id }}"
      vpc_subnet_id: "{{ testing_subnet_b.subnet.id }}"
      instance_type: "{{ ec2_instance_type }}"
    register: _purge_tags

  - name: Assert tags were purged
    assert:
      that:
        - _purge_tags.instances[0].tags | length == 1
        - _purge_tags.instances[0].tags.Name.startswith(resource_prefix)

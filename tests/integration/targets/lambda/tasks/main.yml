- name: set connection information for AWS modules and run tests
  module_defaults:
    group/aws:
      access_key: '{{ aws_access_key }}'
      secret_key: '{{ aws_secret_key }}'
      session_token: '{{ security_token | default(omit) }}'
      region: '{{ aws_region }}'
  collections:
  - community.general
  block:
  # https://github.com/ansible/ansible/issues/77257
  - name: Set async_dir for HOME env
    ansible.builtin.set_fact:
      ansible_async_dir: "{{ lookup('env', 'HOME') }}/.ansible_async_{{ tiny_prefix }}/"
    when: (lookup('env', 'HOME'))
  # Preparation
  - name: create minimal lambda role
    iam_role:
      name: '{{ lambda_role_name }}'
      assume_role_policy_document: '{{ lookup("file", "minimal_trust_policy.json")
        }}'
      create_instance_profile: false
      managed_policies:
      - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
    register: iam_role
  - name: wait 10 seconds for role to become available
    pause:
      seconds: 10
    when: iam_role.changed
  - name: move lambda into place for archive module
    copy:
      src: mini_lambda.py
      dest: '{{ output_dir }}/mini_lambda.py'
      mode: preserve
  - name: bundle lambda into a zip
    register: zip_res
    archive:
      format: zip
      path: '{{ output_dir }}/mini_lambda.py'
      dest: '{{ output_dir }}/mini_lambda.zip'

  # Parameter tests
  - name: test with no parameters
    lambda:
    register: result
    ignore_errors: true
  - name: assert failure when called with no parameters
    assert:
      that:
      - result.failed
      - 'result.msg.startswith("missing required arguments: ")'
      - '"name" in result.msg'

  - name: test with no parameters except state absent
    lambda:
      state: absent
    register: result
    ignore_errors: true
  - name: assert failure when called with no parameters
    assert:
      that:
      - result.failed
      - 'result.msg.startswith("missing required arguments: name")'

  - name: test with no role or handler
    lambda:
      name: ansible-testing-fake-should-not-be-created
      runtime: '{{ lambda_python_runtime }}'
    register: result
    ignore_errors: true
  - name: assert failure when called with no parameters
    assert:
      that:
      - result.failed
      - 'result.msg.startswith("state is present but all of the following are missing:
        ")'
      - '"handler" in result.msg'
      - '"role" in result.msg'

  - name: test execute lambda with no function arn or name
    lambda_execute:
    register: result
    ignore_errors: true
  - name: assert failure when called with no parameters
    assert:
      that:
      - result.failed
      - "result.msg == 'one of the following is required: name, function_arn'"

  - name: test state=present with security group but no vpc
    lambda:
      name: '{{ lambda_function_name }}'
      runtime: '{{ lambda_python_runtime }}'
      role: '{{ lambda_role_name }}'
      zip_file: '{{ zip_res.dest }}'
      handler: '{{ omit }}'
      description: '{{ omit }}'
      vpc_subnet_ids: '{{ omit }}'
      vpc_security_group_ids: sg-FA6E
      environment_variables: '{{ omit }}'
      dead_letter_arn: '{{ omit }}'
    register: result
    ignore_errors: true
  - name: assert lambda fails with proper message
    assert:
      that:
      - result is failed
      - result.msg != "MODULE FAILURE"
      - result.changed == False
      - '"parameters are required together" in result.msg'

  - name: test state=present with incomplete layers
    lambda:
      name: '{{ lambda_function_name }}'
      runtime: '{{ lambda_python_runtime }}'
      role: '{{ lambda_role_name }}'
      handler: mini_lambda.handler
      zip_file: '{{ zip_res.dest }}'
      layers:
        - layer_name: test-layer
    check_mode: true
    register: result
    ignore_errors: true
  - name: assert lambda fails with proper message
    assert:
      that:
      - result is failed
      - result is not changed
      - '"parameters are required together: layer_name, version found in layers" in result.msg'

  - name: test state=present with incomplete layers
    lambda:
      name: '{{ lambda_function_name }}'
      runtime: '{{ lambda_python_runtime }}'
      role: '{{ lambda_role_name }}'
      handler: mini_lambda.handler
      zip_file: '{{ zip_res.dest }}'
      layers:
        - layer_version_arn: 'arn:aws:lambda:us-east-2:123456789012:layer:blank-java-lib:7'
          version: 9
    check_mode: true
    register: result
    ignore_errors: true
  - name: assert lambda fails with proper message
    assert:
      that:
      - result is failed
      - result is not changed
      - '"parameters are mutually exclusive: version|layer_version_arn found in layers" in result.msg'

  # Prepare minimal Lambda
  - name: test state=present - upload the lambda (check mode)
    lambda:
      name: '{{ lambda_function_name }}'
      runtime: '{{ lambda_python_runtime }}'
      handler: '{{ lambda_python_handler }}'
      role: '{{ lambda_role_name }}'
      zip_file: '{{ zip_res.dest }}'
      architecture: arm64
    register: result
    check_mode: yes
  - name: assert lambda upload succeeded
    assert:
      that:
      - result.changed

  - name: test state=present - upload the lambda
    lambda:
      name: '{{ lambda_function_name }}'
      runtime: '{{ lambda_python_runtime }}'
      handler: '{{ lambda_python_handler }}'
      role: '{{ lambda_role_name }}'
      zip_file: '{{ zip_res.dest }}'
      architecture: arm64
    register: result
  - name: assert lambda upload succeeded
    assert:
      that:
      - result.changed
      - result.configuration.tracing_config.mode == "PassThrough"
      - result.configuration.architectures == ['arm64']

  - name: Save Lambda ARN
    ansible.builtin.set_fact:
      lambda_function_arn: "{{ result['configuration']['function_arn'] }}"

  - include_tasks: tagging.yml

  # Test basic operation of Uploaded lambda
  - name: test lambda works (check mode)
    lambda_execute:
      name: '{{lambda_function_name}}'
      payload:
        name: Mr Ansible Tests
    register: result
    check_mode: yes
  - name: assert check mode works correctly
    assert:
      that:
      - result.changed
      - "'result' not in result"

  - name: test lambda works
    lambda_execute:
      name: '{{lambda_function_name}}'
      payload:
        name: Mr Ansible Tests
    register: result
  - name: assert lambda manages to respond as expected
    assert:
      that:
      - result is not failed
      - result.result.output.message == "hello Mr Ansible Tests"

  - name: test execute lambda with function arn
    lambda_execute:
      function_arn: "{{ lambda_function_arn }}"
      payload:
        name: Mr Ansible Tests
    register: result
  - name: assert lambda manages to respond as expected
    assert:
      that:
      - result is not failed
      - result.result.output.message == "hello Mr Ansible Tests"

  # Test updating Lambda
  - name: test lambda config updates (check mode)
    lambda:
      name: '{{lambda_function_name}}'
      runtime: nodejs14.x
      tracing_mode: Active
      handler: '{{ lambda_python_handler }}'
      role: '{{ lambda_role_name }}'
      tags:
        CamelCase: ACamelCaseValue
        snake_case: a_snake_case_value
        Spaced key: A value with spaces
    register: update_result
    check_mode: yes
  - name: assert that update succeeded
    assert:
      that:
      - update_result is not failed
      - update_result.changed == True

  - name: test lambda config updates
    lambda:
      name: '{{lambda_function_name}}'
      runtime: nodejs14.x
      tracing_mode: Active
      handler: '{{ lambda_python_handler }}'
      role: '{{ lambda_role_name }}'
      tags:
        CamelCase: ACamelCaseValue
        snake_case: a_snake_case_value
        Spaced key: A value with spaces
    register: update_result
  - name: assert that update succeeded
    assert:
      that:
      - update_result is not failed
      - update_result.changed == True
      - update_result.configuration.runtime == 'nodejs14.x'
      - update_result.configuration.tracing_config.mode == 'Active'

  - name: test no changes are made with the same parameters repeated (check mode)
    lambda:
      name: '{{lambda_function_name}}'
      runtime: nodejs14.x
      tracing_mode: Active
      handler: '{{ lambda_python_handler }}'
      role: '{{ lambda_role_name }}'
      tags:
        CamelCase: ACamelCaseValue
        snake_case: a_snake_case_value
        Spaced key: A value with spaces
    register: update_result
    check_mode: yes
  - name: assert that update succeeded
    assert:
      that:
      - update_result is not failed
      - update_result.changed == False

  - name: test no changes are made with the same parameters repeated
    lambda:
      name: '{{lambda_function_name}}'
      runtime: nodejs14.x
      tracing_mode: Active
      handler: '{{ lambda_python_handler }}'
      role: '{{ lambda_role_name }}'
      tags:
        CamelCase: ACamelCaseValue
        snake_case: a_snake_case_value
        Spaced key: A value with spaces
    register: update_result
  - name: assert that update succeeded
    assert:
      that:
      - update_result is not failed
      - update_result.changed == False
      - update_result.configuration.runtime == 'nodejs14.x'
      - update_result.configuration.tracing_config.mode == 'Active'

  - name: reset config updates for the following tests
    lambda:
      name: '{{lambda_function_name}}'
      runtime: '{{ lambda_python_runtime }}'
      tracing_mode: PassThrough
      handler: '{{ lambda_python_handler }}'
      role: '{{ lambda_role_name }}'
    register: result
  - name: assert that reset succeeded
    assert:
      that:
      - result is not failed
      - result.changed == True
      - result.configuration.runtime == lambda_python_runtime
      - result.configuration.tracing_config.mode == 'PassThrough'

  # Test lambda_info
  - name: lambda_info | Gather all infos for all lambda functions
    lambda_info:
      query: all
    register: lambda_infos_all
    check_mode: yes
  - name: lambda_info | Assert successfull retrieval of all information 1
    vars:
      lambda_info: "{{ lambda_infos_all.functions | selectattr('function_name', 'eq', lambda_function_name) | first }}"
    assert:
      that:
      - lambda_infos_all is not failed
      - lambda_infos_all.functions | length > 0
      - lambda_infos_all.functions | selectattr('function_name', 'eq', lambda_function_name) | length == 1
      - lambda_info.runtime == lambda_python_runtime
      - lambda_info.description == ""
      - lambda_info.function_arn is defined
      - lambda_info.handler == lambda_python_handler
      - lambda_info.versions is defined
      - lambda_info.aliases is defined
      - lambda_info.policy is defined
      - lambda_info.mappings is defined
      - lambda_info.tags is defined
      - lambda_info.architectures == ['arm64']

  - name: lambda_info | Ensure default query value is 'config' when function name
      omitted
    lambda_info:
    register: lambda_infos_query_config
    check_mode: yes
  - name: lambda_info | Assert successfull retrieval of all information 2
    vars:
      lambda_info: "{{ lambda_infos_query_config.functions | selectattr('function_name', 'eq', lambda_function_name) | first }}"
    assert:
      that:
      - lambda_infos_query_config is not failed
      - lambda_infos_query_config.functions | length > 0
      - lambda_infos_query_config.functions | selectattr('function_name', 'eq', lambda_function_name) | length == 1
      - lambda_info.runtime == lambda_python_runtime
      - lambda_info.description == ""
      - lambda_info.function_arn is defined
      - lambda_info.handler == lambda_python_handler
      - lambda_info.versions is not defined
      - lambda_info.aliases is not defined
      - lambda_info.policy is not defined
      - lambda_info.mappings is not defined
      - lambda_info.tags is not defined

  - name: lambda_info | Ensure default query value is 'all' when function name specified
    lambda_info:
      name: '{{ lambda_function_name }}'
    register: lambda_infos_query_all
  - name: lambda_info | Assert successfull retrieval of all information 3
    assert:
      that:
      - lambda_infos_query_all is not failed
      - lambda_infos_query_all.functions | length == 1
      - lambda_infos_query_all.functions[0].versions|length > 0
      - lambda_infos_query_all.functions[0].function_name is defined
      - lambda_infos_query_all.functions[0].policy is defined
      - lambda_infos_query_all.functions[0].aliases is defined
      - lambda_infos_query_all.functions[0].mappings is defined
      - lambda_infos_query_all.functions[0].tags is defined

  - name: lambda_info | Gather version infos for given lambda function
    lambda_info:
      name: '{{ lambda_function_name }}'
      query: versions
    register: lambda_infos_versions
  - name: lambda_info | Assert successfull retrieval of versions information
    assert:
      that:
      - lambda_infos_versions is not failed
      - lambda_infos_versions.functions | length == 1
      - lambda_infos_versions.functions[0].versions|length > 0
      - lambda_infos_versions.functions[0].function_name == lambda_function_name
      - lambda_infos_versions.functions[0].policy is undefined
      - lambda_infos_versions.functions[0].aliases is undefined
      - lambda_infos_versions.functions[0].mappings is undefined
      - lambda_infos_versions.functions[0].tags is undefined

  - name: lambda_info | Gather config infos for given lambda function
    lambda_info:
      name: '{{ lambda_function_name }}'
      query: config
    register: lambda_infos_config
  - name: lambda_info | Assert successfull retrieval of config information
    assert:
      that:
      - lambda_infos_config is not failed
      - lambda_infos_config.functions | length == 1
      - lambda_infos_config.functions[0].function_name == lambda_function_name
      - lambda_infos_config.functions[0].description is defined
      - lambda_infos_config.functions[0].versions is undefined
      - lambda_infos_config.functions[0].policy is undefined
      - lambda_infos_config.functions[0].aliases is undefined
      - lambda_infos_config.functions[0].mappings is undefined
      - lambda_infos_config.functions[0].tags is undefined

  - name: lambda_info | Gather policy infos for given lambda function
    lambda_info:
      name: '{{ lambda_function_name }}'
      query: policy
    register: lambda_infos_policy
  - name: lambda_info | Assert successfull retrieval of policy information
    assert:
      that:
      - lambda_infos_policy is not failed
      - lambda_infos_policy.functions | length == 1
      - lambda_infos_policy.functions[0].policy is defined
      - lambda_infos_policy.functions[0].versions is undefined
      - lambda_infos_policy.functions[0].function_name == lambda_function_name
      - lambda_infos_policy.functions[0].aliases is undefined
      - lambda_infos_policy.functions[0].mappings is undefined
      - lambda_infos_policy.functions[0].tags is undefined

  - name: lambda_info | Gather aliases infos for given lambda function
    lambda_info:
      name: '{{ lambda_function_name }}'
      query: aliases
    register: lambda_infos_aliases
  - name: lambda_info | Assert successfull retrieval of aliases information
    assert:
      that:
      - lambda_infos_aliases is not failed
      - lambda_infos_aliases.functions | length == 1
      - lambda_infos_aliases.functions[0].aliases is defined
      - lambda_infos_aliases.functions[0].versions is undefined
      - lambda_infos_aliases.functions[0].function_name == lambda_function_name
      - lambda_infos_aliases.functions[0].policy is undefined
      - lambda_infos_aliases.functions[0].mappings is undefined
      - lambda_infos_aliases.functions[0].tags is undefined

  - name: lambda_info | Gather mappings infos for given lambda function
    lambda_info:
      name: '{{ lambda_function_name }}'
      query: mappings
    register: lambda_infos_mappings
  - name: lambda_info | Assert successfull retrieval of mappings information
    assert:
      that:
      - lambda_infos_mappings is not failed
      - lambda_infos_mappings.functions | length == 1
      - lambda_infos_mappings.functions[0].mappings is defined
      - lambda_infos_mappings.functions[0].versions is undefined
      - lambda_infos_mappings.functions[0].function_name == lambda_function_name
      - lambda_infos_mappings.functions[0].aliases is undefined
      - lambda_infos_mappings.functions[0].policy is undefined
      - lambda_infos_mappings.functions[0].tags is undefined

  # 2023-06-27
  # An explicit "None" is no longer permitted by Ansible for parameters with a type other than "raw"
  # (None is still the implicit value for "not set")
  #
  # # More Lambda update tests
  # - name: test state=present with all nullable variables explicitly set to null
  #   lambda:
  #     name: '{{lambda_function_name}}'
  #     runtime: '{{ lambda_python_runtime }}'
  #     role: '{{ lambda_role_name }}'
  #     zip_file: '{{zip_res.dest}}'
  #     handler: '{{ lambda_python_handler }}'
  #     description:
  #     vpc_subnet_ids:
  #     vpc_security_group_ids:
  #     environment_variables:
  #     dead_letter_arn:
  #   register: result
  # - name: assert lambda remains as before
  #   assert:
  #     that:
  #     - result is not failed
  #     - result.changed == False

  - name: test putting an environment variable changes lambda (check mode)
    lambda:
      name: '{{lambda_function_name}}'
      runtime: '{{ lambda_python_runtime }}'
      handler: '{{ lambda_python_handler }}'
      role: '{{ lambda_role_name }}'
      zip_file: '{{zip_res.dest}}'
      environment_variables:
        EXTRA_MESSAGE: I think you are great!!
    register: result
    check_mode: yes
  - name: assert lambda upload succeeded
    assert:
      that:
      - result is not failed
      - result.changed == True

  - name: test putting an environment variable changes lambda
    lambda:
      name: '{{lambda_function_name}}'
      runtime: '{{ lambda_python_runtime }}'
      handler: '{{ lambda_python_handler }}'
      role: '{{ lambda_role_name }}'
      zip_file: '{{zip_res.dest}}'
      environment_variables:
        EXTRA_MESSAGE: I think you are great!!
    register: result
  - name: assert lambda upload succeeded
    assert:
      that:
      - result is not failed
      - result.changed == True
      - result.configuration.environment.variables.extra_message == "I think you are
        great!!"

  - name: test lambda works
    lambda_execute:
      name: '{{lambda_function_name}}'
      payload:
        name: Mr Ansible Tests
    register: result
  - name: assert lambda manages to respond as expected
    assert:
      that:
      - result is not failed
      - result.result.output.message == "hello Mr Ansible Tests. I think you are great!!"

  # Deletion behavious
  - name: test state=absent (expect changed=True) (check mode)
    lambda:
      name: '{{lambda_function_name}}'
      state: absent
    register: result
    check_mode: yes

  - name: assert state=absent
    assert:
      that:
      - result is not failed
      - result is changed

  - name: test state=absent (expect changed=True)
    lambda:
      name: '{{lambda_function_name}}'
      state: absent
    register: result

  - name: assert state=absent
    assert:
      that:
      - result is not failed
      - result is changed

  - name: test state=absent (expect changed=False) when already deleted (check mode)
    lambda:
      name: '{{lambda_function_name}}'
      state: absent
    register: result
    check_mode: yes

  - name: assert state=absent
    assert:
      that:
      - result is not failed
      - result is not changed

  - name: test state=absent (expect changed=False) when already deleted
    lambda:
      name: '{{lambda_function_name}}'
      state: absent
    register: result

  - name: assert state=absent
    assert:
      that:
      - result is not failed
      - result is not changed

  # Parallel creations and deletions
  - name: parallel lambda creation 1/4
    lambda:
      name: '{{lambda_function_name}}_1'
      runtime: '{{ lambda_python_runtime }}'
      handler: '{{ lambda_python_handler }}'
      role: '{{ lambda_role_name }}'
      zip_file: '{{zip_res.dest}}'
    async: 1000
    register: async_1
  - name: parallel lambda creation 2/4
    lambda:
      name: '{{lambda_function_name}}_2'
      runtime: '{{ lambda_python_runtime }}'
      handler: '{{ lambda_python_handler }}'
      role: '{{ lambda_role_name }}'
      zip_file: '{{zip_res.dest}}'
    async: 1000
    register: async_2
  - name: parallel lambda creation 3/4
    lambda:
      name: '{{lambda_function_name}}_3'
      runtime: '{{ lambda_python_runtime }}'
      handler: '{{ lambda_python_handler }}'
      role: '{{ lambda_role_name }}'
      zip_file: '{{zip_res.dest}}'
    async: 1000
    register: async_3
  - name: parallel lambda creation 4/4
    lambda:
      name: '{{lambda_function_name}}_4'
      runtime: '{{ lambda_python_runtime }}'
      handler: '{{ lambda_python_handler }}'
      role: '{{ lambda_role_name }}'
      zip_file: '{{zip_res.dest}}'
    register: result
  - name: assert lambda manages to respond as expected
    assert:
      that:
      - result is not failed
  - name: parallel lambda deletion 1/4
    lambda:
      name: '{{lambda_function_name}}_1'
      state: absent
      zip_file: '{{zip_res.dest}}'
    async: 1000
    register: async_1
  - name: parallel lambda deletion 2/4
    lambda:
      name: '{{lambda_function_name}}_2'
      state: absent
      zip_file: '{{zip_res.dest}}'
    async: 1000
    register: async_2
  - name: parallel lambda deletion 3/4
    lambda:
      name: '{{lambda_function_name}}_3'
      state: absent
      zip_file: '{{zip_res.dest}}'
    async: 1000
    register: async_3
  - name: parallel lambda deletion 4/4
    lambda:
      name: '{{lambda_function_name}}_4'
      state: absent
      zip_file: '{{zip_res.dest}}'
    register: result
  - name: assert lambda creation has succeeded
    assert:
      that:
      - result is not failed

  # Test creation with layers
  - name: Create temporary directory for testing
    tempfile:
      suffix: lambda
      state: directory
    register: test_dir

  - name: Create python directory for lambda layer
    file:
      path: "{{ remote_tmp_dir }}/python"
      state: directory

  - name: Create lambda layer library
    copy:
      content: |
        def hello():
          print("Hello from the ansible amazon.aws lambda layer")
          return 1
      dest: "{{ remote_tmp_dir }}/python/lambda_layer.py"

  - name: Create lambda layer archive
    archive:
      format: zip
      path: "{{ remote_tmp_dir }}"
      dest: "{{ remote_tmp_dir }}/lambda_layer.zip"

  - name: Create lambda layer
    lambda_layer:
      name: "{{ lambda_python_layers_names[0] }}"
      description: '{{ lambda_python_layers_names[0] }} lambda layer'
      content:
        zip_file: "{{ remote_tmp_dir }}/lambda_layer.zip"
    register: first_layer

  - name: Create another lambda layer
    lambda_layer:
      name: "{{ lambda_python_layers_names[1] }}"
      description: '{{ lambda_python_layers_names[1] }} lambda layer'
      content:
        zip_file: "{{ remote_tmp_dir }}/lambda_layer.zip"
    register: second_layer

  - name: Create lambda function with layers
    lambda:
      name: '{{ lambda_function_name_with_layer }}'
      runtime: '{{ lambda_python_runtime }}'
      handler: '{{ lambda_python_handler }}'
      role: '{{ lambda_role_name }}'
      zip_file: '{{ zip_res.dest }}'
      layers:
        - layer_version_arn: "{{ first_layer.layer_versions.0.layer_version_arn }}"
    register: result
  - name: Validate that lambda function was created with expected property
    assert:
      that:
        - result is changed
        - '"layers" in result.configuration'
        - result.configuration.layers | length == 1
        - result.configuration.layers.0.arn == first_layer.layer_versions.0.layer_version_arn

  - name: Create lambda function with layers once again (validate idempotency)
    lambda:
      name: '{{ lambda_function_name_with_layer }}'
      runtime: '{{ lambda_python_runtime }}'
      handler: '{{ lambda_python_handler }}'
      role: '{{ lambda_role_name }}'
      zip_file: '{{ zip_res.dest }}'
      layers:
        - layer_version_arn: "{{ first_layer.layer_versions.0.layer_version_arn }}"
    register: result
  - name: Validate that no change were made
    assert:
      that:
        - result is not changed

  - name: Create lambda function with mutiple layers
    lambda:
      name: '{{ lambda_function_name_with_multiple_layer }}'
      runtime: '{{ lambda_python_runtime }}'
      handler: '{{ lambda_python_handler }}'
      role: '{{ lambda_role_name }}'
      zip_file: '{{ zip_res.dest }}'
      layers:
        - layer_version_arn: "{{ first_layer.layer_versions.0.layer_version_arn }}"
        - layer_name: "{{ second_layer.layer_versions.0.layer_arn }}"
          version: "{{ second_layer.layer_versions.0.version }}"
    register: result
  - name: Validate that lambda function was created with expected property
    assert:
      that:
        - result is changed
        - '"layers" in result.configuration'
        - result.configuration.layers | length == 2
        - first_layer.layer_versions.0.layer_version_arn in lambda_layer_versions
        - second_layer.layer_versions.0.layer_version_arn in lambda_layer_versions
    vars:
      lambda_layer_versions: "{{ result.configuration.layers | map(attribute='arn') | list }}"

  - name: Create lambda function with mutiple layers and changing layers order (idempotency)
    lambda:
      name: '{{ lambda_function_name_with_multiple_layer }}'
      runtime: '{{ lambda_python_runtime }}'
      handler: '{{ lambda_python_handler }}'
      role: '{{ lambda_role_name }}'
      zip_file: '{{ zip_res.dest }}'
      layers:
        - layer_version_arn: "{{ second_layer.layer_versions.0.layer_version_arn }}"
        - layer_name: "{{ first_layer.layer_versions.0.layer_arn }}"
          version: "{{ first_layer.layer_versions.0.version }}"
    register: result
  - name: Validate that lambda function was created with expected property
    assert:
      that:
        - result is not changed

  always:

  - name: Delete lambda layers
    lambda_layer:
      name: "{{ item }}"
      version: -1
      state: absent
    ignore_errors: true
    with_items: "{{ lambda_python_layers_names }}"

  - name: ensure functions are absent at end of test
    lambda:
      name: '{{ item }}'
      state: absent
    ignore_errors: true
    with_items:
    - '{{ lambda_function_name }}'
    - '{{ lambda_function_name }}_1'
    - '{{ lambda_function_name }}_2'
    - '{{ lambda_function_name }}_3'
    - '{{ lambda_function_name }}_4'

  - name: ensure role has been removed at end of test
    iam_role:
      name: '{{ lambda_role_name }}'
      state: absent
    ignore_errors: true

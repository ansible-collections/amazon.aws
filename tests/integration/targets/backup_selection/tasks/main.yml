---
- module_defaults:
    group/aws:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      security_token: "{{ security_token | default(omit) }}"
      region: "{{ aws_region }}"

  block:
    - name: Create an IAM Role
      community.aws.iam_role:
        name: "{{ backup_iam_role_name }}"
        assume_role_policy_document: '{{ lookup("file", "backup-policy.json") }}'
        create_instance_profile: no
        description: "Ansible AWS Backup Role"
        managed_policy:
          - "arn:aws:iam::aws:policy/service-role/AWSBackupServiceRolePolicyForBackup"
        wait: true
      register: iam_role

    - name: Wait for the role to be created
      ansible.builtin.pause:
        seconds: 8

    - name: Create an AWS Backup vault for the plan to target
      amazon.aws.backup_vault:
        backup_vault_name: "{{ backup_vault_name }}"
      register: _result_create_backup_vault

    - name: Verify result
      ansible.builtin.assert:
        that:
          - _result_create_backup_vault.changed

    - name: Create an AWS Backup plan for the selection to target
      amazon.aws.backup_plan:
        backup_plan_name: "{{ backup_plan_name }}"
        rules:
          - rule_name: DailyBackups
            target_backup_vault_name: "{{ backup_vault_name }}"
            schedule_expression: "cron(0 5 ? * * *)"
            start_window_minutes: 60
            completion_window_minutes: 1440
        tags:
          environment: test
      register: _result_create_backup_plan

    - name: Set backup plan ID
      ansible.builtin.set_fact:
        backup_plan_id: "{{ _result_create_backup_plan.backup_plan_id }}"

    - name: Create an AWS Backup selection (check_mode)
      amazon.aws.backup_selection:
        selection_name: "{{ backup_selection_name }}"
        backup_plan_name: "{{ backup_plan_name }}"
        iam_role_arn: "{{ iam_role.iam_role.arn }}"
        list_of_tags:
          - condition_type: "STRINGEQUALS"
            condition_key: "backup"
            condition_value: "daily"
        conditions:
          string_like:
            - condition_key: "aws:ResourceTag/environment"
              condition_value: "prod*"
      check_mode: true
      register: _create_result_backup_selection

    - name: Verify result
      ansible.builtin.assert:
        that:
          - _create_result_backup_selection.changed

    - name: Create an AWS Backup selection
      amazon.aws.backup_selection:
        selection_name: "{{ backup_selection_name }}"
        backup_plan_name: "{{ backup_plan_name }}"
        iam_role_arn: "{{ iam_role.iam_role.arn }}"
        list_of_tags:
          - condition_type: "STRINGEQUALS"
            condition_key: "backup"
            condition_value: "daily"
        conditions:
          string_like:
            - condition_key: "aws:ResourceTag/environment"
              condition_value: "prod*"
      register: _create_result_backup_selection

    - name: Verify result
      ansible.builtin.assert:
        that:
          - _create_result_backup_selection.changed
          - "'backup_selection' in _create_result_backup_selection"
          - _create_result_backup_selection.backup_selection.iam_role_arn == iam_role.iam_role.arn
          - _create_result_backup_selection.backup_selection.selection_name == "{{ backup_selection_name }}"

    - name: Create an AWS Backup selection (idempotency)
      amazon.aws.backup_selection:
        selection_name: "{{ backup_selection_name }}"
        backup_plan_name: "{{ backup_plan_name }}"
        iam_role_arn: "{{ iam_role.iam_role.arn }}"
        list_of_tags:
          - condition_type: "STRINGEQUALS"
            condition_key: "backup"
            condition_value: "daily"
        conditions:
          string_like:
            - condition_key: "aws:ResourceTag/environment"
              condition_value: "prod*"
      register: _create_result_backup_selection

    - name: Verify result
      ansible.builtin.assert:
        that:
          - not _create_result_backup_selection.changed
          - "'backup_selection' in _create_result_backup_selection"
          - _create_result_backup_selection.backup_selection.iam_role_arn == iam_role.iam_role.arn
          - _create_result_backup_selection.backup_selection.selection_name == "{{ backup_selection_name }}"

    - name: Get detailed information about the AWS Backup selection
      amazon.aws.backup_selection_info:
        backup_plan_name: "{{ backup_plan_name }}"
        selection_names:
          - "{{ backup_selection_name }}"
      register: _result_backup_selection_info

    - name: Verify result
      ansible.builtin.assert:
        that:
          - _result_backup_selection_info.backup_selections | length == 1
          - _result_backup_selection_info.backup_selections[0].iam_role_arn == iam_role.iam_role.arn
          - _result_backup_selection_info.backup_selections[0].selection_name == "{{ backup_selection_name }}"
          - "'resources' in _result_backup_selection_info.backup_selections[0]"
          - "'not_resources' in _result_backup_selection_info.backup_selections[0]"
          - "'list_of_tags' in _result_backup_selection_info.backup_selections[0]"
          - "'conditions' in _result_backup_selection_info.backup_selections[0]"

    - name: Modify an AWS Backup selection (check_mode)
      amazon.aws.backup_selection:
        selection_name: "{{ backup_selection_name }}"
        backup_plan_name: "{{ backup_plan_name }}"
        iam_role_arn: "{{ iam_role.iam_role.arn }}"
        list_of_tags:
          - condition_type: "STRINGEQUALS"
            condition_key: "backup"
            condition_value: "weekly"
        conditions:
          string_not_equals:
            - condition_key: "aws:ResourceTag/environment"
              condition_value: "dev"
      check_mode: true
      register: _modify_result_backup_selection

    - name: Verify result
      ansible.builtin.assert:
        that:
          - _modify_result_backup_selection.changed

    - name: Modify an AWS Backup selection
      amazon.aws.backup_selection:
        selection_name: "{{ backup_selection_name }}"
        backup_plan_name: "{{ backup_plan_name }}"
        iam_role_arn: "{{ iam_role.iam_role.arn }}"
        list_of_tags:
          - condition_type: "STRINGEQUALS"
            condition_key: "backup"
            condition_value: "weekly"
        conditions:
          string_not_equals:
            - condition_key: "aws:ResourceTag/environment"
              condition_value: "dev"
      register: _modify_result_backup_selection

    - name: Verify result
      ansible.builtin.assert:
        that:
          - _modify_result_backup_selection.changed
          - "'backup_selection' in _modify_result_backup_selection"
          - _modify_result_backup_selection.backup_selection.iam_role_arn == iam_role.iam_role.arn
          - _modify_result_backup_selection.backup_selection.selection_name == "{{ backup_selection_name }}"

    - name: Modify an AWS Backup selection (idempotency)
      amazon.aws.backup_selection:
        selection_name: "{{ backup_selection_name }}"
        backup_plan_name: "{{ backup_plan_name }}"
        iam_role_arn: "{{ iam_role.iam_role.arn }}"
        list_of_tags:
          - condition_type: "STRINGEQUALS"
            condition_key: "backup"
            condition_value: "weekly"
        conditions:
          string_not_equals:
            - condition_key: "aws:ResourceTag/environment"
              condition_value: "dev"
      register: _modify_result_backup_selection

    - name: Verify result
      ansible.builtin.assert:
        that:
          - not _modify_result_backup_selection.changed
          - "'backup_selection' in _modify_result_backup_selection"
          - _modify_result_backup_selection.backup_selection.iam_role_arn == iam_role.iam_role.arn
          - _modify_result_backup_selection.backup_selection.selection_name == "{{ backup_selection_name }}"

    - name: List all AWS Backup selections
      amazon.aws.backup_selection_info:
        backup_plan_name: "{{ backup_plan_name }}"
      register: _result_backup_selection_list

    - name: Verify result
      ansible.builtin.assert:
        that:
          - "'backup_selections' in _result_backup_selection_list"
          - _result_backup_selection_list.backup_selections | length != 0

    - name: Delete AWS Backup selection (check_mode)
      amazon.aws.backup_selection:
        backup_selection_name: "{{ backup_selection_name }}"
        backup_plan_name: "{{ backup_plan_name }}"
        state: absent
      check_mode: true
      register: _delete_result_backup_selection

    - name: Verify result
      ansible.builtin.assert:
        that:
          - _delete_result_backup_selection.changed
          - "'backup_selection' in _delete_result_backup_selection"

    - name: Delete AWS Backup selection
      amazon.aws.backup_selection:
        backup_selection_name: "{{ backup_selection_name }}"
        backup_plan_name: "{{ backup_plan_name }}"
        state: absent
      register: _delete_result_backup_selection

    - name: Verify result
      ansible.builtin.assert:
        that:
          - _delete_result_backup_selection.changed
          - "'backup_selection' in _delete_result_backup_selection"

    - name: Delete AWS Backup selection (idempotency)
      amazon.aws.backup_selection:
        backup_selection_name: "{{ backup_selection_name }}"
        backup_plan_name: "{{ backup_plan_name }}"
        state: absent
      register: _delete_result_backup_selection

    - name: Verify result
      ansible.builtin.assert:
        that:
          - not _delete_result_backup_selection.changed
          - "'backup_selection' in _delete_result_backup_selection"

  always:
    - name: Delete AWS Backup selection created during this test
      amazon.aws.backup_selection:
        backup_selection_name: "{{ backup_selection_name }}"
        backup_plan_name: "{{ backup_plan_name }}"
        state: absent
      ignore_errors: true

    - name: Delete AWS Backup plan created during this test
      amazon.aws.backup_plan:
        backup_plan_name: "{{ backup_plan_name }}"
        state: absent
      ignore_errors: true

    - name: Delete AWS Backup vault created during this test
      amazon.aws.backup_vault:
        backup_vault_name: "{{ backup_vault_name }}"
        state: absent
      ignore_errors: true

    - name: Delete IAM role created during this test
      community.aws.iam_role:
        name: "{{ backup_iam_role_name }}"
        state: absent
      ignore_errors: true

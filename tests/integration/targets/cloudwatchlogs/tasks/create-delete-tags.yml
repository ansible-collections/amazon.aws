---
# Tests relating to create/delete and set tags on cloudwatchlogs_log_group

- name: Tests relating to setting tags on cloudwatchlogs_log_group
  vars:
    first_tags:
      Key with Spaces: Value with spaces
      CamelCaseKey: CamelCaseValue
      pascalCaseKey: pascalCaseValue
      snake_case_key: snake_case_value
    second_tags:
      New Key with Spaces: Value with spaces
      NewCamelCaseKey: CamelCaseValue
      newPascalCaseKey: pascalCaseValue
      new_snake_case_key: snake_case_value
    third_tags:
      Key with Spaces: Value with spaces
      CamelCaseKey: CamelCaseValue
      pascalCaseKey: pascalCaseValue
      snake_case_key: snake_case_value
      New Key with Spaces: Updated Value with spaces
    final_tags:
      Key with Spaces: Value with spaces
      CamelCaseKey: CamelCaseValue
      pascalCaseKey: pascalCaseValue
      snake_case_key: snake_case_value
      New Key with Spaces: Updated Value with spaces
      NewCamelCaseKey: CamelCaseValue
      newPascalCaseKey: pascalCaseValue
      new_snake_case_key: snake_case_value
  # Mandatory settings
  module_defaults:
    amazon.aws.cloudwatchlogs_log_group:
      state: present
      log_group_name: "{{ log_group_name }}"
    amazon.aws.cloudwatchlogs_log_group_info:
      log_group_name: "{{ log_group_name }}"
  block:
    - name: Create cloudwatch log group for integration test (check_mode)
      amazon.aws.cloudwatchlogs_log_group:
        state: present
        log_group_name: "{{ log_group_name }}"
        retention: 1
        tags:
          CamelCase: Value
          snake_case: value
      check_mode: true
      register: result

    - ansible.builtin.assert:
        that:
          - result is changed
          - '"log_groups" not in result'
          - '"logs:CreateLogGroup" not in result.resource_actions'

    - name: Create cloudwatch log group for integration test
      amazon.aws.cloudwatchlogs_log_group:
        state: present
        log_group_name: "{{ log_group_name }}"
        retention: 1
        tags:
          CamelCase: Value
          snake_case: value
      register: result

    - ansible.builtin.assert:
        that:
          - result is changed
          - '"log_groups" in result'
          - result.log_groups | length == 1
          - '"log_group_name" in log_group'
          - '"creation_time" in log_group'
          - '"retention_in_days" in log_group'
          - '"metric_filter_count" in log_group'
          - '"arn" in log_group'
          - '"stored_bytes" in log_group'
          # - '"kms_key_id" in log_group'
          # pre-4.0.0 upgrade compatibility
          - '"log_group_name" in result'
          - '"creation_time" in result'
          - '"retention_in_days" in result'
          - '"metric_filter_count" in result'
          - '"arn" in result'
          - '"stored_bytes" in result'
          # - '"kms_key_id" in result'
          - '"CamelCase" in log_group.tags'
          - '"snake_case" in log_group.tags'
      vars:
        log_group: "{{ result.log_groups[0] }}"

    - name: Create cloudwatch log group for integration test (check_mode - idempotent)
      amazon.aws.cloudwatchlogs_log_group:
        state: present
        log_group_name: "{{ log_group_name }}"
        retention: 1
      check_mode: true
      register: result

    - ansible.builtin.assert:
        that:
          - result is not changed
          - '"log_groups" in result'
          - result.log_groups | length == 1

    - name: Create cloudwatch log group for integration test (idempotent)
      amazon.aws.cloudwatchlogs_log_group:
        state: present
        log_group_name: "{{ log_group_name }}"
        retention: 1
      register: result

    - ansible.builtin.assert:
        that:
          - result is not changed
          - '"log_groups" in result'
          - result.log_groups | length == 1
      vars:
        log_group: "{{ result.log_groups[0] }}"

    - name: Describe all log groups
      amazon.aws.cloudwatchlogs_log_group_info: {}
      register: result

    - ansible.builtin.assert:
        that:
          - '"log_groups" in result'
          - result.log_groups | length >= 1

    - name: Describe log group
      amazon.aws.cloudwatchlogs_log_group_info:
        log_group_name: "{{ log_group_name }}"
      register: result

    - ansible.builtin.assert:
        that:
          - '"log_groups" in result'
          - result.log_groups | length == 1
          - '"log_group_name" in log_group'
          - '"creation_time" in log_group'
          - '"retention_in_days" in log_group'
          - '"metric_filter_count" in log_group'
          - '"arn" in log_group'
          - '"stored_bytes" in log_group'
          # - '"kms_key_id" in log_group'
          - '"tags" in log_group'
      vars:
        log_group: "{{ result.log_groups[0] }}"
    - name: Test adding tags to cloudwatchlogs_log_group (check_mode)
      amazon.aws.cloudwatchlogs_log_group:
        tags: "{{ first_tags }}"
        purge_tags: true
      check_mode: true
      register: update_result

    - name: Assert that update succeeded
      ansible.builtin.assert:
        that:
          - update_result is changed
          - '"logs:UntagLogGroup" not in update_result'
          - '"logs:TagLogGroup" not in update_result'

    - name: Test adding tags to cloudwatchlogs_log_group
      amazon.aws.cloudwatchlogs_log_group:
        tags: "{{ first_tags }}"
        purge_tags: true
      register: update_result
    - name: Assert that update succeeded
      ansible.builtin.assert:
        that:
          - update_result is changed
          - update_result.log_groups[0].tags == first_tags

    - name: Test adding tags to cloudwatchlogs_log_group - idempotency (check mode)
      amazon.aws.cloudwatchlogs_log_group:
        tags: "{{ first_tags }}"
        purge_tags: true
      check_mode: true
      register: update_result

    - name: Assert that update succeeded
      ansible.builtin.assert:
        that:
          - update_result is not changed
          - '"logs:UntagLogGroup" not in update_result'
          - '"logs:TagLogGroup" not in update_result'

    - name: Test adding tags to cloudwatchlogs_log_group - idempotency
      amazon.aws.cloudwatchlogs_log_group:
        tags: "{{ first_tags }}"
        purge_tags: true
      register: update_result
    - name: Assert that update succeeded
      ansible.builtin.assert:
        that:
          - update_result is not changed
          - update_result.log_groups[0].tags == first_tags

    ###

    - name: Test updating tags with purge on cloudwatchlogs_log_group (check mode)
      amazon.aws.cloudwatchlogs_log_group:
        tags: "{{ second_tags }}"
        purge_tags: true
      check_mode: true
      register: update_result

    - name: Assert that update succeeded
      ansible.builtin.assert:
        that:
          - update_result is changed
          - '"logs:UntagLogGroup" not in update_result'
          - '"logs:TagLogGroup" not in update_result'

    - name: Test updating tags with purge on cloudwatchlogs_log_group
      amazon.aws.cloudwatchlogs_log_group:
        tags: "{{ second_tags }}"
        purge_tags: true
      register: update_result
    - name: Assert that update succeeded
      ansible.builtin.assert:
        that:
          - update_result is changed
          - update_result.log_groups[0].tags == second_tags

    - name: Test updating tags with purge on cloudwatchlogs_log_group - idempotency (check mode)
      amazon.aws.cloudwatchlogs_log_group:
        tags: "{{ second_tags }}"
        purge_tags: true
      check_mode: true
      register: update_result

    - name: Assert that update succeeded
      ansible.builtin.assert:
        that:
          - update_result is not changed
          - '"logs:UntagLogGroup" not in update_result'
          - '"logs:TagLogGroup" not in update_result'

    - name: Test updating tags with purge on cloudwatchlogs_log_group - idempotency
      amazon.aws.cloudwatchlogs_log_group:
        tags: "{{ second_tags }}"
        purge_tags: true
      register: update_result
    - name: Assert that update succeeded
      ansible.builtin.assert:
        that:
          - update_result is not changed
          - update_result.log_groups[0].tags == second_tags

    ###

    - name: Test updating tags without purge on cloudwatchlogs_log_group (check mode)
      amazon.aws.cloudwatchlogs_log_group:
        tags: "{{ third_tags }}"
        purge_tags: false
      check_mode: true
      register: update_result

    - name: Assert that update succeeded
      ansible.builtin.assert:
        that:
          - update_result is changed
          - '"logs:UntagLogGroup" not in update_result'
          - '"logs:TagLogGroup" not in update_result'

    - name: Test updating tags without purge on cloudwatchlogs_log_group
      amazon.aws.cloudwatchlogs_log_group:
        tags: "{{ third_tags }}"
        purge_tags: false
      register: update_result
    - name: Assert that update succeeded
      ansible.builtin.assert:
        that:
          - update_result is changed
          - update_result.log_groups[0].tags == final_tags

    - name: Test updating tags without purge on cloudwatchlogs_log_group - idempotency (check mode)
      amazon.aws.cloudwatchlogs_log_group:
        tags: "{{ third_tags }}"
        purge_tags: false
      check_mode: true
      register: update_result

    - name: Assert that update succeeded
      ansible.builtin.assert:
        that:
          - update_result is not changed
          - '"logs:UntagLogGroup" not in update_result'
          - '"logs:TagLogGroup" not in update_result'

    - name: Test updating tags without purge on cloudwatchlogs_log_group - idempotency
      amazon.aws.cloudwatchlogs_log_group:
        tags: "{{ third_tags }}"
        purge_tags: false
      register: update_result
    - name: Assert that update succeeded
      ansible.builtin.assert:
        that:
          - update_result is not changed
          - update_result.log_groups[0].tags == final_tags

    ###

    - name: Test that cloudwatchlogs_log_group_info returns the tags
      amazon.aws.cloudwatchlogs_log_group_info:
      register: tag_info
    - name: Assert tags present
      ansible.builtin.assert:
        that:
          - tag_info.log_groups | length == 1
          - tag_info.log_groups[0].tags == final_tags

    ###

    - name: Test no tags param cloudwatchlogs_log_group (check mode)
      amazon.aws.cloudwatchlogs_log_group: {}
      check_mode: true
      register: update_result

    - name: Assert no change
      ansible.builtin.assert:
        that:
          - update_result is not changed
          - update_result.log_groups[0].tags == final_tags

    - name: Test no tags param cloudwatchlogs_log_group
      amazon.aws.cloudwatchlogs_log_group: {}
      register: update_result
    - name: Assert no change
      ansible.builtin.assert:
        that:
          - update_result is not changed
          - update_result.log_groups[0].tags == final_tags

    ###

    - name: Test removing tags from cloudwatchlogs_log_group (check mode)
      amazon.aws.cloudwatchlogs_log_group:
        tags: {}
        purge_tags: true
      check_mode: true
      register: update_result

    - name: Assert that update succeeded
      ansible.builtin.assert:
        that:
          - update_result is changed

    - name: Test removing tags from cloudwatchlogs_log_group
      amazon.aws.cloudwatchlogs_log_group:
        tags: {}
        purge_tags: true
      register: update_result
    - name: Assert that update succeeded
      ansible.builtin.assert:
        that:
          - update_result is changed
          - update_result.log_groups[0].tags == {}

    - name: Test removing tags from cloudwatchlogs_log_group - idempotency (check mode)
      amazon.aws.cloudwatchlogs_log_group:
        tags: {}
        purge_tags: true
      check_mode: true
      register: update_result
    - name: Assert that update succeeded
      ansible.builtin.assert:
        that:
          - update_result is not changed

    - name: Test removing tags from cloudwatchlogs_log_group - idempotency
      amazon.aws.cloudwatchlogs_log_group:
        tags: {}
        purge_tags: true
      register: update_result
    - name: Assert that update succeeded
      ansible.builtin.assert:
        that:
          - update_result is not changed
          - update_result.log_groups[0].tags == {}

    - name: Delete cloudwatch log group for integration test (check_mode)
      amazon.aws.cloudwatchlogs_log_group:
        state: absent
        log_group_name: "{{ log_group_name }}"
      check_mode: true
      register: result

    - ansible.builtin.assert:
        that:
          - result is changed
          - '"logs:DeleteLogGroup" not in result.resource_actions'

    - name: Delete cloudwatch log group for integration test
      amazon.aws.cloudwatchlogs_log_group:
        state: absent
        log_group_name: "{{ log_group_name }}"
      register: result

    - ansible.builtin.assert:
        that:
          - result is changed

    - name: Delete cloudwatch log group for integration test (check_mode - idempotent)
      amazon.aws.cloudwatchlogs_log_group:
        state: absent
        log_group_name: "{{ log_group_name }}"
      check_mode: true
      register: result

    - ansible.builtin.assert:
        that:
          - result is not changed
          - '"logs:DeleteLogGroup" not in result.resource_actions'

    - name: Delete cloudwatch log group for integration test (idempotent)
      amazon.aws.cloudwatchlogs_log_group:
        state: absent
        log_group_name: "{{ log_group_name }}"
      register: result

    - ansible.builtin.assert:
        that:
          - result is not changed

    - name: Describe missing log group
      amazon.aws.cloudwatchlogs_log_group_info:
        log_group_name: "{{ log_group_name }}"
      register: result

    - ansible.builtin.assert:
        that:
          - '"log_groups" in result'
          - result.log_groups | length == 0

  always:
    - name: Delete cloudwatch log group for integration test
      amazon.aws.cloudwatchlogs_log_group:
        state: absent
        log_group_name: "{{ log_group_name }}"
      ignore_errors: true

- block:
    # ============================================================
    #   PREPARATION
    #
    # Get some information about who we are before starting our tests
    # we'll need this as soon as we start working on the policies
  - name: get ARN of calling user
    aws_caller_info:
    register: aws_caller_info
  - name: create an IAM role that can do nothing
    iam_role:
      name: '{{ kms_key_alias }}'
      state: present
      assume_role_policy_document: '{"Version": "2012-10-17", "Statement": {"Action":
        "sts:AssumeRole", "Principal": {"Service": "ec2.amazonaws.com"}, "Effect":
        "Deny"} }'
    register: iam_role_result
  - name: create a key
    kms_key:
      alias: '{{ kms_key_alias }}'
      tags:
        Hello: World
      state: present
      enabled: yes
      enable_key_rotation: no
    register: key
  - name: assert that state is enabled
    assert:
      that:
      - key is changed
      - '"key_id" in key'
      - key.key_id | length >= 36
      - not key.key_id.startswith("arn:aws")
      - '"key_arn" in key'
      - key.key_arn.endswith(key.key_id)
      - key.key_arn.startswith("arn:aws")
      - key.key_state == "Enabled"
      - key.enabled == True
      - key.tags | length == 1
      - key.tags['Hello'] == 'World'
      - key.enable_key_rotation == false
      - key.key_usage == 'ENCRYPT_DECRYPT'
      - key.customer_master_key_spec == 'SYMMETRIC_DEFAULT'
      - key.grants | length == 0
      - key.key_policies | length == 1
      - key.key_policies[0].Id == 'key-default-1'
      - key.description == ''

    # ------------------------------------------------------------------------------------------

  - name: Add grant - check mode
    kms_key:
      alias: '{{ kms_key_alias }}'
      state: present
      purge_grants: yes
      grants:
      - name: test_grant
        grantee_principal: '{{ iam_role_result.iam_role.arn }}'
        retiring_principal: '{{ aws_caller_info.arn }}'
        constraints:
          encryption_context_equals:
            environment: test
            application: testapp
        operations:
        - Decrypt
        - RetireGrant
    register: key
    check_mode: yes
  - name: assert grant would have been added
    assert:
      that:
      - key.changed

    # Roles can take a little while to get ready, pause briefly to give it chance
  - wait_for:
      timeout: 20
  - name: Add grant
    kms_key:
      alias: '{{ kms_key_alias }}'
      state: present
      purge_grants: yes
      grants:
      - name: test_grant
        grantee_principal: '{{ iam_role_result.iam_role.arn }}'
        retiring_principal: '{{ aws_caller_info.arn }}'
        constraints:
          encryption_context_equals:
            environment: test
            application: testapp
        operations:
        - Decrypt
        - RetireGrant
    register: key
  - name: assert grant added
    assert:
      that:
      - key.changed
      - '"key_id" in key'
      - key.key_id | length >= 36
      - not key.key_id.startswith("arn:aws")
      - '"key_arn" in key'
      - key.key_arn.endswith(key.key_id)
      - key.key_arn.startswith("arn:aws")
      - key.key_state == "Enabled"
      - key.enabled == True
      - key.tags | length == 1
      - key.tags['Hello'] == 'World'
      - key.enable_key_rotation == false
      - key.key_usage == 'ENCRYPT_DECRYPT'
      - key.customer_master_key_spec == 'SYMMETRIC_DEFAULT'
      - key.grants | length == 1
      - key.key_policies | length == 1
      - key.key_policies[0].Id == 'key-default-1'
      - key.description == ''

  - name: Sleep to wait for updates to propagate
    wait_for:
      timeout: 45
  - name: Add grant (idempotence) - check mode
    kms_key:
      alias: '{{ kms_key_alias }}'
      state: present
      purge_grants: yes
      grants:
      - name: test_grant
        grantee_principal: '{{ iam_role_result.iam_role.arn }}'
        retiring_principal: '{{ aws_caller_info.arn }}'
        constraints:
          encryption_context_equals:
            environment: test
            application: testapp
        operations:
        - Decrypt
        - RetireGrant
    register: key
    check_mode: yes
  - assert:
      that:
      - not key.changed

  - name: Add grant (idempotence)
    kms_key:
      alias: '{{ kms_key_alias }}'
      state: present
      purge_grants: yes
      grants:
      - name: test_grant
        grantee_principal: '{{ iam_role_result.iam_role.arn }}'
        retiring_principal: '{{ aws_caller_info.arn }}'
        constraints:
          encryption_context_equals:
            environment: test
            application: testapp
        operations:
        - Decrypt
        - RetireGrant
    register: key
  - assert:
      that:
      - not key.changed
      - '"key_id" in key'
      - key.key_id | length >= 36
      - not key.key_id.startswith("arn:aws")
      - '"key_arn" in key'
      - key.key_arn.endswith(key.key_id)
      - key.key_arn.startswith("arn:aws")
      - key.key_state == "Enabled"
      - key.enabled == True
      - key.tags | length == 1
      - key.tags['Hello'] == 'World'
      - key.enable_key_rotation == false
      - key.key_usage == 'ENCRYPT_DECRYPT'
      - key.customer_master_key_spec == 'SYMMETRIC_DEFAULT'
      - key.grants | length == 1
      - key.key_policies | length == 1
      - key.key_policies[0].Id == 'key-default-1'
      - key.description == ''

  - name: Add a second grant
    kms_key:
      alias: '{{ kms_key_alias }}'
      state: present
      grants:
      - name: another_grant
        grantee_principal: '{{ iam_role_result.iam_role.arn }}'
        retiring_principal: '{{ aws_caller_info.arn }}'
        constraints:
          encryption_context_equals:
            Environment: second
            Application: anotherapp
        operations:
        - Decrypt
        - RetireGrant
    register: key
  - name: Assert grant added
    assert:
      that:
      - key.changed
      - '"key_id" in key'
      - key.key_id | length >= 36
      - not key.key_id.startswith("arn:aws")
      - '"key_arn" in key'
      - key.key_arn.endswith(key.key_id)
      - key.key_arn.startswith("arn:aws")
      - key.key_state == "Enabled"
      - key.enabled == True
      - key.tags | length == 1
      - key.tags['Hello'] == 'World'
      - key.enable_key_rotation == false
      - key.key_usage == 'ENCRYPT_DECRYPT'
      - key.customer_master_key_spec == 'SYMMETRIC_DEFAULT'
      - key.grants | length == 2
      - key.key_policies | length == 1
      - key.key_policies[0].Id == 'key-default-1'
      - key.description == ''

  - name: Sleep to wait for updates to propagate
    wait_for:
      timeout: 45
  - name: Add a second grant again
    kms_key:
      alias: '{{ kms_key_alias }}'
      state: present
      grants:
      - name: another_grant
        grantee_principal: '{{ iam_role_result.iam_role.arn }}'
        retiring_principal: '{{ aws_caller_info.arn }}'
        constraints:
          encryption_context_equals:
            Environment: second
            Application: anotherapp
        operations:
        - Decrypt
        - RetireGrant
    register: key
  - name: Assert grant added
    assert:
      that:
      - not key.changed
      - '"key_id" in key'
      - key.key_id | length >= 36
      - not key.key_id.startswith("arn:aws")
      - '"key_arn" in key'
      - key.key_arn.endswith(key.key_id)
      - key.key_arn.startswith("arn:aws")
      - key.key_state == "Enabled"
      - key.enabled == True
      - key.tags | length == 1
      - key.tags['Hello'] == 'World'
      - key.enable_key_rotation == false
      - key.key_usage == 'ENCRYPT_DECRYPT'
      - key.customer_master_key_spec == 'SYMMETRIC_DEFAULT'
      - key.grants | length == 2
      - key.key_policies | length == 1
      - key.key_policies[0].Id == 'key-default-1'
      - key.description == ''

  - name: Update the grants with purge_grants set
    kms_key:
      alias: '{{ kms_key_alias }}'
      state: present
      purge_grants: yes
      grants:
      - name: third_grant
        grantee_principal: '{{ iam_role_result.iam_role.arn }}'
        retiring_principal: '{{ aws_caller_info.arn }}'
        constraints:
          encryption_context_equals:
            environment: third
            application: onemoreapp
        operations:
        - Decrypt
        - RetireGrant
    register: key
  - name: Assert grants replaced
    assert:
      that:
      - key.changed
      - '"key_id" in key'
      - key.key_id | length >= 36
      - not key.key_id.startswith("arn:aws")
      - '"key_arn" in key'
      - key.key_arn.endswith(key.key_id)
      - key.key_arn.startswith("arn:aws")
      - key.key_state == "Enabled"
      - key.enabled == True
      - key.tags | length == 1
      - key.tags['Hello'] == 'World'
      - key.enable_key_rotation == false
      - key.key_usage == 'ENCRYPT_DECRYPT'
      - key.customer_master_key_spec == 'SYMMETRIC_DEFAULT'
      - key.grants | length == 1
      - key.key_policies | length == 1
      - key.key_policies[0].Id == 'key-default-1'
      - key.description == ''

  - name: Update third grant to change encryption context equals to subset
    kms_key:
      alias: '{{ kms_key_alias }}'
      state: present
      grants:
      - name: third_grant
        grantee_principal: '{{ iam_role_result.iam_role.arn }}'
        retiring_principal: '{{ aws_caller_info.arn }}'
        constraints:
          encryption_context_subset:
            environment: third
            application: onemoreapp
        operations:
        - Decrypt
        - RetireGrant
    register: key
  - name: Assert grants replaced
    assert:
      that:
      - key.changed
      - '"key_id" in key'
      - key.key_id | length >= 36
      - not key.key_id.startswith("arn:aws")
      - '"key_arn" in key'
      - key.key_arn.endswith(key.key_id)
      - key.key_arn.startswith("arn:aws")
      - key.key_state == "Enabled"
      - key.enabled == True
      - key.tags | length == 1
      - key.tags['Hello'] == 'World'
      - key.enable_key_rotation == false
      - key.key_usage == 'ENCRYPT_DECRYPT'
      - key.customer_master_key_spec == 'SYMMETRIC_DEFAULT'
      - key.grants | length == 1
      - key.key_policies | length == 1
      - key.key_policies[0].Id == 'key-default-1'
      - key.description == ''
      - "'encryption_context_equals' not in key.grants[0].constraints"
      - "'encryption_context_subset' in key.grants[0].constraints"

  always:
    # ============================================================
    #   CLEAN-UP
  - name: finish off by deleting keys
    kms_key:
      state: absent
      alias: '{{ kms_key_alias }}'
      pending_window: 7
    ignore_errors: true
  - name: remove the IAM role
    iam_role:
      name: '{{ kms_key_alias }}'
      state: absent
    ignore_errors: true

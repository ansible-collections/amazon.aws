---
# ============================================================
# Known issues:
#
# there is no way to associate the `default` option set in the module
# always reassociated (changed=True) when vpc_id is provided without options
#
# ============================================================
- module_defaults:
    group/aws:
      access_key: "{{ aws_access_key }}"
      secret_key: "{{ aws_secret_key }}"
      session_token: "{{ security_token | default('') }}"
      region: "{{ aws_region }}"

  block:
  # DHCP option set can be attached to multiple VPCs, we don't want to use any that
  # don't belong to this test run
    - name: find all DHCP option sets that already exist before running tests
      amazon.aws.ec2_vpc_dhcp_option_info:
      register: result

    - ansible.builtin.set_fact:
        preexisting_option_sets: "{{ result.dhcp_options | map(attribute='dhcp_options_id') | list }}"

    - name: create a VPC with a default DHCP option set to test inheritance and delete_old
      amazon.aws.ec2_vpc_net:
        name: "{{ resource_prefix }}"
        cidr_block: "{{ vpc_cidr }}"
        state: present
      register: vpc

    - name: ensure a DHCP option set is attached to the VPC
      ansible.builtin.assert:
        that:
          - vpc.vpc.dhcp_options_id is defined

    - ansible.builtin.set_fact:
        vpc_id: "{{ vpc.vpc.id }}"
        default_options_id: "{{ vpc.vpc.dhcp_options_id }}"

    ## ============================================
    - name: Option Sets can be attached to multiple VPCs, create a new one if the test VPC is reusing a pre-existing one
      when: vpc.vpc.dhcp_options_id in preexisting_option_sets
      block:
        - name: Create the new option set
          amazon.aws.ec2_vpc_dhcp_option:
            state: present
            domain_name: "{{ aws_domain_name }}"
            dns_servers:
              - AmazonProvidedDNS
            delete_old: true
            tags:
              Name: "{{ resource_prefix }}"
          register: new_dhcp_options

        - ansible.builtin.assert:
            that:
              - new_dhcp_options.dhcp_options_id not in preexisting_option_sets

        - name: Attach the new option set to the VPC
          amazon.aws.ec2_vpc_dhcp_option:
            state: present
            vpc_id: "{{ vpc_id }}"
            purge_tags: false
            dhcp_options_id: "{{ new_dhcp_options.dhcp_options_id }}"
    ## ============================================

    - name: find the VPC's associated option set
      amazon.aws.ec2_vpc_net_info:
        vpc_ids: "{{ vpc_id }}"
      register: vpc_info

    - ansible.builtin.set_fact:
        original_dhcp_options_id: "{{ vpc_info.vpcs[0].dhcp_options_id }}"

    - name: get information about the DHCP option
      amazon.aws.ec2_vpc_dhcp_option_info:
        dhcp_options_ids: ["{{ original_dhcp_options_id }}"]
      register: original_dhcp_options_info

    - ansible.builtin.set_fact:
        original_config: "{{ original_dhcp_options_info.dhcp_options[0].dhcp_configurations | items2dict(key_name='key', value_name='values') }}"

    - ansible.builtin.assert:
        that:
          - original_dhcp_options_info.dhcp_options | length == 1
          - original_config.keys() | list | sort == ['domain-name', 'domain-name-servers']
          - original_config['domain-name'][0]['value'] == '{{ aws_domain_name }}'
          - original_config['domain-name-servers'][0]['value'] == 'AmazonProvidedDNS'
          - original_dhcp_options_id not in preexisting_option_sets

    ## ============================================

    # FIXME: always reassociated to lowest alphanum dhcp_options_id when vpc_id is provided without options,
    # This task will return an unpredictable dhcp_option_id so we can't assert anything about the option's values
    - name: test a DHCP option exists (check mode)
      amazon.aws.ec2_vpc_dhcp_option:
        state: present
        vpc_id: "{{ vpc_id }}"
        domain_name: "{{ aws_domain_name }}"
        dns_servers:
          - AmazonProvidedDNS
        tags:
          Name: "{{ resource_prefix }}"
      register: found_dhcp_options
      check_mode: true

    - ansible.builtin.assert:
        that:
          - not found_dhcp_options.changed

    # FIXME: always reassociated when vpc_id is provided without options, so here we provide the default options
    - name: test a DHCP option exists
      amazon.aws.ec2_vpc_dhcp_option:
        state: present
        vpc_id: "{{ vpc_id }}"
        domain_name: "{{ aws_domain_name }}"
        dns_servers:
          - AmazonProvidedDNS
        tags:
          Name: "{{ resource_prefix }}"
      register: found_dhcp_options

    - ansible.builtin.assert:
        that:
          - found_dhcp_options is not changed
          - found_dhcp_options.dhcp_options_id is defined
          - original_dhcp_options_id == found_dhcp_options.dhcp_options_id

    # Create a DHCP option set that inherits from the default set and does not delete the old set
    - name: create a DHCP option set that inherits from the default set (check mode)
      amazon.aws.ec2_vpc_dhcp_option:
        state: present
        vpc_id: "{{ vpc_id }}"
        inherit_existing: true
        ntp_servers:
          - 10.0.0.2
          - 10.0.1.2
        netbios_name_servers:
          - 10.0.0.1
          - 10.0.1.1
        netbios_node_type: 2
        delete_old: false
      register: dhcp_options
      check_mode: true

    - ansible.builtin.assert:
        that:
          - dhcp_options.changed

    - name: create a DHCP option set that inherits from the default set
      amazon.aws.ec2_vpc_dhcp_option:
        state: present
        vpc_id: "{{ vpc_id }}"
        inherit_existing: true
        ntp_servers:
          - 10.0.0.2
          - 10.0.1.2
        netbios_name_servers:
          - 10.0.0.1
          - 10.0.1.1
        netbios_node_type: 2
        delete_old: false
      register: dhcp_options

    - ansible.builtin.set_fact:
        dhcp_options_config: "{{ dhcp_options.dhcp_options.dhcp_configurations | items2dict(key_name='key', value_name='values') }}"

    - ansible.builtin.assert:
        that:
          - dhcp_options.changed
          - dhcp_options.dhcp_config
          - dhcp_options.dhcp_config.keys() | list | sort == ['domain-name', 'domain-name-servers', 'netbios-name-servers', 'netbios-node-type', 'ntp-servers']
          - dhcp_options.dhcp_config['ntp-servers'] | sort == ['10.0.0.2', '10.0.1.2']
          - dhcp_options.dhcp_config['netbios-name-servers'] | sort == ['10.0.0.1', '10.0.1.1']
          - dhcp_options.dhcp_config['netbios-node-type'] == '2'
          - dhcp_options.dhcp_config['domain-name'] == ['{{ aws_domain_name }}']
          - dhcp_options.dhcp_config['domain-name-servers'] == ['AmazonProvidedDNS']
          # We return the list of dicts that boto gives us, in addition to the user-friendly config dict
          - dhcp_options_config['ntp-servers'] | map(attribute='value') | list | sort == ['10.0.0.2', '10.0.1.2']
          - dhcp_options_config['netbios-name-servers'] | map(attribute='value') | list | sort == ['10.0.0.1', '10.0.1.1']
          - dhcp_options_config['netbios-node-type'][0]['value'] == '2'
          - dhcp_options_config['domain-name'][0]['value'] == '{{ aws_domain_name }}'
          - dhcp_options_config['domain-name-servers'][0]['value'] == 'AmazonProvidedDNS'
          - original_dhcp_options_id != dhcp_options.dhcp_options_id

    - ansible.builtin.set_fact:
        new_dhcp_options_id: "{{ dhcp_options.dhcp_options_id }}"

    - name: get information about the new DHCP option
      amazon.aws.ec2_vpc_dhcp_option_info:
        dhcp_options_ids: ["{{ new_dhcp_options_id }}"]
      register: new_dhcp_options

    - ansible.builtin.set_fact:
        new_config: "{{ new_dhcp_options.dhcp_options[0].dhcp_configurations | items2dict(key_name='key', value_name='values') }}"

    - ansible.builtin.assert:
        that:
          - new_config.keys() | list | sort == ['domain-name', 'domain-name-servers', 'netbios-name-servers', 'netbios-node-type', 'ntp-servers']
          - new_config['domain-name'][0]['value'] == '{{ aws_domain_name }}'
          - new_config['domain-name-servers'][0]['value'] == 'AmazonProvidedDNS'
          - new_config['ntp-servers'] | map(attribute='value') | list | sort == ['10.0.0.2', '10.0.1.2']
          - new_config['netbios-name-servers'] | map(attribute='value') | list | sort == ['10.0.0.1', '10.0.1.1']
          - new_config['netbios-node-type'][0]['value'] == '2'
          # We return the list of dicts that boto gives us, in addition to the user-friendly config dict
          - new_dhcp_options.dhcp_config[0]['ntp-servers'] | sort == ['10.0.0.2', '10.0.1.2']
          - new_dhcp_options.dhcp_config[0]['netbios-name-servers'] | sort == ['10.0.0.1', '10.0.1.1']
          - new_dhcp_options.dhcp_config[0]['netbios-node-type'] == '2'
          - new_dhcp_options.dhcp_config[0]['domain-name'] == ['{{ aws_domain_name }}']
          - new_dhcp_options.dhcp_config[0]['domain-name-servers'] == ['AmazonProvidedDNS']

    # FIXME: no way to associate `default` in the module
    - name: Re-associate the default DHCP options set so that the new one can be deleted
      amazon.aws.ec2_vpc_dhcp_option:
        vpc_id: "{{ vpc_id }}"
        dhcp_options_id: "{{ default_options_id }}"
        state: present
      register: result

    - ansible.builtin.assert:
        that:
          - result.changed
          - result is success
          - result.dhcp_options_id == '{{ default_options_id }}'

    - name: delete it for the next test
      amazon.aws.ec2_vpc_dhcp_option:
        dhcp_options_id: "{{ new_dhcp_options_id }}"
        state: absent

    # Create a DHCP option set that does not inherit from the old set and doesn't delete the old set

    - name: create a DHCP option set that does not inherit from the default set (check mode)
      amazon.aws.ec2_vpc_dhcp_option:
        state: present
        vpc_id: "{{ vpc_id }}"
        inherit_existing: false
        ntp_servers:
          - 10.0.0.2
          - 10.0.1.2
        netbios_name_servers:
          - 10.0.0.1
          - 10.0.1.1
        netbios_node_type: 2
        delete_old: false
      register: dhcp_options
      check_mode: true

    - ansible.builtin.assert:
        that:
          - dhcp_options.changed

    - name: create a DHCP option set that does not inherit from the default set
      amazon.aws.ec2_vpc_dhcp_option:
        state: present
        vpc_id: "{{ vpc_id }}"
        inherit_existing: false
        ntp_servers:
          - 10.0.0.2
          - 10.0.1.2
        netbios_name_servers:
          - 10.0.0.1
          - 10.0.1.1
        netbios_node_type: 2
        delete_old: false
      register: dhcp_options

    - ansible.builtin.set_fact:
        dhcp_options_config: "{{ dhcp_options.dhcp_options.dhcp_configurations | items2dict(key_name='key', value_name='values') }}"

    - ansible.builtin.assert:
        that:
          - dhcp_options.changed
          - dhcp_options.dhcp_config
          - dhcp_options.dhcp_config.keys() | list | sort == ['netbios-name-servers', 'netbios-node-type', 'ntp-servers']
          - dhcp_options.dhcp_config['ntp-servers'] | sort == ['10.0.0.2', '10.0.1.2']
          - dhcp_options.dhcp_config['netbios-name-servers'] | sort == ['10.0.0.1', '10.0.1.1']
          - dhcp_options.dhcp_config['netbios-node-type'] == '2'
          - original_dhcp_options_id != dhcp_options.dhcp_options_id
          # We return the list of dicts that boto gives us, in addition to the user-friendly config dict
          - new_dhcp_options.dhcp_config[0]['ntp-servers'] | sort == ['10.0.0.2', '10.0.1.2']
          - new_dhcp_options.dhcp_config[0]['netbios-name-servers'] | sort == ['10.0.0.1', '10.0.1.1']
          - new_dhcp_options.dhcp_config[0]['netbios-node-type'] == '2'

    - ansible.builtin.set_fact:
        new_dhcp_options_id: "{{ dhcp_options.dhcp_options_id }}"

    - name: get information about the new DHCP option
      amazon.aws.ec2_vpc_dhcp_option_info:
        dhcp_options_ids: ["{{ new_dhcp_options_id }}"]
      register: new_dhcp_options

    - ansible.builtin.set_fact:
        new_config: "{{ new_dhcp_options.dhcp_options[0].dhcp_configurations | items2dict(key_name='key', value_name='values') }}"

    - ansible.builtin.assert:
        that:
          - new_config.keys() | list | sort == ['netbios-name-servers', 'netbios-node-type', 'ntp-servers']
          - new_config['ntp-servers'] | map(attribute='value') | list | sort == ['10.0.0.2', '10.0.1.2']
          - new_config['netbios-name-servers'] | map(attribute='value') | list | sort == ['10.0.0.1', '10.0.1.1']
          - new_config['netbios-node-type'][0]['value'] == '2'

    - name: disassociate the new DHCP option set so it can be deleted
      amazon.aws.ec2_vpc_dhcp_option:
        dhcp_options_id: "{{ original_dhcp_options_id }}"
        vpc_id: "{{ vpc_id }}"
        state: present

    - name: delete it for the next test
      amazon.aws.ec2_vpc_dhcp_option:
        dhcp_options_id: "{{ new_dhcp_options_id }}"
        state: absent

    # Create a DHCP option set that inherits from the default set overwrites a default and deletes the old set
    - name: create a DHCP option set that inherits from the default set and deletes the original set (check mode)
      amazon.aws.ec2_vpc_dhcp_option:
        state: present
        vpc_id: "{{ vpc_id }}"
        inherit_existing: true
        domain_name: us-west-2.compute.internal
        ntp_servers:
          - 10.0.0.2
          - 10.0.1.2
        netbios_name_servers:
          - 10.0.0.1
          - 10.0.1.1
        netbios_node_type: 2
        delete_old: true
      register: dhcp_options
      check_mode: true

    - ansible.builtin.assert:
        that:
          - dhcp_options.changed

    - name: create a DHCP option set that inherits from the default set and deletes the original set
      amazon.aws.ec2_vpc_dhcp_option:
        state: present
        vpc_id: "{{ vpc_id }}"
        inherit_existing: true
        domain_name: "{{ aws_domain_name }}"
        ntp_servers:
          - 10.0.0.2
          - 10.0.1.2
        netbios_name_servers:
          - 10.0.0.1
          - 10.0.1.1
        netbios_node_type: 1
        delete_old: true
      register: dhcp_options

    - ansible.builtin.assert:
        that:
          - dhcp_options.changed
          - dhcp_options.dhcp_config
          - dhcp_options.dhcp_config.keys() | list | sort == ['domain-name', 'domain-name-servers', 'netbios-name-servers', 'netbios-node-type', 'ntp-servers']
          - dhcp_options.dhcp_config['ntp-servers'] | sort == ['10.0.0.2', '10.0.1.2']
          - dhcp_options.dhcp_config['netbios-name-servers'] | sort == ['10.0.0.1', '10.0.1.1']
          - dhcp_options.dhcp_config['netbios-node-type'] == '1'
          - dhcp_options.dhcp_config['domain-name'] == ['{{ aws_domain_name }}']
          - original_dhcp_options_id != dhcp_options.dhcp_options_id

    - ansible.builtin.set_fact:
        new_dhcp_options_id: "{{ dhcp_options.dhcp_options_id }}"

    - name: get information about the new DHCP option
      amazon.aws.ec2_vpc_dhcp_option_info:
        dhcp_options_ids: ["{{ new_dhcp_options_id }}"]
      register: new_dhcp_options

    - ansible.builtin.set_fact:
        new_config: "{{ new_dhcp_options.dhcp_options[0].dhcp_configurations | items2dict(key_name='key', value_name='values') }}"

    - ansible.builtin.assert:
        that:
          - new_config.keys() | list | sort == ['domain-name', 'domain-name-servers', 'netbios-name-servers', 'netbios-node-type', 'ntp-servers']
          - new_config['domain-name'][0]['value'] == '{{ aws_domain_name }}'
          - new_config['ntp-servers'] | map(attribute='value') | list | sort == ['10.0.0.2', '10.0.1.2']
          - new_config['netbios-name-servers'] | map(attribute='value') | list | sort == ['10.0.0.1', '10.0.1.1']
          - new_config['netbios-node-type'][0]['value'] == '1'

    - name: verify the original set was deleted
      amazon.aws.ec2_vpc_dhcp_option_info:
        dhcp_options_ids: ["{{ original_dhcp_options_id }}"]
      register: dhcp_options
      ignore_errors: true
      retries: 5
      until: dhcp_options is failed
      delay: 5

    - ansible.builtin.assert:
        that:
          - dhcp_options.failed
          - '"does not exist" in dhcp_options.error.message'

    - ansible.builtin.set_fact:
        original_dhcp_options_id: "{{ new_dhcp_options_id }}"

    # Create a DHCP option set that does not inherit from the old set and deletes the old set

    - name: create a DHCP option set that does not inherit from the default set and deletes the original set (check mode)
      amazon.aws.ec2_vpc_dhcp_option:
        state: present
        vpc_id: "{{ vpc_id }}"
        inherit_existing: false
        domain_name: "{{ aws_domain_name }}"
        dns_servers:
          - AmazonProvidedDNS
        delete_old: true
      register: dhcp_options
      check_mode: true

    - ansible.builtin.assert:
        that:
          - dhcp_options.changed

    - name: create a DHCP option set that does not inherit from the default set and deletes the original set
      amazon.aws.ec2_vpc_dhcp_option:
        state: present
        vpc_id: "{{ vpc_id }}"
        inherit_existing: false
        domain_name: "{{ aws_domain_name }}"
        dns_servers:
          - AmazonProvidedDNS
        delete_old: true
      register: dhcp_options

    - ansible.builtin.assert:
        that:
          - dhcp_options.dhcp_config
          - dhcp_options.dhcp_config.keys() | list | sort is superset(['domain-name', 'domain-name-servers'])
          - dhcp_options.dhcp_config['domain-name'] == ['{{ aws_domain_name }}']
          - dhcp_options.dhcp_config['domain-name-servers'] == ['AmazonProvidedDNS']
          - original_dhcp_options_id != dhcp_options.dhcp_options_id

    - ansible.builtin.set_fact:
        new_dhcp_options_id: "{{ dhcp_options.dhcp_options_id }}"

    - name: get information about the new DHCP option
      amazon.aws.ec2_vpc_dhcp_option_info:
        dhcp_options_ids: ["{{ new_dhcp_options_id }}"]
      register: new_dhcp_options

    - ansible.builtin.set_fact:
        new_config: "{{ new_dhcp_options.dhcp_options[0].dhcp_configurations | items2dict(key_name='key', value_name='values') }}"

    - ansible.builtin.assert:
        that:
          - new_config.keys() | list | sort == ['domain-name', 'domain-name-servers']
          - new_config['domain-name'][0]['value'] == '{{ aws_domain_name }}'
          - new_config['domain-name-servers'][0]['value'] == 'AmazonProvidedDNS'

    - name: verify the original set was deleted
      amazon.aws.ec2_vpc_dhcp_option_info:
        dhcp_options_ids: ["{{ original_dhcp_options_id }}"]
      register: dhcp_options
      ignore_errors: true

    - ansible.builtin.assert:
        that:
          - dhcp_options.failed
          - '"does not exist" in dhcp_options.error.message'

    - ansible.builtin.set_fact:
        original_dhcp_options_id: "{{ new_dhcp_options_id }}"

    # Create a DHCP option set with tags

    - name: create a DHCP option set with tags (check mode)
      amazon.aws.ec2_vpc_dhcp_option:
        state: present
        vpc_id: "{{ vpc_id }}"
        inherit_existing: false
        delete_old: true
        ntp_servers:
          - 10.0.0.2
          - 10.0.1.2
        netbios_name_servers:
          - 10.0.0.1
          - 10.0.1.1
        tags:
          CreatedBy: ansible-test
          Collection: amazon.aws
      register: dhcp_options
      check_mode: true
      ignore_errors: true

    - ansible.builtin.assert:
        that:
          - dhcp_options.changed

    - name: create a DHCP option set with tags
      amazon.aws.ec2_vpc_dhcp_option:
        state: present
        vpc_id: "{{ vpc_id }}"
        inherit_existing: false
        delete_old: true
        ntp_servers:
          - 10.0.0.2
          - 10.0.1.2
        netbios_name_servers:
          - 10.0.0.1
          - 10.0.1.1
        tags:
          CreatedBy: ansible-test
          Collection: amazon.aws
      register: dhcp_options

    - ansible.builtin.set_fact:
        dhcp_options_config: "{{ dhcp_options.dhcp_options.dhcp_configurations | items2dict(key_name='key', value_name='values') }}"

    - ansible.builtin.assert:
        that:
          - dhcp_options.changed
          - dhcp_options.dhcp_config.keys() | list | sort is superset(['ntp-servers', 'netbios-name-servers'])
          - dhcp_options.dhcp_config['ntp-servers'] | sort == ['10.0.0.2', '10.0.1.2']
          - dhcp_options.dhcp_config['netbios-name-servers'] | sort == ['10.0.0.1', '10.0.1.1']
          - original_dhcp_options_id != dhcp_options.dhcp_options_id
          # We return the list of dicts that boto gives us, in addition to the user-friendly config dict
          - dhcp_options_config['ntp-servers'] | map(attribute='value') | list | sort == ['10.0.0.2', '10.0.1.2']
          - dhcp_options_config['netbios-name-servers'] | map(attribute='value') | list | sort == ['10.0.0.1', '10.0.1.1']
          - dhcp_options.dhcp_options.tags.keys() | length == 2
          - dhcp_options.dhcp_options.tags['CreatedBy'] == 'ansible-test'
          - dhcp_options.dhcp_options.tags['Collection'] == 'amazon.aws'

    - ansible.builtin.set_fact:
        new_dhcp_options_id: "{{ dhcp_options.dhcp_options_id }}"

    - name: check if the expected tags are associated
      amazon.aws.ec2_vpc_dhcp_option_info:
        dhcp_options_ids: ["{{ new_dhcp_options_id }}"]
      register: dhcp_options_info

    - ansible.builtin.assert:
        that:
          - dhcp_options_info.dhcp_options[0].tags is defined
          - dhcp_options_info.dhcp_options[0].tags | length == 2
          - dhcp_options_info.dhcp_options[0].tags['Collection'] == 'amazon.aws'
          - dhcp_options_info.dhcp_options[0].tags['CreatedBy'] == 'ansible-test'

    - name: test no changes with the same tags (check mode)
      amazon.aws.ec2_vpc_dhcp_option:
        state: present
        vpc_id: "{{ vpc_id }}"
        inherit_existing: false
        delete_old: true
        ntp_servers:
          - 10.0.0.2
          - 10.0.1.2
        netbios_name_servers:
          - 10.0.0.1
          - 10.0.1.1
        tags:
          CreatedBy: ansible-test
          Collection: amazon.aws
      register: dhcp_options
      check_mode: true

    - ansible.builtin.assert:
        that:
          - not dhcp_options.changed
          - dhcp_options.dhcp_config.keys() | list | sort == ['netbios-name-servers', 'ntp-servers']
          - dhcp_options.dhcp_config['netbios-name-servers'] | sort == ['10.0.0.1', '10.0.1.1']
          - dhcp_options.dhcp_config['ntp-servers'] | sort == ['10.0.0.2', '10.0.1.2']

    - name: test no changes with the same tags
      amazon.aws.ec2_vpc_dhcp_option:
        state: present
        vpc_id: "{{ vpc_id }}"
        inherit_existing: false
        delete_old: true
        ntp_servers:
          - 10.0.0.2
          - 10.0.1.2
        netbios_name_servers:
          - 10.0.0.1
          - 10.0.1.1
        tags:
          CreatedBy: ansible-test
          Collection: amazon.aws
      register: dhcp_options

    - name: check if the expected tags are associated
      amazon.aws.ec2_vpc_dhcp_option_info:
        dhcp_options_ids: ["{{ dhcp_options.dhcp_options_id }}"]
      register: dhcp_options_info

    - ansible.builtin.assert:
        that:
          - not dhcp_options.changed
          - dhcp_options.dhcp_config.keys() | list | sort == ['netbios-name-servers', 'ntp-servers']
          - dhcp_options.dhcp_config['netbios-name-servers'] | sort == ['10.0.0.1', '10.0.1.1']
          - dhcp_options.dhcp_config['ntp-servers'] | sort == ['10.0.0.2', '10.0.1.2']
          - new_dhcp_options_id == dhcp_options.dhcp_options_id
          - dhcp_options.dhcp_options.tags.keys() | length == 2
          - dhcp_options.dhcp_options.tags['CreatedBy'] == 'ansible-test'
          - dhcp_options.dhcp_options.tags['Collection'] == 'amazon.aws'
          - dhcp_options_info.dhcp_options[0].tags is defined
          - dhcp_options_info.dhcp_options[0].tags.keys() | length == 2
          - dhcp_options_info.dhcp_options[0].tags['Collection'] == 'amazon.aws'
          - dhcp_options_info.dhcp_options[0].tags['CreatedBy'] == 'ansible-test'

    - name: test no changes without specifying tags (check mode)
      amazon.aws.ec2_vpc_dhcp_option:
        state: present
        vpc_id: "{{ vpc_id }}"
        inherit_existing: false
        delete_old: true
        ntp_servers:
          - 10.0.0.2
          - 10.0.1.2
        netbios_name_servers:
          - 10.0.0.1
          - 10.0.1.1
        purge_tags: false
      register: dhcp_options
      check_mode: true

    - ansible.builtin.assert:
        that:
          - not dhcp_options.changed
          - dhcp_options.dhcp_config.keys() | list | sort is superset(['netbios-name-servers', 'ntp-servers'])
          - dhcp_options.dhcp_config['netbios-name-servers'] | sort == ['10.0.0.1', '10.0.1.1']
          - dhcp_options.dhcp_config['ntp-servers'] | sort == ['10.0.0.2', '10.0.1.2']

    - name: test no changes without specifying tags
      amazon.aws.ec2_vpc_dhcp_option:
        state: present
        vpc_id: "{{ vpc_id }}"
        inherit_existing: false
        delete_old: true
        ntp_servers:
          - 10.0.0.2
          - 10.0.1.2
        netbios_name_servers:
          - 10.0.0.1
          - 10.0.1.1
        purge_tags: false
      register: dhcp_options

    - name: check if the expected tags are associated
      amazon.aws.ec2_vpc_dhcp_option_info:
        dhcp_options_ids: ["{{ dhcp_options.dhcp_options_id }}"]
      register: dhcp_options_info

    - ansible.builtin.assert:
        that:
          - not dhcp_options.changed
          - dhcp_options.dhcp_config.keys() | list | sort is superset(['netbios-name-servers', 'ntp-servers'])
          - dhcp_options.dhcp_config['netbios-name-servers'] | sort == ['10.0.0.1', '10.0.1.1']
          - dhcp_options.dhcp_config['ntp-servers'] | sort == ['10.0.0.2', '10.0.1.2']
          - new_dhcp_options_id == dhcp_options.dhcp_options_id
          - dhcp_options_info.dhcp_options[0].tags is defined
          - dhcp_options_info.dhcp_options[0].tags.keys() | length == 2
          - dhcp_options_info.dhcp_options[0].tags['Collection'] == 'amazon.aws'
          - dhcp_options_info.dhcp_options[0].tags['CreatedBy'] == 'ansible-test'

    - name: add a tag without using dhcp_options_id
      amazon.aws.ec2_vpc_dhcp_option:
        state: present
        vpc_id: "{{ vpc_id }}"
        inherit_existing: false
        delete_old: true
        ntp_servers:
          - 10.0.0.2
          - 10.0.1.2
        netbios_name_servers:
          - 10.0.0.1
          - 10.0.1.1
        tags:
          CreatedBy: ansible-test
          Collection: amazon.aws
          another: tag
      register: dhcp_options

    - name: check if the expected tags are associated
      amazon.aws.ec2_vpc_dhcp_option_info:
        dhcp_options_ids: ["{{ dhcp_options.dhcp_options_id }}"]
      register: dhcp_options_info

    - ansible.builtin.assert:
        that:
          - dhcp_options.changed
          - dhcp_options.dhcp_config.keys() | list | sort is superset(['netbios-name-servers', 'ntp-servers'])
          - dhcp_options.dhcp_config['netbios-name-servers'] | sort == ['10.0.0.1', '10.0.1.1']
          - dhcp_options.dhcp_config['ntp-servers'] | sort == ['10.0.0.2', '10.0.1.2']
          - new_dhcp_options_id == dhcp_options.dhcp_options_id
          - dhcp_options.dhcp_options.tags.keys() | length == 3
          - dhcp_options.dhcp_options.tags['another'] == 'tag'
          - dhcp_options.dhcp_options.tags['CreatedBy'] == 'ansible-test'
          - dhcp_options.dhcp_options.tags['Collection'] == 'amazon.aws'
          - dhcp_options_info.dhcp_options[0].tags is defined
          - dhcp_options_info.dhcp_options[0].tags.keys() | length == 3
          - dhcp_options_info.dhcp_options[0].tags['another'] == 'tag'
          - dhcp_options_info.dhcp_options[0].tags['Collection'] == 'amazon.aws'
          - dhcp_options_info.dhcp_options[0].tags['CreatedBy'] == 'ansible-test'

    - name: add and removing tags (check mode)
      amazon.aws.ec2_vpc_dhcp_option:
        dhcp_options_id: "{{ dhcp_options.dhcp_options_id }}"
        state: present
        vpc_id: "{{ vpc_id }}"
        inherit_existing: false
        delete_old: true
        ntp_servers:
          - 10.0.0.2
          - 10.0.1.2
        netbios_name_servers:
          - 10.0.0.1
          - 10.0.1.1
        tags:
          AnsibleTest: integration
          Collection: amazon.aws
      register: dhcp_options
      check_mode: true

    - ansible.builtin.assert:
        that:
          - dhcp_options.changed

    - name: add and remove tags
      amazon.aws.ec2_vpc_dhcp_option:
        dhcp_options_id: "{{ dhcp_options.dhcp_options_id }}"
        state: present
        vpc_id: "{{ vpc_id }}"
        inherit_existing: false
        delete_old: true
        ntp_servers:
          - 10.0.0.2
          - 10.0.1.2
        netbios_name_servers:
          - 10.0.0.1
          - 10.0.1.1
        tags:
          AnsibleTest: integration
          Collection: amazon.aws
      register: dhcp_options

    - name: check if the expected tags are associated
      amazon.aws.ec2_vpc_dhcp_option_info:
        dhcp_options_ids: ["{{ dhcp_options.dhcp_options_id }}"]
      register: dhcp_options_info

    - ansible.builtin.assert:
        that:
          - dhcp_options.changed
          - dhcp_options.dhcp_options.tags.keys() | length == 2
          - dhcp_options.dhcp_options.tags['AnsibleTest'] == 'integration'
          - dhcp_options.dhcp_options.tags['Collection'] == 'amazon.aws'
          - new_dhcp_options_id == dhcp_options.dhcp_options_id
          - dhcp_options_info.dhcp_options[0].tags is defined
          - dhcp_options_info.dhcp_options[0].tags.keys() | length == 2
          - dhcp_options_info.dhcp_options[0].tags['Collection'] == 'amazon.aws'
          - dhcp_options_info.dhcp_options[0].tags['AnsibleTest'] == 'integration'

    - name: add tags with different cases
      amazon.aws.ec2_vpc_dhcp_option:
        dhcp_options_id: "{{ dhcp_options.dhcp_options_id }}"
        state: present
        vpc_id: "{{ vpc_id }}"
        inherit_existing: false
        delete_old: true
        ntp_servers:
          - 10.0.0.2
          - 10.0.1.2
        netbios_name_servers:
          - 10.0.0.1
          - 10.0.1.1
        tags:
          lowercase spaced: hello cruel world
          Title Case: Hello Cruel World
          CamelCase: SimpleCamelCase
          snake_case: simple_snake_case
      register: dhcp_options

    - name: check if the expected tags are associated
      amazon.aws.ec2_vpc_dhcp_option_info:
        dhcp_options_ids: ["{{ dhcp_options.dhcp_options_id }}"]
      register: dhcp_options_info

    - ansible.builtin.assert:
        that:
          - dhcp_options.changed
          - new_dhcp_options_id == dhcp_options.dhcp_options_id
          - dhcp_options.dhcp_options.tags.keys() | length == 4
          - dhcp_options.dhcp_options.tags['lowercase spaced'] == 'hello cruel world'
          - dhcp_options.dhcp_options.tags['Title Case'] == 'Hello Cruel World'
          - dhcp_options.dhcp_options.tags['CamelCase'] == 'SimpleCamelCase'
          - dhcp_options.dhcp_options.tags['snake_case'] == 'simple_snake_case'
          - dhcp_options_info.dhcp_options[0].tags is defined
          - dhcp_options_info.dhcp_options[0].tags.keys() | length == 4
          - dhcp_options_info.dhcp_options[0].tags['lowercase spaced'] == 'hello cruel world'
          - dhcp_options_info.dhcp_options[0].tags['Title Case'] == 'Hello Cruel World'
          - dhcp_options_info.dhcp_options[0].tags['CamelCase'] == 'SimpleCamelCase'
          - dhcp_options_info.dhcp_options[0].tags['snake_case'] == 'simple_snake_case'

    - name: test purging all tags
      amazon.aws.ec2_vpc_dhcp_option:
        dhcp_options_id: "{{ dhcp_options.dhcp_options_id }}"
        state: present
        vpc_id: "{{ vpc_id }}"
        inherit_existing: false
        delete_old: true
        ntp_servers:
          - 10.0.0.2
          - 10.0.1.2
        netbios_name_servers:
          - 10.0.0.1
          - 10.0.1.1
        tags: {}
      register: dhcp_options

    - name: check if the expected tags are associated
      amazon.aws.ec2_vpc_dhcp_option_info:
        dhcp_options_ids: ["{{ dhcp_options.dhcp_options_id }}"]
      register: dhcp_options_info

    - ansible.builtin.assert:
        that:
          - dhcp_options.changed
          - new_dhcp_options_id == dhcp_options.dhcp_options_id
          - not dhcp_options_info.dhcp_options[0].tags

    - name: test removing all tags
      amazon.aws.ec2_vpc_dhcp_option:
        dhcp_options_id: "{{ dhcp_options.dhcp_options_id }}"
        state: present
        vpc_id: "{{ vpc_id }}"
        inherit_existing: false
        delete_old: true
        ntp_servers:
          - 10.0.0.2
          - 10.0.1.2
        netbios_name_servers:
          - 10.0.0.1
          - 10.0.1.1
        tags: {}
      register: dhcp_options

    - name: check if the expected tags are associated
      amazon.aws.ec2_vpc_dhcp_option_info:
        dhcp_options_ids: ["{{ dhcp_options.dhcp_options_id }}"]
      register: dhcp_options_info

    - ansible.builtin.assert:
        that:
          - dhcp_options.changed
          - new_dhcp_options_id == dhcp_options.dhcp_options_id
          - not dhcp_options_info.dhcp_options[0].tags

    - name: remove the DHCP option set (check mode)
      amazon.aws.ec2_vpc_dhcp_option:
        state: absent
        vpc_id: "{{ vpc_id }}"
        dhcp_options_id: "{{ new_dhcp_options_id }}"
      register: dhcp_options
      check_mode: true

    #  - assert:
    #      that:
    #        - dhcp_options.changed

    # FIXME: does nothing - the module should associate "default" with the VPC provided but currently does not
    - name: removing the DHCP option set
      amazon.aws.ec2_vpc_dhcp_option:
        state: absent
        vpc_id: "{{ vpc_id }}"
        dhcp_options_id: "{{ new_dhcp_options_id }}"
      register: dhcp_options

    #  - assert:
    #      that:
    #        - dhcp_options.changed

    - name: remove the DHCP option set again (check mode)
      amazon.aws.ec2_vpc_dhcp_option:
        state: absent
        vpc_id: "{{ vpc_id }}"
        dhcp_options_id: "{{ new_dhcp_options_id }}"
      register: dhcp_options
      check_mode: true

    - ansible.builtin.assert:
        that:
          - not dhcp_options.changed

    - name: remove the DHCP option set again
      amazon.aws.ec2_vpc_dhcp_option:
        state: absent
        vpc_id: "{{ vpc_id }}"
        dhcp_options_id: "{{ new_dhcp_options_id }}"
      register: dhcp_options

    - ansible.builtin.assert:
        that:
          - not dhcp_options.changed

  always:
    - name: Re-associate the default DHCP options set so that the new one(s) can be deleted
      amazon.aws.ec2_vpc_dhcp_option:
        vpc_id: "{{ vpc_id }}"
        dhcp_options_id: "{{ default_options_id }}"
        state: present
      register: result
      when: vpc_id is defined
      ignore_errors: true

    - name: Query all option sets created by the test
      amazon.aws.ec2_vpc_dhcp_option_info:
        filters:
          tag:Name: "*'{{ resource_prefix }}*"
      register: option_sets

    - name: clean up DHCP option sets
      amazon.aws.ec2_vpc_dhcp_option:
        state: absent
        dhcp_options_id: "{{ original_dhcp_options_id }}"
        vpc_id: "{{ vpc_id }}"
      when: original_dhcp_options_id is defined
      ignore_errors: true

    - name: clean up DHCP option sets
      amazon.aws.ec2_vpc_dhcp_option:
        state: absent
        dhcp_options_id: "{{ new_dhcp_options_id }}"
        vpc_id: "{{ vpc_id }}"
      when: new_dhcp_options_id is defined
      ignore_errors: true

    - name: Delete the VPC
      amazon.aws.ec2_vpc_net:
        name: "{{ resource_prefix }}"
        cidr_block: "{{ vpc_cidr }}"
        state: absent

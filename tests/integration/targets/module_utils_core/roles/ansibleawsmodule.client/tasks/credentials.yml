---
##################################################################################
# Tests using standard credential parameters

- name: 'Test basic operation using simple credentials (simple-parameters)'
  example_module:
    region: '{{ aws_region }}'
    access_key: '{{ aws_access_key }}'
    secret_key: '{{ aws_secret_key }}'
    security_token: '{{ security_token }}'
  register: credential_result

- assert:
    that:
    - credential_result is successful

- name: 'Test basic operation using simple credentials (aws-parameters)'
  example_module:
    aws_region: '{{ aws_region }}'
    aws_access_key: '{{ aws_access_key }}'
    aws_secret_key: '{{ aws_secret_key }}'
    aws_security_token: '{{ security_token }}'
  register: credential_result

- assert:
    that:
    - credential_result is successful

- name: 'Test basic operation using simple credentials (ec2-parameters)'
  example_module:
    ec2_region: '{{ aws_region }}'
    ec2_access_key: '{{ aws_access_key }}'
    ec2_secret_key: '{{ aws_secret_key }}'
    access_token: '{{ security_token }}'
  register: credential_result

- assert:
    that:
    - credential_result is successful

##################################################################################
# Tests using standard credentials from environment variables

- name: 'Test basic operation using simple credentials (aws-environment)'
  example_module:
  environment:
    AWS_REGION: '{{ aws_region }}'
    AWS_ACCESS_KEY_ID: '{{ aws_access_key }}'
    AWS_SECRET_ACCESS_KEY: '{{ aws_secret_key }}'
    AWS_SECURITY_TOKEN: '{{ security_token }}'
  register: credential_result

- assert:
    that:
    - credential_result is successful

- name: 'Test basic operation using simple credentials (aws2-environment)'
  example_module:
  environment:
    AWS_DEFAULT_REGION: '{{ aws_region }}'
    AWS_ACCESS_KEY: '{{ aws_access_key }}'
    AWS_SECRET_KEY: '{{ aws_secret_key }}'
    AWS_SESSION_TOKEN: '{{ security_token }}'
  register: credential_result

- assert:
    that:
    - credential_result is successful

- name: 'Test basic operation using simple credentials (ec2-environment)'
  example_module:
  environment:
    EC2_REGION: '{{ aws_region }}'
    EC2_ACCESS_KEY: '{{ aws_access_key }}'
    EC2_SECRET_KEY: '{{ aws_secret_key }}'
    EC2_SECURITY_TOKEN: '{{ security_token }}'
  register: credential_result

- assert:
    that:
    - credential_result is successful

##################################################################################
# Tests for missing parameters

- name: 'Test with missing region'
  example_module:
    region: '{{ omit }}'
    access_key: '{{ aws_access_key }}'
    secret_key: '{{ aws_secret_key }}'
    security_token: '{{ security_token }}'
  register: missing_region
  ignore_errors: True

- assert:
    that:
    - missing_region is failed
    - '"requires a region" in missing_region.msg'

- name: 'Test with missing access key'
  example_module:
    region: '{{ aws_region }}'
    access_key: '{{ omit }}'
    secret_key: '{{ aws_secret_key }}'
    security_token: '{{ security_token }}'
  register: missing_access
  ignore_errors: True

- assert:
    that:
    - missing_access is failed
    - '"Partial credentials found" in missing_access.msg'
    - '"aws_access_key_id" in missing_access.msg'

- name: 'Test with missing secret key'
  example_module:
    region: '{{ aws_region }}'
    access_key: '{{ aws_access_key }}'
    secret_key: '{{ omit }}'
    security_token: '{{ security_token }}'
  register: missing_secret
  ignore_errors: True

- assert:
    that:
    - missing_secret is failed
    - '"Partial credentials found" in missing_secret.msg'
    - '"aws_secret_access_key" in missing_secret.msg'

- name: 'Test with missing security token'
  example_module:
    region: '{{ aws_region }}'
    access_key: '{{ aws_access_key }}'
    secret_key: '{{ aws_secret_key }}'
    security_token: '{{ omit }}'
  register: missing_token
  ignore_errors: True

- assert:
    that:
    - missing_token is failed
    # Caught when we try to do something, and passed to fail_json_aws
    - '"AuthFailure" in missing_token.msg'
    - '"Fail JSON AWS" in missing_token.msg'
    - '"error" in missing_token'
    - '"code" in missing_token.error'
    - missing_token.error.code == 'AuthFailure'
    - '"message" in missing_token.error'

##################################################################################
# Run an additional authentication request to ensure that we're out of any
# deny-lists caused by bad requests
- name: 'Perform valid authentication to avoid deny-listing'
  example_module:
    aws_region: '{{ aws_region }}'
    aws_access_key: '{{ aws_access_key }}'
    aws_secret_key: '{{ aws_secret_key }}'
    aws_security_token: '{{ security_token }}'
  register: anti_denylist
  until: anti_denylist is success
  retries: 5
  delay: 5

##################################################################################
# Tests for bad parameters

- name: 'Test with bad region'
  example_module:
    region: 'junk-example'
    access_key: '{{ aws_access_key }}'
    secret_key: '{{ aws_secret_key }}'
    security_token: '{{ security_token }}'
  register: bad_region
  ignore_errors: True

- assert:
    that:
    - bad_region is failed
    - '"msg" in bad_region'
    - '"Could not connect to the endpoint URL" in bad_region.msg'
    - '"Fail JSON AWS" in bad_region.msg'
    - '"ec2.junk-example" in bad_region.msg'

- name: 'Test with bad access key'
  example_module:
    region: '{{ aws_region }}'
    access_key: 'junk-example'
    secret_key: '{{ aws_secret_key }}'
    security_token: '{{ security_token }}'
  register: bad_access
  ignore_errors: True

- assert:
    that:
    - bad_access is failed
    # Caught when we try to do something, and passed to fail_json_aws
    - '"AuthFailure" in bad_access.msg'
    - '"Fail JSON AWS" in bad_access.msg'
    - '"error" in bad_access'
    - '"code" in bad_access.error'
    - bad_access.error.code == 'AuthFailure'
    - '"message" in bad_access.error'

# Run an additional authentication request to ensure that we're out of any
# deny-lists caused by bad requests
- name: 'Perform valid authentication to avoid deny-listing'
  example_module:
    aws_region: '{{ aws_region }}'
    aws_access_key: '{{ aws_access_key }}'
    aws_secret_key: '{{ aws_secret_key }}'
    aws_security_token: '{{ security_token }}'
  register: anti_denylist
  until: anti_denylist is success
  retries: 5
  delay: 5

- name: 'Test with bad secret key'
  example_module:
    region: '{{ aws_region }}'
    access_key: '{{ aws_access_key }}'
    secret_key: 'junk-example'
    security_token: '{{ security_token }}'
  register: bad_secret
  ignore_errors: True

- assert:
    that:
    - bad_secret is failed
    # Caught when we try to do something, and passed to fail_json_aws
    - '"AuthFailure" in bad_secret.msg'
    - '"Fail JSON AWS" in bad_secret.msg'
    - '"error" in bad_secret'
    - '"code" in bad_secret.error'
    - bad_secret.error.code == 'AuthFailure'
    - '"message" in bad_secret.error'

# Run an additional authentication request to ensure that we're out of any
# deny-lists caused by bad requests
- name: 'Perform valid authentication to avoid deny-listing'
  example_module:
    aws_region: '{{ aws_region }}'
    aws_access_key: '{{ aws_access_key }}'
    aws_secret_key: '{{ aws_secret_key }}'
    aws_security_token: '{{ security_token }}'
  register: anti_denylist
  until: anti_denylist is success
  retries: 5
  delay: 5

- name: 'Test with bad security token'
  example_module:
    region: '{{ aws_region }}'
    access_key: '{{ aws_access_key }}'
    secret_key: '{{ aws_secret_key }}'
    security_token: 'junk-example'
  register: bad_token
  ignore_errors: True

- assert:
    that:
    - bad_token is failed
    # Caught when we try to do something, and passed to fail_json_aws
    - '"AuthFailure" in bad_token.msg'
    - '"Fail JSON AWS" in bad_token.msg'
    - '"error" in bad_token'
    - '"code" in bad_token.error'
    - bad_token.error.code == 'AuthFailure'
    - '"message" in bad_token.error'

# Run an additional authentication request to ensure that we're out of any
# deny-lists caused by bad requests
- name: 'Perform valid authentication to avoid deny-listing'
  example_module:
    aws_region: '{{ aws_region }}'
    aws_access_key: '{{ aws_access_key }}'
    aws_secret_key: '{{ aws_secret_key }}'
    aws_security_token: '{{ security_token }}'
  register: anti_denylist
  until: anti_denylist is success
  retries: 5
  delay: 5

---
- name: Wrap tests in block to set module defaults
  module_defaults:
    group/aws:
      access_key: "{{ aws_access_key }}"
      secret_key: "{{ aws_secret_key }}"
      session_token: "{{ security_token | default(omit) }}"
      region: "{{ aws_region }}"
  block:
    - name: New instance with an extra block device
      amazon.aws.ec2_instance:
        state: running
        name: "{{ resource_prefix }}-test-ebs-vols"
        image_id: "{{ ec2_ami_id }}"
        vpc_subnet_id: "{{ testing_subnet_b.subnet.id }}"
        volumes:
          - device_name: /dev/sdb
            ebs:
              volume_size: 20
              delete_on_termination: true
              volume_type: standard
        tags:
          TestId: "{{ ec2_instance_tag_TestId }}"
        instance_type: "{{ ec2_instance_type }}"
        wait: true
      register: block_device_instances

    - name: Gather instance info
      amazon.aws.ec2_instance_info:
        filters:
          tag:Name: "{{ resource_prefix }}-test-ebs-vols"
      register: block_device_instances_info

    - name: Check device name
      ansible.builtin.assert:
        that:
          - block_device_instances is not failed
          - block_device_instances is changed
          - instance_info.block_device_mappings | length == 2
          - '"/dev/sdb" in instance_info.block_device_mappings | map(attribute="device_name")'
      vars:
        instance_info: "{{ block_device_instances_info.instances[0] }}"

    - name: New instance with an extra block device (check mode)
      amazon.aws.ec2_instance:
        state: present
        name: "{{ resource_prefix }}-test-ebs-vols-checkmode"
        image_id: "{{ ec2_ami_id }}"
        vpc_subnet_id: "{{ testing_subnet_b.subnet.id }}"
        volumes:
          - device_name: /dev/sdb
            ebs:
              volume_size: 20
              delete_on_termination: true
              volume_type: standard
        tags:
          TestId: "{{ ec2_instance_tag_TestId }}"
        instance_type: "{{ ec2_instance_type }}"
      check_mode: true

    - name: Fact presented ec2 instance
      amazon.aws.ec2_instance_info:
        filters:
          tag:Name: "{{ resource_prefix }}-test-ebs-vols"
      register: presented_instance_fact

    - name: Fact checkmode ec2 instance
      amazon.aws.ec2_instance_info:
        filters:
          tag:Name: "{{ resource_prefix }}-test-ebs-vols-checkmode"
      register: checkmode_instance_fact

    - name: Confirm instance was created without check mode
      ansible.builtin.assert:
        that:
          - presented_instance_fact.instances | length > 0

    - name: Confirm instance was not created with check mode
      ansible.builtin.assert:
        that:
          - checkmode_instance_fact.instances | length == 0

    - name: Terminate instances
      amazon.aws.ec2_instance:
        state: absent
        instance_ids: "{{ block_device_instances.instance_ids }}"

    - name: New instance with an extra block device - gp3 volume_type and throughput
      amazon.aws.ec2_instance:
        state: running
        name: "{{ resource_prefix }}-test-ebs-vols-gp3"
        image_id: "{{ ec2_ami_id }}"
        vpc_subnet_id: "{{ testing_subnet_b.subnet.id }}"
        volumes:
          - device_name: /dev/sdb
            ebs:
              volume_size: 20
              delete_on_termination: true
              volume_type: gp3
              throughput: 500
        tags:
          TestId: "{{ ec2_instance_tag_TestId }}"
        instance_type: "{{ ec2_instance_type }}"
        wait: true
      register: block_device_instances_gp3

    - name: Check updated device configuration
      ansible.builtin.assert:
        that:
          - block_device_instances_gp3 is not failed
          - block_device_instances_gp3 is changed
          - instance_info.block_device_mappings | length == 2
          - '"/dev/sdb" in instance_info.block_device_mappings | map(attribute="device_name")'
          - block_device_spec | length == 1
          - '"DeviceName" in block_device_spec[0]'
          - '"Ebs" in block_device_spec[0]'
          - block_device_spec[0].DeviceName == "/dev/sdb"
          - block_device_spec[0].Ebs.VolumeType == "gp3"
          - block_device_spec[0].Ebs.VolumeSize == 20
          - block_device_spec[0].Ebs.Throughput == 500
      vars:
        instance_info: "{{ block_device_instances_gp3.instances[0] }}"
        block_device_spec: "{{ block_device_instances_gp3.spec.BlockDeviceMappings }}"

---
- hosts: 127.0.0.1
  connection: local
  gather_facts: no
  environment: "{{ ansible_test.environment }}"
  tasks:

    - module_defaults:
        group/aws:
          access_key: '{{ aws_access_key }}'
          secret_key: '{{ aws_secret_key }}'
          session_token: '{{ security_token | default(omit) }}'
          region: '{{ aws_region }}'
      block:

        # Create VPC, subnet, security group, and find image_id to create instance

        - include_tasks: tasks/setup.yml

        # Create new host, refresh inventory
        - name: create a new host (1/3)
          ec2_instance:
            image_id: '{{ image_id }}'
            name: '{{ resource_prefix }}_1'
            tags:
              tag_instance1: foo
            instance_type: t2.micro
            security_groups: '{{ sg_id }}'
            vpc_subnet_id: '{{ subnet_id }}'
            wait: no

        - name: create a new host (2/3)
          ec2_instance:
            image_id: '{{ image_id }}'
            name: '{{ resource_prefix }}_2'
            tags:
              tag_instance2: bar
            instance_type: t2.micro
            security_groups: '{{ sg_id }}'
            vpc_subnet_id: '{{ subnet_id }}'
            wait: no

        - name: create a new host (3/3)
          ec2_instance:
            image_id: '{{ image_id }}'
            name: '{{ resource_prefix }}_3'
            tags:
              tag_instance3: bar
            instance_type: t2.micro
            security_groups: '{{ sg_id }}'
            vpc_subnet_id: '{{ subnet_id }}'
            wait: no

        - meta: refresh_inventory

        - name: assert the keyed groups and groups from constructed config were added to inventory and composite var added to hostvars
          assert:
            that:
              # There are 9 groups: all, ungrouped, aws_ec2, sg keyed group, 3 tag keyed group (one per tag), arch keyed group, constructed group
              - "groups['all'] | length == 2"
              - "'{{ resource_prefix }}_1' in groups['all']"
              - "'{{ resource_prefix }}_2' in groups['all']"
              - "not ('{{ resource_prefix }}_3' in groups['all'])"

---
- block:
    ## Setup an ELB for testing changing one thing at a time
    - name: Create ELB
      amazon.aws.elb_classic_lb:
        name: "{{ elb_name }}"
        state: present
        # zones: ['{{ availability_zone_a }}', '{{ availability_zone_b }}']
        listeners: "{{ default_listeners }}"
        health_check: "{{ default_health_check }}"
        wait: true
        scheme: internal
        subnets: ["{{ subnet_a }}", "{{ subnet_b }}"]
        security_group_ids: ["{{ sg_a }}"]
        tags: "{{ default_tags }}"
        cross_az_load_balancing: true
        idle_timeout: "{{ default_idle_timeout }}"
        connection_draining_timeout: "{{ default_drain_timeout }}"
        access_logs:
          interval: "{{ default_logging_interval }}"
          s3_location: "{{ s3_logging_bucket_a }}"
          s3_prefix: "{{ default_logging_prefix }}"
          enabled: true
      register: result

    - name: Verify that simple parameters were set
      ansible.builtin.assert:
        that:
          - result is changed
          - result.elb.status == "created"
          - availability_zone_a in result.elb.zones
          - availability_zone_b in result.elb.zones
          - subnet_a in result.elb.subnets
          - subnet_b in result.elb.subnets
          - default_listener_tuples[0] in result.elb.listeners
          - default_listener_tuples[1] in result.elb.listeners
          - sg_a in result.elb.security_group_ids
          - sg_b not in result.elb.security_group_ids
          - sg_c not in result.elb.security_group_ids
          - result.elb.health_check.healthy_threshold == default_health_check['healthy_threshold']
          - result.elb.health_check.interval == default_health_check['interval']
          - result.elb.health_check.target == default_health_check_target
          - result.elb.health_check.timeout == default_health_check['response_timeout']
          - result.elb.health_check.unhealthy_threshold == default_health_check['unhealthy_threshold']
          - result.elb.tags == default_tags
          - result.elb.cross_az_load_balancing == 'yes'
          - result.elb.idle_timeout == default_idle_timeout
          - result.elb.connection_draining_timeout == default_drain_timeout
          - result.elb.proxy_policy == None
          - result.load_balancer.load_balancer_attributes.access_log.emit_interval == default_logging_interval
          - result.load_balancer.load_balancer_attributes.access_log.s3_bucket_name == s3_logging_bucket_a
          - result.load_balancer.load_balancer_attributes.access_log.s3_bucket_prefix == default_logging_prefix
          - result.load_balancer.load_balancer_attributes.access_log.enabled == True

    ## AZ / Subnet changes are tested in wth the public/internal tests
    ## because they depend on the scheme of the LB

    - ansible.builtin.include_tasks: simple_securitygroups.yml
    - ansible.builtin.include_tasks: simple_listeners.yml
    - ansible.builtin.include_tasks: simple_healthcheck.yml
    - ansible.builtin.include_tasks: simple_tags.yml
    - ansible.builtin.include_tasks: simple_cross_az.yml
    - ansible.builtin.include_tasks: simple_idle_timeout.yml
    - ansible.builtin.include_tasks: simple_draining_timeout.yml
    - ansible.builtin.include_tasks: simple_proxy_policy.yml
    - ansible.builtin.include_tasks: simple_stickiness.yml
    - ansible.builtin.include_tasks: simple_instances.yml
    - ansible.builtin.include_tasks: simple_logging.yml
  always:
    # ============================================================
    - name: remove the test load balancer
      amazon.aws.elb_classic_lb:
        name: "{{ elb_name }}"
        state: absent
        wait: true
      register: result
      ignore_errors: true

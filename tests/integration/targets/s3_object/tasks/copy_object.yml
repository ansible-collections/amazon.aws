---
- vars:
    withmeta_data:
      something: exists
      version: "1.0.2"
    metacopy_data:
      name: metacopy
      version: "1.0.3"
    another_metadata:
      another: meta
      mode: copy
  block:
    - name: define bucket name used for tests
      ansible.builtin.set_fact:
        copy_bucket:
          src: "{{ bucket_name }}-copysrc"
          dst: "{{ bucket_name }}-copydst"

    - name: create bucket source
      amazon.aws.s3_bucket:
        name: "{{ copy_bucket.src }}"
        state: present

    - name: create bucket destination
      amazon.aws.s3_bucket:
        name: "{{ copy_bucket.dst }}"
        state: present

    - name: Create content
      ansible.builtin.set_fact:
        content: "{{ lookup('password', '/dev/null chars=ascii_letters,digits,hexdigits,punctuation') }}"

    - name: Put a content in the source bucket
      amazon.aws.s3_object:
        bucket: "{{ copy_bucket.src }}"
        mode: put
        content: "{{ content }}"
        object: source.txt
        tags:
          ansible_release: 2.0.0
          ansible_team: cloud
      retries: 3
      delay: 3
      register: put_result
      until:
        - '"not found" not in put_result.msg'
      ignore_errors: true

    - name: Copy the content of the source bucket into dest bucket
      amazon.aws.s3_object:
        bucket: "{{ copy_bucket.dst }}"
        mode: copy
        object: destination.txt
        copy_src:
          bucket: "{{ copy_bucket.src }}"
          object: source.txt
      retries: 3
      delay: 3
      register: put_result
      until:
        - '"not found" not in put_result.msg'
      ignore_errors: true

    - name: Get the content copied into {{ copy_bucket.dst }}
      amazon.aws.s3_object:
        bucket: "{{ copy_bucket.dst }}"
        mode: getstr
        object: destination.txt
      register: copy_content

    - name: assert that the content is matching with the source
      ansible.builtin.assert:
        that:
          - content == copy_content.contents

    - name: Get the download url for object copied into {{ copy_bucket.dst }}
      amazon.aws.s3_object:
        bucket: "{{ copy_bucket.dst }}"
        mode: geturl
        object: destination.txt
      register: copy_url

    - name: assert that tags are the same in the destination bucket
      ansible.builtin.assert:
        that:
          - put_result.tags == copy_url.tags

    - name: Copy the same content from the source bucket into dest bucket (idempotency)
      amazon.aws.s3_object:
        bucket: "{{ copy_bucket.dst }}"
        mode: copy
        object: destination.txt
        copy_src:
          bucket: "{{ copy_bucket.src }}"
          object: source.txt
      register: copy_idempotency

    - name: assert that no change was made
      ansible.builtin.assert:
        that:
          - copy_idempotency is not changed
          - copy_idempotency.msg == 'ETag from source and destination are the same'

    - name: Copy object with tags
      amazon.aws.s3_object:
        bucket: "{{ copy_bucket.dst }}"
        mode: copy
        object: destination.txt
        tags:
          ansible_release: 2.0.1
        copy_src:
          bucket: "{{ copy_bucket.src }}"
          object: source.txt
      register: copy_result

    - name: assert that tags were updated
      ansible.builtin.assert:
        that:
          - copy_result is changed
          - copy_result.tags['ansible_release'] == '2.0.1'

    - name: Copy object with tags (idempotency)
      amazon.aws.s3_object:
        bucket: "{{ copy_bucket.dst }}"
        mode: copy
        object: destination.txt
        tags:
          ansible_release: 2.0.1
        copy_src:
          bucket: "{{ copy_bucket.src }}"
          object: source.txt
      register: copy_result

    - name: assert that no change was made
      ansible.builtin.assert:
        that:
          - copy_result is not changed

    - name: Copy from unexisting key should not succeed
      amazon.aws.s3_object:
        bucket: "{{ copy_bucket.dst }}"
        mode: copy
        object: missing_key.txt
        copy_src:
          bucket: "{{ copy_bucket.src }}"
          object: this_key_does_not_exist.txt
      register: result

    - name: Validate result when copying missing key
      ansible.builtin.assert:
        that:
          - result is not changed
          - result.msg == "Key this_key_does_not_exist.txt does not exist in bucket "+copy_bucket.src+"."

    # Copy with metadata
    - name: Set fact for bucket name
      ansible.builtin.set_fact:
        bucket_name: "{{ copy_bucket.dst }}"

    - name: Create test bucket
      amazon.aws.s3_bucket:
        name: "{{ bucket_name }}"
        state: present

    - name: Create test object
      amazon.aws.s3_object:
        bucket: "{{ bucket_name }}"
        object: nometa
        mode: put
        content: "some content"

    - name: Copy and add metadata
      amazon.aws.s3_object:
        bucket: "{{ bucket_name }}"
        object: metacopy
        mode: copy
        copy_src:
          bucket: "{{ bucket_name }}"
          object: nometa
        metadata: "{{ metacopy_data }}"

    - name: Create test object with metadata
      amazon.aws.s3_object:
        bucket: "{{ bucket_name }}"
        object: withmeta
        mode: put
        content: "another content"
        metadata: "{{ withmeta_data }}"

    - name: Copy and preserve metadata
      amazon.aws.s3_object:
        bucket: "{{ bucket_name }}"
        object: copywithmeta
        mode: copy
        copy_src:
          bucket: "{{ bucket_name }}"
          object: withmeta

    - name: Get objects info
      amazon.aws.s3_object_info:
        bucket_name: "{{ bucket_name }}"
        object_name: "{{ item }}"
      loop:
        - nometa
        - metacopy
        - withmeta
        - copywithmeta
      register: obj_info

    - assert:
        that:
          - obj_info.results | selectattr('item', 'equalto', 'nometa') | map(attribute='object_info.0.object_data.metadata') | first == {}
          - obj_info.results | selectattr('item', 'equalto', 'withmeta') | map(attribute='object_info.0.object_data.metadata') | first == withmeta_data
          - obj_info.results | selectattr('item', 'equalto', 'metacopy') | map(attribute='object_info.0.object_data.metadata') | first == metacopy_data
          - obj_info.results | selectattr('item', 'equalto', 'copywithmeta') | map(attribute='object_info.0.object_data.metadata') | first == withmeta_data

    # Validate copy idempotency with metadata
    - name: Copy same object including metadata (check_mode=true)
      amazon.aws.s3_object:
        bucket: "{{ bucket_name }}"
        mode: copy
        object: copywithmeta
        copy_src:
          bucket: "{{ bucket_name }}"
          object: withmeta
        metadata: "{{ another_metadata }}"
      register: copy_with_metadata_checkmode
      check_mode: true

    - name: Get objects info
      amazon.aws.s3_object_info:
        bucket_name: "{{ bucket_name }}"
        object_name: copywithmeta
      register: obj_info

    - name: Validate that objects module reported change but metadata was not updated
      ansible.builtin.assert:
        that:
          - copy_with_metadata_checkmode is changed
          - obj_info.object_info.0.object_data.metadata == withmeta_data

    - name: Copy same object including metadata
      amazon.aws.s3_object:
        bucket: "{{ bucket_name }}"
        mode: copy
        object: copywithmeta
        copy_src:
          bucket: "{{ bucket_name }}"
          object: withmeta
        metadata: "{{ another_metadata }}"
      register: copy_with_metadata

    - name: Get objects info
      amazon.aws.s3_object_info:
        bucket_name: "{{ bucket_name }}"
        object_name: copywithmeta
      register: obj_info

    - name: Validate that objects module reported change and metadata was updated
      ansible.builtin.assert:
        that:
          - copy_with_metadata is changed
          - obj_info.object_info.0.object_data.metadata == another_metadata

  always:
    - ansible.builtin.include_tasks: delete_bucket.yml
      with_items:
        - "{{ copy_bucket.dst }}"
        - "{{ copy_bucket.src }}"

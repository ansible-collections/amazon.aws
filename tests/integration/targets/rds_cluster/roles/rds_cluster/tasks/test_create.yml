---
- block:
  - name: Ensure the resource doesn't exist
    rds_cluster:
      id: "{{ cluster_id }}"
      state: absent
      engine: "{{ engine}}"
      username: "{{ username }}"
      password: "{{ password }}"
      skip_final_snapshot: True
    register: _result_delete_db_cluster

  - assert:
      that:
        - not _result_delete_db_cluster.changed
    ignore_errors: yes

  - name: Get info of all existing clusters
    rds_cluster_info:
    register: _result_cluster_info
      
  - assert:
      that:
      - _result_cluster_info is successful

  - name: Create minimal aurora cluster in default VPC and default subnet group (CHECK MODE)
    rds_cluster:
      engine: "{{ engine }}"
      username: "{{ username }}"
      password: "{{ password }}"
      cluster_id: "{{ cluster_id }}"
      tags: "{{ tags_create }}"
    register: _result_create_db_cluster
    check_mode: true

  - assert:
      that:
      - _result_create_db_cluster.changed

  - name: Create minimal aurora cluster in default VPC and default subnet group
    rds_cluster:
      engine: "{{ engine }}"
      username: "{{ username }}"
      password: "{{ password }}"
      cluster_id: "{{ cluster_id }}"
      tags: "{{ tags_create }}"
    register: _result_create_db_cluster

  - assert:
      that:
      - _result_create_db_cluster.changed
      - "'allocated_storage' in _result_create_db_cluster"
      - _result_create_db_cluster.allocated_storage == 1
      - "'cluster_create_time' in _result_create_db_cluster"
      - _result_create_db_cluster.copy_tags_to_snapshot == false
      - "'db_cluster_arn' in _result_create_db_cluster"
      - "'db_cluster_identifier' in _result_create_db_cluster"
      - _result_create_db_cluster.db_cluster_identifier == "{{ cluster_id }}"
      - "'db_cluster_parameter_group' in _result_create_db_cluster"
      - "'db_cluster_resource_id' in _result_create_db_cluster"
      - "'endpoint' in _result_create_db_cluster"
      - "'engine' in _result_create_db_cluster"
      - _result_create_db_cluster.engine == "{{ engine }}"
      - "'engine_mode' in _result_create_db_cluster"
      - _result_create_db_cluster.engine_mode == "provisioned"
      - "'engine_version' in _result_create_db_cluster"
      - "'master_username' in _result_create_db_cluster"
      - _result_create_db_cluster.master_username == "{{ username }}"
      - "'port' in _result_create_db_cluster"
      - "_result_create_db_cluster.port == {{ port }}"
      - "'status' in _result_create_db_cluster"
      - _result_create_db_cluster.status == 'available'
      - _result_create_db_cluster.storage_encrypted == false
      - "'tags' in _result_create_db_cluster"
      - _result_create_db_cluster.tags | length == 2
      - _result_create_db_cluster.tags["Created_By"] == "{{ tags_create["Created_By"]}}"
      - _result_create_db_cluster.tags["Name"] == "{{ tags_create["Name"]}}"
      - "'vpc_security_groups' in _result_create_db_cluster"
      
  - name: Get info of the existing cluster
    rds_cluster_info:
      cluster_id: "{{ cluster_id }}"
    register: result_cluster_info
      
  - assert:
      that:
      - result_cluster_info is successful

  - name: Create minimal aurora cluster in default VPC and default subnet group - idempotence (CHECK MODE)
    rds_cluster:
      engine: "{{ engine }}"
      username: "{{ username }}"
      password: "{{ password }}"
      cluster_id: "{{ cluster_id }}"
      tags: "{{ tags_create }}"
    register: _result_create_db_cluster
    check_mode: true

  - assert:
      that:
      - not _result_create_db_cluster.changed

  - name: Create minimal aurora cluster in default VPC and default subnet group - idempotence
    rds_cluster:
      engine: "{{ engine }}"
      username: "{{ username }}"
      password: "{{ password }}"
      cluster_id: "{{ cluster_id }}"
      tags: "{{ tags_create }}"
    register: _result_create_db_cluster

  - assert:
      that:
      - not _result_create_db_cluster.changed

  always:
  - name: Delete DB cluster without creating a final snapshot
    rds_cluster:
      state: absent
      cluster_id: "{{ cluster_id }}"
      skip_final_snapshot: True
    ignore_errors: true

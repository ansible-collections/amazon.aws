- module_defaults:
    group/aws:
      region: '{{ aws_region }}'
      access_key: '{{ aws_access_key }}'
      secret_key: '{{ aws_secret_key }}'
      session_token: '{{ security_token | default(omit) }}'
  block:
  - name: Ensure the resource doesn't exist
    rds_cluster:
      id: '{{ cluster_id }}'
      state: absent
      engine: '{{ engine}}'
      username: '{{ username }}'
      password: '{{ password }}'
      skip_final_snapshot: true
    register: _result_delete_db_cluster

  - assert:
      that:
      - not _result_delete_db_cluster.changed
    ignore_errors: yes

  # Follow up to Aurora Serverless V2 release, we use an aurora-mysql to
  # avoid the following error when we try to adjust the port:
  # You currently can't modify EndpointPort with Aurora Serverless.
  - name: Create an Aurora-MySQL DB cluster
    rds_cluster:
      id: '{{ cluster_id }}'
      state: present
      engine: aurora-mysql
      engine_mode: provisioned
      username: '{{ username }}'
      password: '{{ password }}'
    register: _result_create_source_db_cluster

  - assert:
      that:
      - _result_create_source_db_cluster.changed
      - _result_create_source_db_cluster.changed
      - "'allocated_storage' in _result_create_source_db_cluster"
      - _result_create_source_db_cluster.allocated_storage == 1
      - "'cluster_create_time' in _result_create_source_db_cluster"
      - _result_create_source_db_cluster.copy_tags_to_snapshot == false
      - "'db_cluster_arn' in _result_create_source_db_cluster"
      - _result_create_source_db_cluster.db_cluster_identifier == '{{ cluster_id }}'
      - "'db_cluster_parameter_group' in _result_create_source_db_cluster"
      - "'db_cluster_resource_id' in _result_create_source_db_cluster"
      - "'endpoint' in _result_create_source_db_cluster"
      - "'engine' in _result_create_source_db_cluster"
      - _result_create_source_db_cluster.engine == "aurora-mysql"
      - "'engine_mode' in _result_create_source_db_cluster"
      - _result_create_source_db_cluster.engine_mode == "provisioned"
      - "'engine_version' in _result_create_source_db_cluster"
      - "'master_username' in _result_create_source_db_cluster"
      - _result_create_source_db_cluster.master_username == "{{ username }}"
      - "'port' in _result_create_source_db_cluster"
      - _result_create_source_db_cluster.port == {{ port }}
      - "'status' in _result_create_source_db_cluster"
      - _result_create_source_db_cluster.status == "available"
      - "'tags' in _result_create_source_db_cluster"
      - "'vpc_security_groups' in _result_create_source_db_cluster"

  - name: Modify DB cluster password
    rds_cluster:
      id: '{{ cluster_id }}'
      state: present
      password: '{{ new_password }}'
      force_update_password: true
      apply_immediately: true
    register: _result_modify_password

  - assert:
      that:
      - _result_modify_password.changed
      - "'allocated_storage' in _result_modify_password"
      - _result_modify_password.allocated_storage == 1
      - "'cluster_create_time' in _result_modify_password"
      - _result_modify_password.copy_tags_to_snapshot == false
      - "'db_cluster_arn' in _result_modify_password"
      - _result_modify_password.db_cluster_identifier == '{{ cluster_id }}'
      - "'db_cluster_parameter_group' in _result_modify_password"
      - "'db_cluster_resource_id' in _result_modify_password"
      - "'endpoint' in _result_modify_password"
      - "'engine' in _result_modify_password"
      - _result_modify_password.engine == "aurora-mysql"
      - "'engine_mode' in _result_modify_password"
      - _result_modify_password.engine_mode == "provisioned"
      - "'engine_version' in _result_modify_password"
      - "'master_username' in _result_modify_password"
      - _result_modify_password.master_username == "{{ username }}"
      - "'port' in _result_create_source_db_cluster"
      - _result_modify_password.port == {{ port }}
      - "'status' in _result_modify_password"
      - _result_modify_password.status == "available"
      - "'tags' in _result_modify_password"
      - "'vpc_security_groups' in _result_modify_password"

  - name: Modify DB cluster port
    rds_cluster:
      id: '{{ cluster_id }}'
      state: present
      port: '{{ new_port }}'
    register: _result_modify_port

  - assert:
      that:
      - _result_modify_port.changed
      - "'allocated_storage' in _result_modify_port"
      - _result_modify_port.allocated_storage == 1
      - "'cluster_create_time' in _result_modify_port"
      - _result_modify_port.copy_tags_to_snapshot == false
      - "'db_cluster_arn' in _result_modify_port"
      - _result_modify_port.db_cluster_identifier == '{{ cluster_id }}'
      - "'db_cluster_parameter_group' in _result_modify_port"
      - "'db_cluster_resource_id' in _result_modify_port"
      - "'endpoint' in _result_modify_port"
      - "'engine' in _result_modify_port"
      - _result_modify_port.engine == "aurora-mysql"
      - "'engine_mode' in _result_modify_port"
      - _result_modify_port.engine_mode == "provisioned"
      - "'engine_version' in _result_modify_port"
      - "'master_username' in _result_modify_port"
      - _result_modify_port.master_username == "{{ username }}"
      - "'port' in _result_modify_port"
      - _result_modify_port.port == {{ new_port }}
      - "'status' in _result_modify_port"
      - _result_modify_port.status == "available"
      - "'tags' in _result_modify_port"
      - "'vpc_security_groups' in _result_modify_port"

  - name: Modify DB cluster identifier
    rds_cluster:
      id: '{{ cluster_id }}'
      state: present
      purge_tags: false
      new_cluster_id: '{{ new_cluster_id }}'
      apply_immediately: true
    register: _result_modify_id

  - assert:
      that:
      - _result_modify_id.changed
      - "'allocated_storage' in _result_modify_id"
      - _result_modify_id.allocated_storage == 1
      - "'cluster_create_time' in _result_modify_id"
      - _result_modify_id.copy_tags_to_snapshot == false
      - "'db_cluster_arn' in _result_modify_id"
      - _result_modify_id.db_cluster_identifier == '{{ new_cluster_id }}'
      - "'db_cluster_parameter_group' in _result_modify_id"
      - "'db_cluster_resource_id' in _result_modify_id"
      - "'endpoint' in _result_modify_id"
      - "'engine' in _result_modify_id"
      - _result_modify_id.engine == "aurora-mysql"
      - "'engine_mode' in _result_modify_id"
      - _result_modify_id.engine_mode == "provisioned"
      - "'engine_version' in _result_modify_id"
      - "'master_username' in _result_modify_id"
      - _result_modify_id.master_username == "{{ username }}"
      - "'port' in _result_modify_id"
      - _result_modify_id.port == {{ new_port }}
      - "'status' in _result_modify_id"
      - _result_modify_id.status == "available"
      - "'tags' in _result_modify_id"
      - "'vpc_security_groups' in _result_modify_id"

  - name: Check if DB cluster parameter group exists
    command: aws rds describe-db-cluster-parameter-groups --db-cluster-parameter-group-name
      {{ new_db_parameter_group_name }}
    environment:
      AWS_ACCESS_KEY_ID: '{{ aws_access_key }}'
      AWS_SECRET_ACCESS_KEY: '{{ aws_secret_key }}'
      AWS_SESSION_TOKEN: "{{ security_token | default('') }}"
      AWS_DEFAULT_REGION: '{{ aws_region }}'
    register: _result_check_db_parameter_group
    ignore_errors: true
    changed_when: _result_check_db_parameter_group.rc == 0

  - name: Create DB cluster parameter group if not exists
    command: aws rds create-db-cluster-parameter-group --db-cluster-parameter-group-name
      {{ new_db_parameter_group_name }} --db-parameter-group-family aurora-mysql8.0 --description
      "Test DB cluster parameter group"
    environment:
      AWS_ACCESS_KEY_ID: '{{ aws_access_key }}'
      AWS_SECRET_ACCESS_KEY: '{{ aws_secret_key }}'
      AWS_SESSION_TOKEN: "{{ security_token | default('') }}"
      AWS_DEFAULT_REGION: '{{ aws_region }}'
    register: _result_create_db_parameter_group
    when: _result_check_db_parameter_group.rc != 0

  - name: Modify DB cluster parameter group
    rds_cluster:
      id: '{{ new_cluster_id }}'
      state: present
      db_cluster_parameter_group_name: '{{ new_db_parameter_group_name }}'
      apply_immediately: true
    register: _result_modify_db_parameter_group_name

  - assert:
      that:
      - _result_modify_db_parameter_group_name.changed
      - "'allocated_storage' in _result_modify_db_parameter_group_name"
      - _result_modify_db_parameter_group_name.allocated_storage == 1
      - "'cluster_create_time' in _result_modify_db_parameter_group_name"
      - _result_modify_db_parameter_group_name.copy_tags_to_snapshot == false
      - "'db_cluster_arn' in _result_modify_db_parameter_group_name"
      - _result_modify_db_parameter_group_name.db_cluster_identifier == '{{ new_cluster_id
        }}'
      - "'db_cluster_parameter_group' in _result_modify_db_parameter_group_name"
      - "'db_cluster_resource_id' in _result_modify_db_parameter_group_name"
      - "'endpoint' in _result_modify_db_parameter_group_name"
      - "'engine' in _result_modify_db_parameter_group_name"
      - _result_modify_db_parameter_group_name.engine == "aurora-mysql"
      - "'engine_mode' in _result_modify_db_parameter_group_name"
      - _result_modify_db_parameter_group_name.engine_mode == "provisioned"
      - "'engine_version' in _result_modify_db_parameter_group_name"
      - "'master_username' in _result_modify_db_parameter_group_name"
      - _result_modify_db_parameter_group_name.master_username == "{{ username }}"
      - "'port' in _result_modify_db_parameter_group_name"
      - _result_modify_db_parameter_group_name.db_cluster_parameter_group == "{{ new_db_parameter_group_name
        }}"
      - "'status' in _result_modify_db_parameter_group_name"
      - _result_modify_db_parameter_group_name.status == "available"
      - "'tags' in _result_modify_db_parameter_group_name"
      - "'vpc_security_groups' in _result_modify_db_parameter_group_name"

  - name: Delete DB cluster without creating a final snapshot (CHECK MODE)
    rds_cluster:
      state: absent
      cluster_id: '{{ new_cluster_id }}'
      skip_final_snapshot: true
    register: _result_delete_cluster
    check_mode: true

  - assert:
      that:
      - _result_delete_cluster.changed

  - name: Delete DB cluster without creating a final snapshot
    rds_cluster:
      state: absent
      cluster_id: '{{ new_cluster_id }}'
      skip_final_snapshot: true
    register: _result_delete_cluster

  - assert:
      that:
      - _result_delete_cluster.changed

  - name: Delete DB cluster without creating a final snapshot (idempotence)
    rds_cluster:
      state: absent
      cluster_id: '{{ new_cluster_id }}'
      skip_final_snapshot: true
    register: _result_delete_cluster

  - assert:
      that:
      - not _result_delete_cluster.changed

  always:
  - name: Delete DB cluster without creating a final snapshot
    rds_cluster:
      state: absent
      cluster_id: '{{ cluster_id }}'
      skip_final_snapshot: true
    ignore_errors: true

  - name: Delete cluster parameter group
    command: aws rds delete-db-cluster-parameter-group --db-cluster-parameter-group-name
      {{ new_db_parameter_group_name }}
    environment:
      AWS_ACCESS_KEY_ID: '{{ aws_access_key }}'
      AWS_SECRET_ACCESS_KEY: '{{ aws_secret_key }}'
      AWS_SESSION_TOKEN: "{{ security_token | default('') }}"
      AWS_DEFAULT_REGION: '{{ aws_region }}'
    ignore_errors: true

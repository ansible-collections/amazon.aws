---
# tasks file for test_ec2_ami_info
    # ============================================================

    # SETUP: vpc, ec2 key pair, subnet, security group, ec2 instance, snapshot
    - name: set aws_connection_info fact
      set_fact:
        aws_connection_info: &aws_connection_info
          aws_region: '{{aws_region}}'
          aws_access_key: '{{aws_access_key}}'
          aws_secret_key: '{{aws_secret_key}}'
          security_token: '{{security_token}}'
      no_log: yes

    # ============================================================

    - name: gather info about the image
      ec2_ami_info:
        image_ids: '{{ ec2_region_images[ec2_region] }}'
        <<: *aws_connection_info
      register: ami_info_result
      ignore_errors: true

    - name: assert that the right image was found
      assert:
        that:
          - "ami_info_result.images[0].image_id == '{{ ec2_region_images[ec2_region] }}'"

    # ============================================================

    - name: gather info about the image using boolean filter
      ec2_ami_info:
        image_ids: '{{ ec2_region_images[ec2_region] }}'
        filters:
          is-public: true
        <<: *aws_connection_info
        register: ami_info_result
        ignore_errors: true

    - name: assert that the right image was found
      assert:
        that:
          - "ami_info_result.images[0].image_id == '{{ ec2_region_images[ec2_region] }}'"

    # ============================================================

    - name: gather info about the image using integer filter
      ec2_ami_info:
        image_ids: '{{ ec2_region_images[ec2_region] }}'
        filters:
          owner-id: 137112412989
        <<: *aws_connection_info
        register: ami_info_result
        ignore_errors: true

    - name: assert that the right image was found
      assert:
        that:
          - "ami_info_result.images[0].image_id == '{{ ec2_region_images[ec2_region] }}'"
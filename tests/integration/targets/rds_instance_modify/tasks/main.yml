- name: rds_instance / modify integration tests
  collections:
  - community.aws
  module_defaults:
    group/aws:
      access_key: '{{ aws_access_key }}'
      secret_key: '{{ aws_secret_key }}'
      session_token: '{{ security_token | default(omit) }}'
      region: '{{ aws_region }}'
  block:
  - name: Ensure the resource doesn't exist
    rds_instance:
      id: '{{ instance_id }}'
      state: absent
      skip_final_snapshot: true
    register: result

  - assert:
      that:
      - not result.changed
    ignore_errors: yes

  - name: Create a mariadb instance
    rds_instance:
      id: '{{ instance_id }}'
      state: present
      engine: mariadb
      engine_version: '{{ mariadb_engine_version }}'
      allow_major_version_upgrade: true
      username: '{{ username }}'
      password: '{{ password }}'
      db_instance_class: '{{ db_instance_class }}'
      allocated_storage: '{{ allocated_storage }}'
      tags:
        Name: '{{ instance_id }}'
        Created_by: Ansible rds_instance tests
    register: result

  - assert:
      that:
      - result.changed
      - result.db_instance_identifier == '{{ instance_id }}'

  - name: Create a DB instance with an invalid engine
    rds_instance:
      id: '{{ instance_id }}'
      state: present
      engine: thisisnotavalidengine
      username: '{{ username }}'
      password: '{{ password }}'
      db_instance_class: '{{ db_instance_class }}'
      allocated_storage: '{{ allocated_storage }}'
    register: result
    ignore_errors: true

  - assert:
      that:
      - result.failed
      - '"value of engine must be one of" in result.msg'

  - name: Add IAM roles to mariadb (should fail - iam roles not supported for mariadb)
    rds_instance:
      id: '{{ instance_id }}'
      state: present
      engine: mariadb
      engine_version: '{{ mariadb_engine_version }}'
      allow_major_version_upgrade: true
      username: '{{ username }}'
      password: '{{ password }}'
      db_instance_class: '{{ db_instance_class }}'
      allocated_storage: '{{ allocated_storage }}'
      iam_roles:
      - role_arn: my_role
        feature_name: my_feature
    register: result
    ignore_errors: true

  - assert:
      that:
      - result.failed
      - '"is not valid for adding IAM roles" in result.msg'

    # TODO: test modifying db_subnet_group_name, db_security_groups, db_parameter_group_name, option_group_name,
    # monitoring_role_arn, monitoring_interval, domain, domain_iam_role_name, cloudwatch_logs_export_configuration

    # ------------------------------------------------------------------------------------------
  - name: Modify the storage type without immediate application - check_mode
    rds_instance:
      id: '{{ instance_id }}'
      state: present
      storage_type: gp3
      apply_immediately: false
    register: result
    check_mode: yes

  - assert:
      that:
      - result.changed
      - 'result.storage_type == "gp2"'

  - name: Modify the storage type without immediate application
    rds_instance:
      id: '{{ instance_id }}'
      state: present
      storage_type: gp3
      apply_immediately: false
    register: result

  - assert:
      that:
      - result.changed
      - 'result.pending_modified_values.storage_type == "gp3"'
      - 'result.storage_type == "gp2"'

  - name: Modify the storage type without immediate application - idempotent
    rds_instance:
      id: '{{ instance_id }}'
      state: present
      storage_type: gp3
      apply_immediately: false
    register: result
    check_mode: yes

  - assert:
      that:
      - not result.changed
      - 'result.pending_modified_values.storage_type == "gp3"'
      - 'result.storage_type == "gp2"'

  - name: Modify the storage type back to gp2 without immediate application
    rds_instance:
      id: '{{ instance_id }}'
      state: present
      storage_type: gp2
      apply_immediately: false
    register: result

  - assert:
      that:
      - result.changed
      - 'result.pending_modified_values == {}'
      - 'result.storage_type == "gp2"'

  - name: Modify the instance name without immediate application - check_mode
    rds_instance:
      id: '{{ instance_id }}'
      state: present
      new_id: '{{ modified_instance_id }}'
      apply_immediately: false
    register: result
    check_mode: yes

  - assert:
      that:
      - result.changed

  - name: Modify the instance name without immediate application
    rds_instance:
      id: '{{ instance_id }}'
      state: present
      new_id: '{{ modified_instance_id }}'
      apply_immediately: false
    register: result

  - assert:
      that:
      - result.changed
      - result.db_instance_identifier == "{{ instance_id }}"

  - name: Immediately apply the pending update - check_mode
    rds_instance:
      id: '{{ instance_id }}'
      state: present
      new_id: '{{ modified_instance_id }}'
      apply_immediately: true
    register: result
    check_mode: yes

  - assert:
      that:
      - result.changed

  - name: Immediately apply the pending update
    rds_instance:
      id: '{{ instance_id }}'
      state: present
      new_id: '{{ modified_instance_id }}'
      apply_immediately: true
    register: result

  - assert:
      that:
      - result.changed
      - result.db_instance_identifier == "{{ modified_instance_id }}"


  # Test modifying CA certificate identifier -------------------------------------------

  - name: Modify the CA certificate identifier to rds-ca-ecc384-g1 - check_mode
    rds_instance:
      state: present
      db_instance_identifier: '{{ modified_instance_id }}'
      allow_major_version_upgrade: true
      ca_certificate_identifier: rds-ca-ecc384-g1
      apply_immediately: true
      tags:
        Name: '{{ modified_instance_id }}'
        Created_by: Ansible rds_instance tests
    register: result
    check_mode: true
    vars:
      ansible_python_interpreter: "{{ botocore_virtualenv_interpreter }}"

  - name: Get curent CA certificate identifier
    rds_instance_info:
      db_instance_identifier: '{{ modified_instance_id }}'
    register: db_info
  - name: Assert that CA certificate identifier has been modified - check_mode
    assert:
      that:
        - result is changed
        - result is not failed
        - db_info.instances[0].ca_certificate_identifier != "rds-ca-ecc384-g1"

  - name: Modify the CA certificate identifier to rds-ca-ecc384-g1
    rds_instance:
      state: present
      db_instance_identifier: '{{ modified_instance_id }}'
      allow_major_version_upgrade: true
      ca_certificate_identifier: rds-ca-ecc384-g1
      apply_immediately: true
      tags:
        Name: '{{ modified_instance_id }}'
        Created_by: Ansible rds_instance tests
    register: result
    vars:
      ansible_python_interpreter: "{{ botocore_virtualenv_interpreter }}"

  - name: Get curent CA certificate identifier
    rds_instance_info:
      db_instance_identifier: '{{ modified_instance_id }}'
    register: db_info
    retries: 20
    delay: 10
    until: db_info.instances[0].ca_certificate_identifier == "rds-ca-ecc384-g1"
  - name: Assert that CA certificate identifier has been modified
    assert:
      that:
        - result is changed
        - result is not failed
        - db_info.instances[0].ca_certificate_identifier == "rds-ca-ecc384-g1"

  - name: Modify the CA certificate identifier to rds-ca-ecc384-g1 - idempotent
    rds_instance:
      state: present
      db_instance_identifier: '{{ modified_instance_id }}'
      ca_certificate_identifier: rds-ca-ecc384-g1
      apply_immediately: true
      tags:
        Name: '{{ modified_instance_id }}'
        Created_by: Ansible rds_instance tests
    register: result
    vars:
      ansible_python_interpreter: "{{ botocore_virtualenv_interpreter }}"

  - name: Get curent CA certificate identifier
    rds_instance_info:
      db_instance_identifier: '{{ modified_instance_id }}'
    register: db_info
    retries: 20
    delay: 10
    until: db_info.instances[0].ca_certificate_identifier == "rds-ca-ecc384-g1"
  - name: Assert that CA certificate identifier has been modified
    assert:
      that:
        - result is not changed
        - result is not failed
        - db_info.instances[0].ca_certificate_identifier == "rds-ca-ecc384-g1"

  - name: Modify the CA certificate identifier to rds-ca-ecc384-g1 - idempotent - check_mode
    rds_instance:
      state: present
      db_instance_identifier: '{{ modified_instance_id }}'
      ca_certificate_identifier: rds-ca-ecc384-g1
      apply_immediately: true
      tags:
        Name: '{{ modified_instance_id }}'
        Created_by: Ansible rds_instance tests
    register: result
    check_mode: true
    vars:
      ansible_python_interpreter: "{{ botocore_virtualenv_interpreter }}"

  - name: Get curent CA certificate identifier
    rds_instance_info:
      db_instance_identifier: '{{ modified_instance_id }}'
    register: db_info
    retries: 20
    delay: 10
    until: db_info.instances[0].ca_certificate_identifier == "rds-ca-ecc384-g1"
  - name: Assert that CA certificate identifier has been modified
    assert:
      that:
        - result is not changed
        - result is not failed
        - db_info.instances[0].ca_certificate_identifier == "rds-ca-ecc384-g1"
  # Test modifying CA certificate identifier Complete-------------------------------------------

  always:
  - name: Delete the instance
    rds_instance:
      id: '{{ item }}'
      state: absent
      skip_final_snapshot: true
      wait: false
    ignore_errors: yes
    loop:
    - '{{ instance_id }}'
    - '{{ modified_instance_id }}'

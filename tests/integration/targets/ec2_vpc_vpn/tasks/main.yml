---
- name: 'ec2_vpc_vpn_info integration tests'
  collections:
    - amazon.aws
  module_defaults:
    group/aws:
      access_key: '{{ aws_access_key }}'
      secret_key: '{{ aws_secret_key }}'
      session_token: '{{ security_token | default(omit) }}'
      region: '{{ aws_region }}'
  block:

  # ============================================================
  - name: create a VPC
    ec2_vpc_net:
      name: "{{ resource_prefix }}-vpc"
      state: present
      cidr_block: "10.0.0.0/26"
      tags:
        Name: "{{ resource_prefix }}-vpc"
        Description: "Created by ansible-test"
    register: vpc_result

  - name: create vpn gateway and attach it to vpc
    ec2_vpc_vgw:
      state: present
      vpc_id: '{{ vpc_result.vpc.id }}'
      name: "{{ resource_prefix }}-vgw"
    register: vgw

  - name: create customer gateway
    ec2_customer_gateway:
      bgp_asn: 12345
      ip_address: 1.2.3.4
      name: testcgw
    register: cgw

  - name: create transit gateway
    ec2_transit_gateway:
      description: "Transit Gateway for vpn attachment"
    register: tgw

  - name: create vpn connection, with customer gateway, vpn_gateway_id and transit_gateway
    ec2_vpc_vpn:
      customer_gateway_id: '{{ cgw.gateway.customer_gateway.customer_gateway_id }}'
      vpn_gateway_id: '{{ vgw.vgw.id }}'
      transit_gateway_id: '{{ tgw.transit_gateway.transit_gateway_id }}'
      state: present
    register: result
    ignore_errors: true

  - name: assert creation of vpn failed
    assert:
      that:
        - result is failed
        - result.msg == "parameters are mutually exclusive: vpn_gateway_id|transit_gateway_id"


  - name: create vpn connection, with customer gateway and transit_gateway
    ec2_vpc_vpn:
      customer_gateway_id: '{{ cgw.gateway.customer_gateway.customer_gateway_id }}'
      transit_gateway_id: '{{ tgw.transit_gateway.transit_gateway_id }}'
      state: present
    register: tgw_vpn

  - name: Store ID of VPN
    set_fact:
      vpn_id: '{{ tgw_vpn.vpn_connection_id }}'

  # ============================================================
  - name: test success with no parameters
    ec2_vpc_vpn_info:
    register: result

  - name: assert success with no parameters
    assert:
      that:
        - 'result.changed == false'
        - 'result.vpn_connections != []'
  # ============================================================

  - name: Delete vpn created with transit gateway
    ec2_vpc_vpn:
      state: absent
      vpn_connection_id: '{{ vpn_id }}'
    register: result
    retries: 10
    delay: 3
    until: result is not failed
    ignore_errors: true

  # ============================================================

  - name: create vpn connection, with customer gateway and vpn gateway
    ec2_vpc_vpn:
      customer_gateway_id: '{{ cgw.gateway.customer_gateway.customer_gateway_id }}'
      vpn_gateway_id: '{{ vgw.vgw.id }}'
      state: present
    register: vpn

  - name: Store ID of VPN
    set_fact:
      vpn_id: '{{ vpn.vpn_connection_id }}'

  # ============================================================

  - name: test success with no parameters
    ec2_vpc_vpn_info:
    register: result

  - name: assert success with no parameters
    assert:
      that:
        - 'result.changed == false'
        - 'result.vpn_connections != []'

  - name: test success with customer gateway id as a filter
    ec2_vpc_vpn_info:
      filters:
        customer-gateway-id: '{{ cgw.gateway.customer_gateway.customer_gateway_id }}'
        vpn-connection-id: '{{ vpn.vpn_connection_id }}'
    register: result

  - name: assert success with customer gateway id as filter
    assert:
      that:
        - 'result.changed == false'
        - 'result.vpn_connections != []'

  # ============================================================

  - include_tasks: 'tags.yml'

  # ============================================================

  - name: delete vpn connection (check)
    ec2_vpc_vpn:
      state: absent
      vpn_connection_id: '{{ vpn_id }}'
    register: result
    check_mode: True

  - assert:
      that:
        - result is changed

  - name: delete vpn connection
    ec2_vpc_vpn:
      state: absent
      vpn_connection_id: '{{ vpn_id }}'
    register: result

  - assert:
      that:
        - result is changed

  - name: delete vpn connection - idempotency (check)
    ec2_vpc_vpn:
      state: absent
      vpn_connection_id: '{{ vpn_id }}'
    register: result
    check_mode: True

  - assert:
      that:
        - result is not changed

  - name: delete vpn connection - idempotency
    ec2_vpc_vpn:
      state: absent
      vpn_connection_id: '{{ vpn_id }}'
    register: result

  - assert:
      that:
        - result is not changed

  # ============================================================
  always:

  - name: delete vpn connection
    ec2_vpc_vpn:
      state: absent
      vpn_connection_id: '{{ vpn.vpn_connection_id }}'
    register: result
    retries: 10
    delay: 3
    until: result is not failed
    ignore_errors: true

  - name: delete customer gateway
    ec2_customer_gateway:
      state: absent
      ip_address: 1.2.3.4
      name: testcgw
      bgp_asn: 12345
    register: result
    retries: 10
    delay: 3
    until: result is not failed
    ignore_errors: true

  - name: delete vpn gateway
    ec2_vpc_vgw:
      state: absent
      vpn_gateway_id: '{{ vgw.vgw.id }}'
    register: result
    retries: 10
    delay: 3
    until: result is not failed
    ignore_errors: true

  - name: delete vpc
    ec2_vpc_net:
      name: "{{ resource_prefix }}-vpc"
      state: absent
      cidr_block: "10.0.0.0/26"
    register: result
    retries: 10
    delay: 3
    until: result is not failed
    ignore_errors: true

  - name: delete transit gateway
    ec2_transit_gateway:
      transit_gateway_id: '{{ tgw.transit_gateway.transit_gateway_id }}'
      state: absent
    ignore_errors: true

---
- debug: msg="Starting test setup......"

# CREATE DYNAMO DB TABLE
- name: Create minimal dynamo table
  community.aws.dynamodb_table:
    name: "{{ dynamodb_table_name }}"
    hash_key_name: id
    hash_key_type: STRING
    tags:
      Usage: Created By Integration Test
  register: create_table_result

# ENABLE DYNAMODB STREAM AND GET STREAM ARN
- name: Enable DynamoDB stream (currently not supported by community.aws.dynamodb_table)
  command: aws dynamodb update-table --table-name "{{ dynamodb_table_name }}" --stream-specification StreamEnabled=True,StreamViewType=KEYS_ONLY
  environment:
    AWS_ACCESS_KEY_ID: "{{ aws_access_key }}"
    AWS_SECRET_ACCESS_KEY: "{{ aws_secret_key }}"
    AWS_SESSION_TOKEN: "{{ security_token | default('') }}"
    AWS_DEFAULT_REGION: "{{ aws_region }}"
  register: enable_stream_result
- name: convert it to an object
  set_fact:
    enable_stream_result: "{{ enable_stream_result.stdout | from_json }}"
- name: Get DynamoDB stream ARN
  set_fact:
    dynamo_stream_arn: "{{ enable_stream_result.TableDescription.LatestStreamArn }}"

# CREATE MINIMAL LAMBDA FUNCTION
# https://github.com/ansible/ansible/issues/77257
- name: Set async_dir for HOME env
  ansible.builtin.set_fact:
    ansible_async_dir: "{{ lookup('env', 'HOME') }}/.ansible_async_{{ tiny_prefix }}/"
  when: (lookup('env', 'HOME'))

- name: create minimal lambda role
  iam_role:
    name: '{{ lambda_role_name }}'
    assume_role_policy_document: '{{ lookup("file", "minimal_trust_policy.json")}}'
    create_instance_profile: false
    managed_policies:
    - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
    - arn:aws:iam::aws:policy/AWSLambdaInvocation-DynamoDB
    - arn:aws:iam::aws:policy/service-role/AWSLambdaDynamoDBExecutionRole
  register: iam_role
- name: wait 10 seconds for role to become available
  pause:
    seconds: 10
  when: iam_role.changed

- name: move lambda into place for archive module
  copy:
    src: mini_lambda.py
    dest: '{{ output_dir }}/mini_lambda.py'
    mode: preserve
- name: bundle lambda into a zip
  register: zip_res
  archive:
    format: zip
    path: '{{ output_dir }}/mini_lambda.py'
    dest: '{{ output_dir }}/mini_lambda.zip'

- name: test state=present - upload the lambda
  lambda:
    name: '{{ lambda_function_name }}'
    runtime: '{{ lambda_python_runtime }}'
    handler: '{{ lambda_python_handler }}'
    role: '{{ lambda_role_name }}'
    zip_file: '{{ zip_res.dest }}'
    architecture: x86_64
  register: result

- name: assert lambda upload succeeded
  assert:
    that:
    - result.changed

- name: Get lambda function ARN
  ansible.builtin.set_fact:
    lambda_function_arn: "{{ result.configuration.function_arn }}"

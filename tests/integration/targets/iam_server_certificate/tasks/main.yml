# iam_server_certificate integration tests
#
# Note:
#
# AWS APIs only support renaming and/or updating
# the *path*.
#
# It is not possible to update the cert/key/chain
# without deleting the ceritifate
#
- module_defaults:
    group/aws:
      access_key: '{{ aws_access_key }}'
      secret_key: '{{ aws_secret_key }}'
      session_token: '{{ security_token | default(omit) }}'
      region: '{{ aws_region }}'
  block:
  ################################################

  - name: Test with no args
    iam_server_certificate: {}
    ignore_errors: true
    register: no_args
  - assert:
      that:
      - no_args is failed
      - no_args.msg.startswith('missing required arguments')

  ################################################

  - include_tasks: generate-certs.yml
  - set_fact:
      cert_a_data: '{{ lookup("file", path_cert_a) }}'
      cert_b_data: '{{ lookup("file", path_cert_b) }}'
      chain_cert_data: '{{ lookup("file", path_intermediate_cert) }}'
  - name: Create Certificate - check_mode
    iam_server_certificate:
      name: '{{ cert_name }}'
      state: present
      cert: '{{ cert_a_data }}'
      key: '{{ lookup("file", path_cert_key) }}'
    register: create_cert
    check_mode: true
  - name: check result - Create Certificate - check_mode
    assert:
      that:
      - create_cert is successful
      - create_cert is changed

  - name: Create Certificate
    iam_server_certificate:
      name: '{{ cert_name }}'
      state: present
      cert: '{{ cert_a_data }}'
      key: '{{ lookup("file", path_cert_key) }}'
    register: create_cert
  - name: check result - Create Certificate
    assert:
      that:
      - create_cert is successful
      - create_cert is changed
      - '"arn" in create_cert'
      - '"cert_body" in create_cert'
      - '"cert_path" in create_cert'
      - '"expiration_date" in create_cert'
      - '"name" in create_cert'
      - '"upload_date" in create_cert'
      - create_cert.arn.startswith('arn:aws')
      - create_cert.arn.endswith(cert_name)
      - create_cert.name == cert_name
      - create_cert.cert_path == '/'
      - create_cert.cert_body == cert_a_data

  - name: Create Certificate - idempotency - check_mode
    iam_server_certificate:
      name: '{{ cert_name }}'
      state: present
      cert: '{{ cert_a_data }}'
      key: '{{ lookup("file", path_cert_key) }}'
    register: create_cert
    check_mode: true
  - name: check result - Create Certificate - idempotency
    assert:
      that:
      - create_cert is successful
      - create_cert is not changed

  - name: Create Certificate - idempotency
    iam_server_certificate:
      name: '{{ cert_name }}'
      state: present
      cert: '{{ cert_a_data }}'
      key: '{{ lookup("file", path_cert_key) }}'
    register: create_cert
  - name: check result - Create Certificate - idempotency
    assert:
      that:
      - create_cert is successful
      - create_cert is not changed
      - '"arn" in create_cert'
      - '"cert_body" in create_cert'
      - '"cert_path" in create_cert'
      - '"expiration_date" in create_cert'
      - '"name" in create_cert'
      - '"upload_date" in create_cert'
      - create_cert.arn.startswith('arn:aws')
      - create_cert.arn.endswith(cert_name)
      - create_cert.name == cert_name
      - create_cert.cert_path == '/'
      - create_cert.cert_body == cert_a_data

  ################################################

  # Module explicitly blocks updating certs
  - name: Update Certificate - check_mode
    iam_server_certificate:
      name: '{{ cert_name }}'
      state: present
      cert: '{{ cert_b_data }}'
    register: update_cert
    ignore_errors: true
    check_mode: true
  - name: check result - Update Certificate - check_mode
    assert:
      that:
      - update_cert is failed
      - '"not supported" in update_cert.msg'

  - name: Update Certificate
    iam_server_certificate:
      name: '{{ cert_name }}'
      state: present
      cert: '{{ cert_b_data }}'
    register: update_cert
    ignore_errors: true
  - name: check result - Update Certificate
    assert:
      that:
      - update_cert is failed
      - '"not supported" in update_cert.msg'

  - name: Update Chaining Certificate - check_mode
    iam_server_certificate:
      name: '{{ cert_name }}'
      state: present
      cert_chain: '{{ chain_cert_data }}'
    register: update_cert
    ignore_errors: true
    check_mode: true
  - name: check result - Update Chaining Certificate - check_mode
    assert:
      that:
      - update_cert is failed
      - '"not supported" in update_cert.msg'

  - name: Update Chaining Certificate
    iam_server_certificate:
      name: '{{ cert_name }}'
      state: present
      cert_chain: '{{ chain_cert_data }}'
    register: update_cert
    ignore_errors: true
  - name: check result - Update Chaining Certificate
    assert:
      that:
      - update_cert is failed
      - '"not supported" in update_cert.msg'

  # AWS APIs provide no mechanism for accessing
  # any information about the key, and as such
  # the module can't tell if a key was updated.

  ################################################

  - name: Delete certificate - check_mode
    iam_server_certificate:
      name: '{{ cert_name }}'
      state: absent
    register: delete_cert
    check_mode: true
  - name: check result - Delete certificate - check_mode
    assert:
      that:
      - delete_cert is successful
      - delete_cert is changed

  - name: Delete certificate
    iam_server_certificate:
      name: '{{ cert_name }}'
      state: absent
    register: delete_cert
  - name: check result - Delete certificate
    assert:
      that:
      - delete_cert is successful
      - delete_cert is changed

  - name: Delete certificate - idempotency - check_mode
    iam_server_certificate:
      name: '{{ cert_name }}'
      state: absent
    register: delete_cert
    check_mode: true
  - name: check result - Delete certificate - check_mode
    assert:
      that:
      - delete_cert is successful
      - delete_cert is not changed

  - name: Delete certificate - idempotency
    iam_server_certificate:
      name: '{{ cert_name }}'
      state: absent
    register: delete_cert
  - name: check result - Delete certificate
    assert:
      that:
      - delete_cert is successful
      - delete_cert is not changed

  ################################################

  - name: Create Certificate with Chain and path - check_mode
    iam_server_certificate:
      name: '{{ cert_name }}'
      state: present
      cert: '{{ cert_a_data }}'
      key: '{{ lookup("file", path_cert_key) }}'
      cert_chain: '{{ chain_cert_data }}'
      path: /ansible-test-example/
    register: create_cert
    check_mode: true
  - name: check result - Create Certificate with Chain and path - check_mode
    assert:
      that:
      - create_cert is successful
      - create_cert is changed

  - name: Create Certificate with Chain and path
    iam_server_certificate:
      name: '{{ cert_name }}'
      state: present
      cert: '{{ cert_a_data }}'
      key: '{{ lookup("file", path_cert_key) }}'
      cert_chain: '{{ chain_cert_data }}'
      path: /ansible-test-example/
    register: create_cert
  - name: check result - Create Certificate with Chain and path
    assert:
      that:
      - create_cert is successful
      - create_cert is changed
      - '"arn" in create_cert'
      - '"cert_body" in create_cert'
      - '"cert_path" in create_cert'
      - '"expiration_date" in create_cert'
      - '"name" in create_cert'
      - '"upload_date" in create_cert'
      - create_cert.arn.startswith('arn:aws')
      - create_cert.arn.endswith(cert_name)
      - create_cert.name == cert_name
      - create_cert.cert_path == '/ansible-test-example/'
      - create_cert.cert_body == cert_a_data

  - name: Create Certificate with Chain and path - idempotency - check_mode
    iam_server_certificate:
      name: '{{ cert_name }}'
      state: present
      cert: '{{ cert_a_data }}'
      key: '{{ lookup("file", path_cert_key) }}'
      cert_chain: '{{ chain_cert_data }}'
      path: /ansible-test-example/
    register: create_cert
    check_mode: true
  - name: check result - Create Certificate with Chain and path - idempotency - check_mode
    assert:
      that:
      - create_cert is successful
      - create_cert is not changed

  - name: Create Certificate with Chain and path - idempotency
    iam_server_certificate:
      name: '{{ cert_name }}'
      state: present
      cert: '{{ cert_a_data }}'
      key: '{{ lookup("file", path_cert_key) }}'
      cert_chain: '{{ chain_cert_data }}'
      path: /ansible-test-example/
    register: create_cert
  - name: check result - Create Certificate with Chain and path - idempotency
    assert:
      that:
      - create_cert is successful
      - create_cert is not changed
      - '"arn" in create_cert'
      - '"cert_body" in create_cert'
      - '"cert_path" in create_cert'
      - '"expiration_date" in create_cert'
      - '"name" in create_cert'
      - '"upload_date" in create_cert'
      - create_cert.arn.startswith('arn:aws')
      - create_cert.arn.endswith(cert_name)
      - create_cert.name == cert_name
      - create_cert.cert_path == '/ansible-test-example/'
      - create_cert.cert_body == cert_a_data

  ################################################

  - name: Create Certificate with identical cert dup_ok=False - check_mode
    iam_server_certificate:
      name: '{{ cert_name }}-duplicate'
      state: present
      cert: '{{ cert_a_data }}'
      key: '{{ lookup("file", path_cert_key) }}'
      dup_ok: false
    register: create_duplicate
    ignore_errors: true
  - name: check result - Create Certificate with identical cert - check_mode
    assert:
      that:
      - create_duplicate is failed

  - name: Create Certificate with identical cert dup_ok=False
    iam_server_certificate:
      name: '{{ cert_name }}-duplicate'
      state: present
      cert: '{{ cert_a_data }}'
      key: '{{ lookup("file", path_cert_key) }}'
      dup_ok: false
    register: create_duplicate
    ignore_errors: true
  - name: check result - Create Certificate with identical cert
    assert:
      that:
      - create_duplicate is failed

  ################################################

  - name: Create Certificate with forced identical cert - check_mode
    iam_server_certificate:
      name: '{{ cert_name }}-duplicate'
      state: present
      cert: '{{ cert_a_data }}'
      key: '{{ lookup("file", path_cert_key) }}'
    register: create_duplicate
    check_mode: true
  - name: check result - Create Certificate with forced identical cert - check_mode
    assert:
      that:
      - create_duplicate is successful
      - create_duplicate is changed

  - name: Create Certificate with forced identical cert
    iam_server_certificate:
      name: '{{ cert_name }}-duplicate'
      state: present
      cert: '{{ cert_a_data }}'
      key: '{{ lookup("file", path_cert_key) }}'
    register: create_duplicate
  - name: check result - Create Certificate with forced identical cert
    assert:
      that:
      - create_duplicate is successful
      - create_duplicate is changed
      - '"arn" in create_duplicate'
      - '"cert_body" in create_duplicate'
      - '"cert_path" in create_duplicate'
      - '"expiration_date" in create_duplicate'
      - '"name" in create_duplicate'
      - '"upload_date" in create_duplicate'
      - create_duplicate.arn.startswith('arn:aws')
      - create_duplicate.arn.endswith('-duplicate')
      - create_duplicate.name.endswith('duplicate')
      - create_duplicate.cert_path == '/'
      - create_duplicate.cert_body == cert_a_data

  - name: Create Certificate with forced identical cert - idempotency - check_mode
    iam_server_certificate:
      name: '{{ cert_name }}-duplicate'
      state: present
      cert: '{{ cert_a_data }}'
      key: '{{ lookup("file", path_cert_key) }}'
    register: create_duplicate
    check_mode: true
  - name: check result - Create Certificate with forced identical cert - idempotency
      - check_mode
    assert:
      that:
      - create_duplicate is successful
      - create_duplicate is not changed

  - name: Create Certificate with forced identical cert - idempotency
    iam_server_certificate:
      name: '{{ cert_name }}-duplicate'
      state: present
      cert: '{{ cert_a_data }}'
      key: '{{ lookup("file", path_cert_key) }}'
    register: create_duplicate
  - name: check result - Create Certificate with forced identical cert - idempotency
    assert:
      that:
      - create_duplicate is successful
      - create_duplicate is not changed
      - '"arn" in create_duplicate'
      - '"cert_body" in create_duplicate'
      - '"cert_path" in create_duplicate'
      - '"expiration_date" in create_duplicate'
      - '"name" in create_duplicate'
      - '"upload_date" in create_duplicate'
      - create_duplicate.arn.startswith('arn:aws')
      - create_duplicate.arn.endswith('-duplicate')
      - create_duplicate.name.endswith('duplicate')
      - create_duplicate.cert_path == '/'
      - create_duplicate.cert_body == cert_a_data

  ################################################

  - name: Update certificate path - check_mode
    iam_server_certificate:
      name: '{{ cert_name }}'
      state: present
      path: /ansible-test-example/
      new_path: /ansible-test-path/
    register: update_path
    check_mode: true
  - name: check result - Update certificate path - check_mode
    assert:
      that:
      - update_path is successful
      - update_path is changed

  - name: Update certificate path
    iam_server_certificate:
      name: '{{ cert_name }}'
      state: present
      path: /ansible-test-example/
      new_path: /ansible-test-path/
    register: update_path
  - name: check result - Update certificate path
    assert:
      that:
      - update_path is successful
      - update_path is changed
      - '"arn" in update_path'
      - '"cert_body" in update_path'
      - '"cert_path" in update_path'
      - '"expiration_date" in update_path'
      - '"name" in update_path'
      - '"upload_date" in update_path'
      - update_path.arn.startswith('arn:aws')
      - update_path.arn.endswith(cert_name)
      - update_path.name == cert_name
      - update_path.cert_path == '/ansible-test-path/'
      - update_path.cert_body == cert_a_data

  - name: Update certificate path - idempotency - check_mode
    iam_server_certificate:
      name: '{{ cert_name }}'
      state: present
      path: /ansible-test-example/
      new_path: /ansible-test-path/
    register: update_path
    check_mode: true
  - name: check result - Update certificate path - idempotency - check_mode
    assert:
      that:
      - update_path is successful
      - update_path is not changed

  - name: Update certificate path - idempotency
    iam_server_certificate:
      name: '{{ cert_name }}'
      state: present
      path: /ansible-test-example/
      new_path: /ansible-test-path/
    register: update_path
  - name: check result - Update certificate path - idempotency
    assert:
      that:
      - update_path is successful
      - update_path is not changed

  ################################################

  - name: Update certificate name - check_mode
    iam_server_certificate:
      name: '{{ cert_name }}'
      new_name: '{{ cert_name }}-renamed'
      state: present
    register: update_name
    check_mode: true
  - name: check result - Update certificate name - check_mode
    assert:
      that:
      - update_name is successful
      - update_name is changed

  - name: Update certificate name
    iam_server_certificate:
      name: '{{ cert_name }}'
      new_name: '{{ cert_name }}-renamed'
      state: present
    register: update_name
  - name: check result - Update certificate name
    assert:
      that:
      - update_name is successful
      - update_name is changed
      - '"arn" in update_name'
      - '"cert_body" in update_name'
      - '"cert_path" in update_name'
      - '"expiration_date" in update_name'
      - '"name" in update_name'
      - '"upload_date" in update_name'
      - update_name.arn.startswith('arn:aws')
      - update_name.arn.endswith('-renamed')
      - update_name.name.endswith('renamed')
      - update_name.cert_path == '/ansible-test-path/'
      - update_name.cert_body == cert_a_data

  - name: Update certificate name - idempotency - check_mode
    iam_server_certificate:
      name: '{{ cert_name }}'
      new_name: '{{ cert_name }}-renamed'
      state: present
    register: update_name
    check_mode: true
  - name: check result - Update certificate name - idempotency - check_mode
    assert:
      that:
      - update_name is successful
      - update_name is not changed

  - name: Update certificate name - idempotency
    iam_server_certificate:
      name: '{{ cert_name }}'
      new_name: '{{ cert_name }}-renamed'
      state: present
    register: update_name
  - name: check result - Update certificate name - idempotency
    assert:
      that:
      - update_name is successful
      - update_name is not changed
      - '"arn" in update_name'
      - '"cert_body" in update_name'
      - '"cert_path" in update_name'
      - '"expiration_date" in update_name'
      - '"name" in update_name'
      - '"upload_date" in update_name'
      - update_name.arn.startswith('arn:aws')
      - update_name.arn.endswith('-renamed')
      - update_name.name.endswith('renamed')
      - update_name.cert_path == '/ansible-test-path/'
      - update_name.cert_body == cert_a_data

  always:

    ################################################
    # TEARDOWN STARTS HERE
    ################################################

  - name: Delete certificate
    iam_server_certificate:
      name: '{{ item }}'
      state: absent
    ignore_errors: true
    loop:
    - '{{ cert_name }}'
    - '{{ cert_name }}-renamed'
    - '{{ cert_name }}-duplicate'

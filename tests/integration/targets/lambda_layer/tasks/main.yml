---
- module_defaults:
    group/aws:
      access_key: '{{ aws_access_key }}'
      secret_key: '{{ aws_secret_key }}'
      session_token: '{{ security_token | default(omit) }}'
      region: '{{ aws_region }}'

  collections:
    - amazon.aws

  vars:
    s3_bucket_name: "{{ resource_prefix }}-bucket"
    s3_bucket_object: "{{ resource_prefix }}-obj-1"
    layer_name: "{{ resource_prefix }}-layer"

  block:
    - name: Create temporary directory
      tempfile:
        state: directory
        suffix: .lambda_handler
      register: _dir

    - copy:
        content: "{{ lambda_hander_content }}"
        dest: "{{ _dir.path }}/lambda_handler.py"
        remote_src: true

    - set_fact:
        zip_file_path: "{{ _dir.path }}/lambda_handler.zip"

    - name: Create lambda handler archive
      archive:
        path: "{{ _dir.path }}/lambda_handler.py"
        dest: "{{ zip_file_path }}"
        format: zip

    - name: Create S3 bucket for testing
      s3_bucket:
        name: "{{ s3_bucket_name }}"
        state: present

    - name: add object into bucket
      s3_object:
        bucket: "{{ s3_bucket_name }}"
        mode: put
        object: "{{ s3_bucket_object }}"
        # permission: public-read  # Commented on because botocore.exceptions.ClientError: An error occurred (AccessControlListNotSupported) when calling the PutObject operation: The bucket does not allow ACLs
        src: "{{ zip_file_path }}"

    - name: Create lambda layer (check_mode=true)
      lambda_layer:
        name: "{{ layer_name }}"
        description: '{{ resource_prefix }} lambda layer first version'
        content:
          zip_file: "{{ zip_file_path }}"
        compatible_runtimes:
          - python3.7
        license_info: GPL-3.0-only
      register: create_check_mode
      check_mode: true

    - name: Retrieve all layers versions
      lambda_layer_info:
        name: "{{ layer_name }}"
      register: layers

    - name: Ensure lambda layer was not created
      assert:
        that:
          - create_check_mode is changed
          - create_check_mode.msg == "Create operation skipped - running in check mode"
          - layers.layers_versions | length == 0

    - name: Create lambda layer (first version)
      lambda_layer:
        name: "{{ layer_name }}"
        description: '{{ resource_prefix }} lambda layer first version'
        content:
          zip_file: "{{ zip_file_path }}"
        compatible_runtimes:
          - python3.7
        license_info: GPL-3.0-only
      register: first_version

    - name: Create another lambda layer version
      lambda_layer:
        name: "{{ layer_name }}"
        description: '{{ resource_prefix }} lambda layer second version'
        content:
          s3_bucket: "{{ s3_bucket_name }}"
          s3_key: "{{ s3_bucket_object }}"
        compatible_runtimes:
          - python3.7
        license_info: GPL-3.0-only
      register: last_version

    - name: Retrieve all layers with latest version
      lambda_layer_info:
      register: layers
    
    - name: Ensure layer created above was found
      assert:
        that:
          - '"layers_versions" in layers'
          - first_version.layer_versions | length == 1
          - last_version.layer_versions | length == 1
          - last_version.layer_versions.0.layer_arn in layers_arns
          - last_version.layer_versions.0.layer_version_arn in layers_version_arns
          - first_version.layer_versions.0.layer_version_arn not in layers_version_arns
      vars:
        layers_arns: '{{ layers.layers_versions | map(attribute="layer_arn") | list }}'
        layers_version_arns: '{{ layers.layers_versions | map(attribute="layer_version_arn") | list }}'

    - name: Retrieve all layers versions
      lambda_layer_info:
        name: "{{ layer_name }}"
      register: layers

    - name: Ensure layer created above was found
      assert:
        that:
          - '"layers_versions" in layers'
          - layers.layers_versions | length == 2
          - first_version.layer_versions | length == 1
          - last_version.layer_versions | length == 1
          - last_version.layer_versions.0.layer_version_arn in layers_version_arns
          - first_version.layer_versions.0.layer_version_arn in layers_version_arns
      vars:
        layers_version_arns: '{{ layers.layers_versions | map(attribute="layer_version_arn") | list }}'

    - name: Delete latest layer version
      lambda_layer:
        name: "{{ layer_name }}"
        version: "{{ last_version.layer_versions.0.version }}"
        state: absent
      check_mode: true
      register: delete_check_mode

    - name: Retrieve all layers versions
      lambda_layer_info:
        name: "{{ layer_name }}"
      register: layers

    - name: Ensure no layer version was deleted
      assert:
        that:
          - delete_check_mode is changed
          - delete_check_mode.layer_versions | length == 1
          - layers.layers_versions | length == 2
          - last_version.layer_versions.0.layer_version_arn in layers_version_arns
          - first_version.layer_versions.0.layer_version_arn in layers_version_arns
      vars:
        layers_version_arns: '{{ layers.layers_versions | map(attribute="layer_version_arn") | list }}'

    - name: Delete latest layer version
      lambda_layer:
        name: "{{ layer_name }}"
        version: "{{ last_version.layer_versions.0.version }}"
        state: absent
      register: delete_layer

    - name: Retrieve all layers versions
      lambda_layer_info:
        name: "{{ layer_name }}"
      register: layers

    - name: Ensure latest layer version was deleted
      assert:
        that:
          - delete_layer is changed
          - delete_layer.layer_versions | length == 1
          - layers.layers_versions | length == 1
          - last_version.layer_versions.0.layer_version_arn not in layers_version_arns
          - first_version.layer_versions.0.layer_version_arn in layers_version_arns
      vars:
        layers_version_arns: '{{ layers.layers_versions | map(attribute="layer_version_arn") | list }}'

    - name: Delete again the latest layer version (idempotency)
      lambda_layer:
        name: "{{ layer_name }}"
        version: "{{ last_version.layer_versions.0.version }}"
        state: absent
      register: delete_idempotent

    - name: Ensure nothing changed
      assert:
        that:
          - delete_idempotent is not changed

    - name: Create multiple lambda layer versions
      lambda_layer:
        name: "{{ layer_name }}"
        description: '{{ resource_prefix }} lambda layer version compatible with python3.{{ item }}'
        content:
          s3_bucket: "{{ s3_bucket_name }}"
          s3_key: "{{ s3_bucket_object }}"
        compatible_runtimes:
          - "python3.{{ item }}"
        license_info: GPL-3.0-only
      with_items: ["9", "10"]

    - name: Delete all layer versions
      lambda_layer:
        name: "{{ layer_name }}"
        version: -1
        state: absent
      register: delete_layer

    - name: Retrieve all layers versions
      lambda_layer_info:
        name: "{{ layer_name }}"
      register: layers

    - name: Ensure layer does not exist anymore
      assert:
        that:
          - delete_layer is changed
          - delete_layer.layer_versions | length > 1
          - layers.layers_versions | length == 0

  always:
    - name: Delete lambda layer if not deleted during testing
      lambda_layer:
        name: "{{ layer_name }}"
        version: -1
        state: absent
      ignore_errors: true

    - name: Delete temporary directory
      file:
        state: absent
        path: "{{ _dir.path }}"
      ignore_errors: true

    - name: Remove object from bucket
      s3_object:
        bucket: "{{ s3_bucket_name }}"
        mode: delobj
        object: "{{ s3_bucket_object }}"
      ignore_errors: true

    - name: Delete S3 bucket
      s3_bucket:
        name: "{{ s3_bucket_name }}"
        force: true
        state: absent
      ignore_errors: true

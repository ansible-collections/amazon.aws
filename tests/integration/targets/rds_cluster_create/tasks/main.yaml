---
- module_defaults:
    group/aws:
      region: "{{ aws_region }}"
      access_key: "{{ aws_access_key }}"
      secret_key: "{{ aws_secret_key }}"
      session_token: "{{ security_token | default(omit) }}"
  block:
    - name: Ensure the resource doesn't exist
      amazon.aws.rds_cluster:
        id: "{{ cluster_id }}"
        state: absent
        engine: "{{ engine}}"
        username: "{{ username }}"
        password: "{{ password }}"
        skip_final_snapshot: true
      register: _result_delete_db_cluster

    - ansible.builtin.assert:
        that:
          - not _result_delete_db_cluster.changed
      ignore_errors: true

    - name: Get info of all existing clusters
      amazon.aws.rds_cluster_info:
      register: _result_cluster_info

    - ansible.builtin.assert:
        that:
          - _result_cluster_info is successful

    - name: Create minimal aurora cluster in default VPC and default subnet group (CHECK MODE)
      amazon.aws.rds_cluster:
        engine: "{{ engine }}"
        username: "{{ username }}"
        password: "{{ password }}"
        cluster_id: "{{ cluster_id }}"
        tags: "{{ tags_create }}"
      register: _result_create_db_cluster
      check_mode: true

    - ansible.builtin.assert:
        that:
          - _result_create_db_cluster.changed

    - name: Create minimal aurora cluster in default VPC and default subnet group
      amazon.aws.rds_cluster:
        engine: "{{ engine }}"
        username: "{{ username }}"
        password: "{{ password }}"
        cluster_id: "{{ cluster_id }}"
        tags: "{{ tags_create }}"
      register: _result_create_db_cluster

    - ansible.builtin.assert:
        that:
          - _result_create_db_cluster.changed
          - "'allocated_storage' in _result_create_db_cluster"
          - _result_create_db_cluster.allocated_storage == 1
          - "'cluster_create_time' in _result_create_db_cluster"
          - _result_create_db_cluster.copy_tags_to_snapshot == false
          - "'db_cluster_arn' in _result_create_db_cluster"
          - "'db_cluster_identifier' in _result_create_db_cluster"
          - _result_create_db_cluster.db_cluster_identifier == cluster_id
          - "'db_cluster_parameter_group' in _result_create_db_cluster"
          - "'db_cluster_resource_id' in _result_create_db_cluster"
          - "'endpoint' in _result_create_db_cluster"
          - "'engine' in _result_create_db_cluster"
          - _result_create_db_cluster.engine == engine
          - "'engine_mode' in _result_create_db_cluster"
          - _result_create_db_cluster.engine_mode == "provisioned"
          - "'engine_version' in _result_create_db_cluster"
          - "'master_username' in _result_create_db_cluster"
          - _result_create_db_cluster.master_username == username
          - "'port' in _result_create_db_cluster"
          - _result_create_db_cluster.port == port
          - "'status' in _result_create_db_cluster"
          - _result_create_db_cluster.status == 'available'
          - _result_create_db_cluster.storage_encrypted == false
          - "'tags' in _result_create_db_cluster"
          - _result_create_db_cluster.tags | length == 2
          - _result_create_db_cluster.tags["Created_By"] == tags_create["Created_By"]
          - _result_create_db_cluster.tags["Name"] == tags_create["Name"]
          - "'vpc_security_groups' in _result_create_db_cluster"
    - name: Get info of the existing cluster
      amazon.aws.rds_cluster_info:
        cluster_id: "{{ cluster_id }}"
      register: result_cluster_info

    - ansible.builtin.assert:
        that:
          - result_cluster_info is successful

    - name: Create minimal aurora cluster in default VPC and default subnet group - idempotence (CHECK MODE)
      amazon.aws.rds_cluster:
        engine: "{{ engine }}"
        username: "{{ username }}"
        password: "{{ password }}"
        cluster_id: "{{ cluster_id }}"
        tags: "{{ tags_create }}"
      register: _result_create_db_cluster
      check_mode: true

    - ansible.builtin.assert:
        that:
          - not _result_create_db_cluster.changed

    - name: Create minimal aurora cluster in default VPC and default subnet group - idempotence
      amazon.aws.rds_cluster:
        engine: "{{ engine }}"
        username: "{{ username }}"
        password: "{{ password }}"
        cluster_id: "{{ cluster_id }}"
        tags: "{{ tags_create }}"
      register: _result_create_db_cluster

    - ansible.builtin.assert:
        that:
          - not _result_create_db_cluster.changed

    # aurora-iopt1 test
    - name: Create aurora cluster with IO optimized storage
      amazon.aws.rds_cluster:
        engine: "{{ engine }}"
        username: "{{ username }}"
        password: "{{ password }}"
        cluster_id: "{{ cluster_id }}-io-optimized"
        tags: "{{ tags_create }}"
        storage_type: aurora-iopt1
      register: _result_create_db_cluster_io_optimized

    - assert:
        that:
          - _result_create_db_cluster_io_optimized.changed
          # as of 5/2024, API does not return the value of storage_type when storage_type not set or set to "aurora"
          # - _result_create_db_cluster_io_optimized.storage_type == 'aurora-iopt1'
          - _result_create_db_cluster_io_optimized.storage_encrypted == false
          - _result_create_db_cluster_io_optimized.engine_mode == "provisioned"
          - _result_create_db_cluster_io_optimized.status == 'available'

    # aurora-iopt1 test failure
    - name: Create mysql cluster with IO optimized storage - test failure with wrong engine + storage combination
      amazon.aws.rds_cluster:
        engine: mysql
        username: "{{ username }}"
        password: "{{ password }}"
        cluster_id: "{{ cluster_id }}-io-optimized-failure"
        tags: "{{ tags_create }}"
        storage_type: aurora-iopt1
      register: _result_create_db_cluster_io_optimized
      ignore_errors: true

    - assert:
        that:
          - not _result_create_db_cluster_io_optimized.changed
          - _result_create_db_cluster_io_optimized.failed

  always:
    - name: Delete test DB clusters without creating a final snapshot
      amazon.aws.rds_cluster:
        state: absent
        cluster_id: "{{ item }}"
        skip_final_snapshot: true
      ignore_errors: true
      with_items:
        - "{{ cluster_id }}"
        - "{{ cluster_id }}-io-optimized"

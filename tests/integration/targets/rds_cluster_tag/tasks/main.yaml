- module_defaults:
    group/aws:
      region: '{{ aws_region }}'
      access_key: '{{ aws_access_key }}'
      secret_key: '{{ aws_secret_key }}'
      session_token: '{{ security_token | default(omit) }}'
  block:
  - name: Ensure the resource doesn't exist
    rds_cluster:
      id: '{{ cluster_id }}'
      state: absent
      engine: '{{ engine}}'
      username: '{{ username }}'
      password: '{{ password }}'
      skip_final_snapshot: true
    register: _result_delete_db_cluster

  - assert:
      that:
      - not _result_delete_db_cluster.changed
    ignore_errors: yes

  - name: Create a DB cluster
    rds_cluster:
      engine: '{{ engine }}'
      username: '{{ username }}'
      password: '{{ password }}'
      cluster_id: '{{ cluster_id }}'
      tags: '{{ tags_create }}'
    register: _result_create_db_cluster

  - assert:
      that:
      - _result_create_db_cluster.changed
      - "'allocated_storage' in _result_create_db_cluster"
      - _result_create_db_cluster.allocated_storage == 1
      - "'cluster_create_time' in _result_create_db_cluster"
      - _result_create_db_cluster.copy_tags_to_snapshot == false
      - "'db_cluster_arn' in _result_create_db_cluster"
      - "'db_cluster_identifier' in _result_create_db_cluster"
      - _result_create_db_cluster.db_cluster_identifier == "{{ cluster_id }}"
      - "'db_cluster_parameter_group' in _result_create_db_cluster"
      - "'db_cluster_resource_id' in _result_create_db_cluster"
      - "'endpoint' in _result_create_db_cluster"
      - "'engine' in _result_create_db_cluster"
      - _result_create_db_cluster.engine == "{{ engine }}"
      - "'engine_mode' in _result_create_db_cluster"
      - _result_create_db_cluster.engine_mode == "provisioned"
      - "'engine_version' in _result_create_db_cluster"
      - "'master_username' in _result_create_db_cluster"
      - _result_create_db_cluster.master_username == "{{ username }}"
      - "'port' in _result_create_db_cluster"
      - _result_create_db_cluster.port == {{ port }}
      - "'status' in _result_create_db_cluster"
      - _result_create_db_cluster.status == 'available'
      - _result_create_db_cluster.storage_encrypted == false
      - "'tags' in _result_create_db_cluster"
      - _result_create_db_cluster.tags | length == 2
      - _result_create_db_cluster.tags["Created_By"] == "{{ tags_create["Created_By"]
        }}"
      - _result_create_db_cluster.tags["Name"] == "{{ tags_create["Name"]}}"
      - "'vpc_security_groups' in _result_create_db_cluster"

  - name: Test tags are not purged if purge_tags is False
    rds_cluster:
      engine: '{{ engine }}'
      username: '{{ username }}'
      password: '{{ new_password }}'
      cluster_id: '{{ cluster_id }}'
      tags: {}
      purge_tags: false
    register: _result_tag_db_cluster

  - assert:
      that:
      - not _result_tag_db_cluster.changed
      - "'allocated_storage' in _result_tag_db_cluster"
      - _result_tag_db_cluster.allocated_storage == 1
      - "'cluster_create_time' in _result_tag_db_cluster"
      - _result_tag_db_cluster.copy_tags_to_snapshot == false
      - "'db_cluster_arn' in _result_tag_db_cluster"
      - "'db_cluster_identifier' in _result_tag_db_cluster"
      - _result_tag_db_cluster.db_cluster_identifier == "{{ cluster_id }}"
      - "'db_cluster_parameter_group' in _result_tag_db_cluster"
      - "'db_cluster_resource_id' in _result_tag_db_cluster"
      - "'endpoint' in _result_tag_db_cluster"
      - "'engine' in _result_tag_db_cluster"
      - _result_tag_db_cluster.engine == "{{ engine }}"
      - "'engine_mode' in _result_tag_db_cluster"
      - _result_tag_db_cluster.engine_mode == "provisioned"
      - "'engine_version' in _result_tag_db_cluster"
      - "'master_username' in _result_tag_db_cluster"
      - _result_tag_db_cluster.master_username == "{{ username }}"
      - "'port' in _result_tag_db_cluster"
      - _result_tag_db_cluster.port == {{ port }}
      - "'status' in _result_tag_db_cluster"
      - _result_tag_db_cluster.status == 'available'
      - _result_tag_db_cluster.storage_encrypted == false
      - "'tags' in _result_tag_db_cluster"
      - _result_tag_db_cluster.tags | length == 2
      - _result_tag_db_cluster.tags["Created_By"] == "{{ tags_create["Created_By"]
        }}"
      - _result_tag_db_cluster.tags["Name"] == "{{ tags_create["Name"] }}"
      - "'vpc_security_groups' in _result_tag_db_cluster"

  - name: Add a tag and remove a tag (purge_tags is True)
    rds_cluster:
      cluster_id: '{{ cluster_id }}'
      state: present
      tags: '{{ tags_patch }}'
    register: _result_tag_db_cluster

  - assert:
      that:
      - _result_tag_db_cluster.changed
      - "'allocated_storage' in _result_tag_db_cluster"
      - _result_tag_db_cluster.allocated_storage == 1
      - "'cluster_create_time' in _result_tag_db_cluster"
      - _result_tag_db_cluster.copy_tags_to_snapshot == false
      - "'db_cluster_arn' in _result_tag_db_cluster"
      - "'db_cluster_identifier' in _result_tag_db_cluster"
      - _result_tag_db_cluster.db_cluster_identifier == "{{ cluster_id }}"
      - "'db_cluster_parameter_group' in _result_tag_db_cluster"
      - "'db_cluster_resource_id' in _result_tag_db_cluster"
      - "'endpoint' in _result_tag_db_cluster"
      - "'engine' in _result_tag_db_cluster"
      - _result_tag_db_cluster.engine == "{{ engine }}"
      - "'engine_mode' in _result_tag_db_cluster"
      - _result_tag_db_cluster.engine_mode == "provisioned"
      - "'engine_version' in _result_tag_db_cluster"
      - "'master_username' in _result_tag_db_cluster"
      - _result_tag_db_cluster.master_username == "{{ username }}"
      - "'port' in _result_tag_db_cluster"
      - _result_tag_db_cluster.port == {{ port }}
      - "'status' in _result_tag_db_cluster"
      - _result_tag_db_cluster.status == 'available'
      - _result_tag_db_cluster.storage_encrypted == false
      - "'tags' in _result_tag_db_cluster"
      - _result_tag_db_cluster.tags | length == 2
      - _result_tag_db_cluster.tags["Name"] == "{{ tags_patch['Name'] }}"
      - "'vpc_security_groups' in _result_tag_db_cluster"

  - name: Purge a tag from the cluster (CHECK MODE)
    rds_cluster:
      engine: '{{ engine }}'
      username: '{{ username }}'
      password: '{{ password }}'
      cluster_id: '{{ cluster_id }}'
      tags:
        Created_By: Ansible_rds_cluster_integration_test
    register: _result_tag_db_cluster
    check_mode: true

  - assert:
      that:
      - _result_tag_db_cluster.changed

  - name: Purge a tag from the cluster
    rds_cluster:
      engine: '{{ engine }}'
      username: '{{ username }}'
      password: '{{ password }}'
      cluster_id: '{{ cluster_id }}'
      tags:
        Created_By: Ansible_rds_cluster_integration_test
    register: _result_tag_db_cluster

  - assert:
      that:
      - _result_tag_db_cluster.changed
      - "'allocated_storage' in _result_tag_db_cluster"
      - _result_tag_db_cluster.allocated_storage == 1
      - "'cluster_create_time' in _result_tag_db_cluster"
      - _result_tag_db_cluster.copy_tags_to_snapshot == false
      - "'db_cluster_arn' in _result_tag_db_cluster"
      - "'db_cluster_identifier' in _result_tag_db_cluster"
      - _result_tag_db_cluster.db_cluster_identifier == "{{ cluster_id }}"
      - "'db_cluster_parameter_group' in _result_tag_db_cluster"
      - "'db_cluster_resource_id' in _result_tag_db_cluster"
      - "'endpoint' in _result_tag_db_cluster"
      - "'engine' in _result_tag_db_cluster"
      - _result_tag_db_cluster.engine == "{{ engine }}"
      - "'engine_mode' in _result_tag_db_cluster"
      - _result_tag_db_cluster.engine_mode == "provisioned"
      - "'engine_version' in _result_tag_db_cluster"
      - "'master_username' in _result_tag_db_cluster"
      - _result_tag_db_cluster.master_username == "{{ username }}"
      - "'port' in _result_tag_db_cluster"
      - _result_tag_db_cluster.port == {{ port }}
      - "'status' in _result_tag_db_cluster"
      - _result_tag_db_cluster.status == 'available'
      - _result_tag_db_cluster.storage_encrypted == false
      - "'tags' in _result_tag_db_cluster"
      - _result_tag_db_cluster.tags | length == 1
      - _result_tag_db_cluster.tags["Created_By"] == "Ansible_rds_cluster_integration_test"
      - "'vpc_security_groups' in _result_tag_db_cluster"

  - name: Add a tag to the cluster (CHECK MODE)
    rds_cluster:
      engine: '{{ engine }}'
      username: '{{ username }}'
      password: '{{ password }}'
      cluster_id: '{{ cluster_id }}'
      tags:
        Name: cluster-{{ resource_prefix }}
        Created_By: Ansible_rds_cluster_integration_test
    register: _result_tag_db_cluster
    check_mode: true

  - assert:
      that:
      - _result_tag_db_cluster.changed

  - name: Add a tag to the cluster
    rds_cluster:
      engine: '{{ engine }}'
      username: '{{ username }}'
      password: '{{ password }}'
      cluster_id: '{{ cluster_id }}'
      tags: '{{ tags_create }}'
    register: _result_tag_db_cluster

  - assert:
      that:
      - _result_tag_db_cluster.changed
      - "'allocated_storage' in _result_tag_db_cluster"
      - _result_tag_db_cluster.allocated_storage == 1
      - "'cluster_create_time' in _result_tag_db_cluster"
      - _result_tag_db_cluster.copy_tags_to_snapshot == false
      - "'db_cluster_arn' in _result_tag_db_cluster"
      - "'db_cluster_identifier' in _result_tag_db_cluster"
      - _result_tag_db_cluster.db_cluster_identifier == "{{ cluster_id }}"
      - "'db_cluster_parameter_group' in _result_tag_db_cluster"
      - "'db_cluster_resource_id' in _result_tag_db_cluster"
      - "'endpoint' in _result_tag_db_cluster"
      - "'engine' in _result_tag_db_cluster"
      - _result_tag_db_cluster.engine == "{{ engine }}"
      - "'engine_mode' in _result_tag_db_cluster"
      - _result_tag_db_cluster.engine_mode == "provisioned"
      - "'engine_version' in _result_tag_db_cluster"
      - "'master_username' in _result_tag_db_cluster"
      - _result_tag_db_cluster.master_username == "{{ username }}"
      - "'port' in _result_tag_db_cluster"
      - _result_tag_db_cluster.port == {{ port }}
      - "'status' in _result_tag_db_cluster"
      - _result_tag_db_cluster.status == 'available'
      - _result_tag_db_cluster.storage_encrypted == false
      - "'tags' in _result_tag_db_cluster"
      - _result_tag_db_cluster.tags | length == 2
      - _result_tag_db_cluster.tags["Created_By"] == "{{ tags_create["Created_By"]}}"
      - _result_tag_db_cluster.tags["Name"] == "{{ tags_create["Name"]}}"
      - "'vpc_security_groups' in _result_tag_db_cluster"
  - name: Remove all tags
    rds_cluster:
      engine: '{{ engine }}'
      username: '{{ username }}'
      password: '{{ password }}'
      cluster_id: '{{ cluster_id }}'
      tags: {}
    register: _result_tag_db_cluster

  - assert:
      that:
      - _result_tag_db_cluster.changed
      - "'allocated_storage' in _result_tag_db_cluster"
      - _result_tag_db_cluster.allocated_storage == 1
      - "'cluster_create_time' in _result_tag_db_cluster"
      - _result_tag_db_cluster.copy_tags_to_snapshot == false
      - "'db_cluster_arn' in _result_tag_db_cluster"
      - "'db_cluster_identifier' in _result_tag_db_cluster"
      - _result_tag_db_cluster.db_cluster_identifier == "{{ cluster_id }}"
      - "'db_cluster_parameter_group' in _result_tag_db_cluster"
      - "'db_cluster_resource_id' in _result_tag_db_cluster"
      - "'endpoint' in _result_tag_db_cluster"
      - "'engine' in _result_tag_db_cluster"
      - _result_tag_db_cluster.engine == "{{ engine }}"
      - "'engine_mode' in _result_tag_db_cluster"
      - _result_tag_db_cluster.engine_mode == "provisioned"
      - "'engine_version' in _result_tag_db_cluster"
      - "'master_username' in _result_tag_db_cluster"
      - _result_tag_db_cluster.master_username == "{{ username }}"
      - "'port' in _result_tag_db_cluster"
      - _result_tag_db_cluster.port == {{ port }}
      - "'status' in _result_tag_db_cluster"
      - _result_tag_db_cluster.status == 'available'
      - _result_tag_db_cluster.storage_encrypted == false
      - "'tags' in _result_tag_db_cluster"
      - _result_tag_db_cluster.tags | length == 0
      - "'vpc_security_groups' in _result_tag_db_cluster"
  always:
  - name: Delete DB cluster without creating a final snapshot
    rds_cluster:
      state: absent
      cluster_id: '{{ cluster_id }}'
      skip_final_snapshot: true
    ignore_errors: true

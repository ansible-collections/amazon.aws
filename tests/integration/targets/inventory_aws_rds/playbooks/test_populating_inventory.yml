---
- hosts: 127.0.0.1
  connection: local
  gather_facts: no
  environment: "{{ ansible_test.environment }}"
  collections:
    - community.aws
  tasks:

    - module_defaults:
        group/aws:
          aws_access_key: '{{ aws_access_key }}'
          aws_secret_key: '{{ aws_secret_key }}'
          security_token: '{{ security_token | default(omit) }}'
          region: '{{ aws_region }}'
      block:

        - set_fact:
            instance_id: "{{ resource_prefix }}-mariadb"

        - debug: var=groups
        - name: assert group was populated with inventory but is empty
          assert:
            that:
              - "'aws_rds' in groups"
              - "not groups.aws_rds"

        # Create new host, refresh inventory, remove host, refresh inventory

        - name: create minimal mariadb instance in default VPC and default subnet group
          rds_instance:
            state: present
            engine: mariadb
            db_instance_class: db.t2.micro
            allocated_storage: 20
            instance_id: '{{ instance_id }}'
            master_username: 'ansibletestuser'
            master_user_password: 'password-{{ resource_prefix | regex_findall(".{8}$") | first }}'
            tags:
              workload_type: other
          register: setup_instance

        - meta: refresh_inventory

        - name: assert group was populated with inventory and is no longer empty
          assert:
            that:
              - "'aws_rds' in groups"
              - "groups.aws_rds | length == 1"
              - "groups.aws_rds.0 == '{{ instance_id }}'"

        - name: remove mariadb instance
          rds_instance:
            state: absent
            engine: mariadb
            skip_final_snapshot: yes
            instance_id: '{{ instance_id }}'

        - meta: refresh_inventory

        - name: assert group was populated with inventory but is empty
          assert:
            that:
              - "'aws_rds' in groups"
              - "not groups.aws_rds"

      always:

        - name: remove mariadb instance
          rds_instance:
            state: absent
            engine: mariadb
            skip_final_snapshot: yes
            instance_id: '{{ instance_id }}'
          ignore_errors: yes
          when: setup_instance is defined

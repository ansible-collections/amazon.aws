- block:
  - name: "create t3.nano instance with metadata_options"
    ec2_instance:
      state: present
      name: "{{ resource_prefix }}-test-t3nano-enabled-required"
      image_id: "{{ ec2_ami_id }}"
      tags:
        TestId: "{{ ec2_instance_tag_TestId }}"
      vpc_subnet_id: "{{ testing_subnet_a.subnet.id }}"
      instance_type: t3.nano
      metadata_options:
          http_endpoint: enabled
          http_tokens: required
      wait: false
    register: instance_creation

  - name: "instance with metadata_options created with the right options"
    assert:
      that:
        - instance_creation is success
        - instance_creation is changed
        - "'{{ instance_creation.spec.MetadataOptions.HttpEndpoint }}' == 'enabled'"
        - "'{{ instance_creation.spec.MetadataOptions.HttpTokens }}' == 'required'"

  - name: "modify metadata_options on existing instance"
    ec2_instance:
      state: present
      name: "{{ resource_prefix }}-test-t3nano-enabled-required"
      image_id: "{{ ec2_ami_id }}"
      tags:
        TestId: "{{ ec2_instance_tag_TestId }}"
      vpc_subnet_id: "{{ testing_subnet_a.subnet.id }}"
      instance_type: t3.nano
      metadata_options:
          http_endpoint: enabled
          http_tokens: optional
      wait: false
    register: metadata_options_update
    ignore_errors: yes

  - name: "fact presented ec2 instance"
    ec2_instance_info:
      filters:
        "tag:Name": "{{ resource_prefix }}-test-t3nano-enabled-required"
    register: presented_instance_fact

  - name: "modify metadata_options has no effect on existing instance"
    assert:
      that:
        - metadata_options_update is success
        - metadata_options_update is not changed
        - "{{ presented_instance_fact.instances | length }} > 0"
        - "'{{ presented_instance_fact.instances.0.state.name }}' in ['running','pending']"
        - "'{{ presented_instance_fact.instances.0.metadata_options.http_endpoint }}' == 'enabled'"
        - "'{{ presented_instance_fact.instances.0.metadata_options.http_tokens }}' == 'required'"

  always:
  - name: "Terminate metadata_options instances"
    ec2_instance:
      state: absent
      filters:
        "tag:TestId": "{{ ec2_instance_tag_TestId }}"
      wait: yes
    ignore_errors: yes

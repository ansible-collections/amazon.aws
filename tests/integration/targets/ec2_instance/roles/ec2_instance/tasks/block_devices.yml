- block:
  - include_role:
      name: setup_botocore_pip
    vars:
      botocore_version: '1.19.27'

  - name: "New instance with an extra block device"
    ec2_instance:
      state: running
      name: "{{ resource_prefix }}-test-ebs-vols"
      image_id: "{{ ec2_ami_id }}"
      vpc_subnet_id: "{{ testing_subnet_b.subnet.id }}"
      volumes:
      - device_name: /dev/sdb
        ebs:
          volume_size: 20
          delete_on_termination: true
          volume_type: standard
      tags:
        TestId: "{{ ec2_instance_tag_TestId }}"
      instance_type: "{{ ec2_instance_type }}"
      wait: true
    register: block_device_instances

  - name: "Gather instance info"
    ec2_instance_info:
      filters:
        "tag:Name": "{{ resource_prefix }}-test-ebs-vols"
    register: block_device_instances_info

  - assert:
      that:
      - block_device_instances is not failed
      - block_device_instances is changed
      - block_device_instances_info.instances[0].block_device_mappings[0]
      - block_device_instances_info.instances[0].block_device_mappings[1]
      - block_device_instances_info.instances[0].block_device_mappings[1].device_name == '/dev/sdb'

  - name: "New instance with an extra block device (check mode)"
    ec2_instance:
      state: present
      name: "{{ resource_prefix }}-test-ebs-vols-checkmode"
      image_id: "{{ ec2_ami_id }}"
      vpc_subnet_id: "{{ testing_subnet_b.subnet.id }}"
      volumes:
      - device_name: /dev/sdb
        ebs:
          volume_size: 20
          delete_on_termination: true
          volume_type: standard
      tags:
        TestId: "{{ ec2_instance_tag_TestId }}"
      instance_type: "{{ ec2_instance_type }}"
    check_mode: yes

  - name: "fact presented ec2 instance"
    ec2_instance_info:
      filters:
        "tag:Name": "{{ resource_prefix }}-test-ebs-vols"
    register: presented_instance_fact

  - name: "fact checkmode ec2 instance"
    ec2_instance_info:
      filters:
        "tag:Name": "{{ resource_prefix }}-test-ebs-vols-checkmode"
    register: checkmode_instance_fact

  - name: "Confirm instance was created without check mode"
    assert:
      that:
        - "{{ presented_instance_fact.instances | length }} > 0"

  - name: "Confirm instance was not created with check mode"
    assert:
      that:
        - "{{ checkmode_instance_fact.instances | length }} == 0"

  - name: "Terminate instances"
    ec2_instance:
      state: absent
      instance_ids: "{{ block_device_instances.instance_ids }}"

  - name: "New instance with an extra block device - gp3 volume_type and throughput"
    ec2_instance:
      state: running
      name: "{{ resource_prefix }}-test-ebs-vols-gp3"
      image_id: "{{ ec2_ami_id }}"
      vpc_subnet_id: "{{ testing_subnet_b.subnet.id }}"
      volumes:
      - device_name: /dev/sdb
        ebs:
          volume_size: 20
          delete_on_termination: true
          volume_type: gp3
          throughput: 500
      tags:
        TestId: "{{ ec2_instance_tag_TestId }}"
      instance_type: "{{ ec2_instance_type }}"
      wait: true
    register: block_device_instances_gp3
    # Managing Troughput requires botocore >= 1.19.27
    vars:
      ansible_python_interpreter: "{{ botocore_virtualenv_interpreter }}"

  - assert:
      that:
      - block_device_instances_gp3 is not failed
      - block_device_instances_gp3 is changed
      - block_device_instances_gp3.spec.BlockDeviceMappings[0].DeviceName == '/dev/sdb'
      - block_device_instances_gp3.spec.BlockDeviceMappings[0].Ebs.VolumeType == 'gp3'
      - block_device_instances_gp3.spec.BlockDeviceMappings[0].Ebs.VolumeSize == 20
      - block_device_instances_gp3.spec.BlockDeviceMappings[0].Ebs.Throughput == 500

  always:
  - name: "Terminate block_devices instances"
    ec2_instance:
      state: absent
      filters:
        "tag:TestId": "{{ ec2_instance_tag_TestId }}"
      wait: yes
    ignore_errors: yes

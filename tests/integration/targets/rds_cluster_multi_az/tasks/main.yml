---
- module_defaults:
    group/aws:
      region: "{{ aws_region }}"
      access_key: "{{ aws_access_key }}"
      secret_key: "{{ aws_secret_key }}"
      session_token: "{{ security_token | default(omit) }}"
  collections:
    - amazon.aws

  block:
  - name: Ensure the resource doesn't exist
    rds_cluster:
      id: '{{ cluster_id }}'
      state: absent
      engine: 'mysql'
      username: '{{ username }}'
      password: '{{ password }}'
      skip_final_snapshot: true
    register: _result_delete_db_cluster

  - assert:
      that:
      - not _result_delete_db_cluster.changed
    ignore_errors: true

  - name: Create a source DB cluster (CHECK_MODE)
    rds_cluster:
      id: '{{ cluster_id }}'
      state: present
      engine: 'mysql'
      engine_version: 8.0.28
      allocated_storage: 100
      iops: 5000
      db_cluster_instance_class: db.r6gd.xlarge
      username: '{{ username }}'
      password: '{{ password }}'
      wait: true
      tags: '{{ tags_create }}'
    register: _result_create_source_db_cluster
    check_mode: True
    vars:
      ansible_python_interpreter: "{{ botocore_virtualenv_interpreter }}"

  - assert:
      that:
      - _result_create_source_db_cluster.changed

  - name: Create a source DB cluster
    rds_cluster:
      id: '{{ cluster_id }}'
      state: present
      engine: 'mysql'
      engine_version: 8.0.28
      allocated_storage: 100
      iops: 5000
      db_cluster_instance_class: db.r6gd.xlarge
      username: '{{ username }}'
      password: '{{ password }}'
      wait: true
      tags: '{{ tags_create }}'
    register: _result_create_source_db_cluster
    vars:
      ansible_python_interpreter: "{{ botocore_virtualenv_interpreter }}"

  - assert:
      that:
      - _result_create_source_db_cluster.changed

  always:

  - name: Delete DB cluster without creating a final snapshot
    rds_cluster:
      state: absent
      cluster_id: '{{ item }}'
      skip_final_snapshot: true
    ignore_errors: true
    loop:
    - '{{ cluster_id }}'

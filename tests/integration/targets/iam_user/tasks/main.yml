---
- name: set up aws connection info
  module_defaults:
    group/aws:
      access_key: "{{ aws_access_key }}"
      secret_key: "{{ aws_secret_key }}"
      session_token: "{{ security_token | default(omit) }}"
      region: "{{ aws_region }}"
  block:
    - name: ensure improper usage of parameters fails gracefully
      amazon.aws.iam_user_info:
        path: "{{ test_path }}"
        group: "{{ test_group }}"
      ignore_errors: true
      register: iam_user_info_path_group
    - ansible.builtin.assert:
        that:
          - iam_user_info_path_group is failed
          - 'iam_user_info_path_group.msg == "parameters are mutually exclusive: group|path"'

    - name: create test user (check mode)
      amazon.aws.iam_user:
        name: "{{ test_user }}"
        state: present
      check_mode: true
      register: iam_user
    - name: assert that the user would be created
      ansible.builtin.assert:
        that:
          - iam_user is changed

    - name: create test user
      amazon.aws.iam_user:
        name: "{{ test_user }}"
        state: present
      register: iam_user
    - name: assert that the user is created
      ansible.builtin.assert:
        that:
          - iam_user is changed

    - name: ensure test user exists (no change - check mode)
      amazon.aws.iam_user:
        name: "{{ test_user }}"
        state: present
      register: iam_user
      check_mode: true
    - name: assert that user would not change
      ansible.builtin.assert:
        that:
          - iam_user is not changed

    - name: ensure test user exists (no change)
      amazon.aws.iam_user:
        name: "{{ test_user }}"
        state: present
      register: iam_user
    - name: assert that the user wasn't changed
      ansible.builtin.assert:
        that:
          - iam_user is not changed

    - name: ensure the info used to validate other tests is valid
      ansible.builtin.set_fact:
        test_iam_user: "{{ iam_user.iam_user.user }}"
    - ansible.builtin.assert:
        that:
          - test_iam_user.arn.startswith("arn:aws:iam")
          - test_iam_user.arn.endswith("user/" + test_user )
          - test_iam_user.create_date is not none
          - test_iam_user.path == '{{ test_path }}'
          - test_iam_user.user_id is not none
          - test_iam_user.user_name == '{{ test_user }}'
          - test_iam_user.tags | length == 0

    - name: get info on IAM user(s)
      amazon.aws.iam_user_info:
      register: iam_user_info
    - ansible.builtin.assert:
        that:
          - iam_user_info.iam_users | length != 0

    - name: get info on IAM user(s) with name
      amazon.aws.iam_user_info:
        name: "{{ test_user }}"
      register: iam_user_info
    - ansible.builtin.assert:
        that:
          - iam_user_info.iam_users | length == 1
          - iam_user_info.iam_users[0].arn == test_iam_user.arn
          - iam_user_info.iam_users[0].create_date == test_iam_user.create_date
          - iam_user_info.iam_users[0].path == test_iam_user.path
          - iam_user_info.iam_users[0].user_id == test_iam_user.user_id
          - iam_user_info.iam_users[0].user_name == test_iam_user.user_name
          - iam_user_info.iam_users[0].tags | length == 0

    # ------------------------------------------------------------------------------------------

    - name: create test user with password (check mode)
      amazon.aws.iam_user:
        name: "{{ test_user3 }}"
        password: "{{ test_password }}"
        state: present
      check_mode: true
      register: iam_user
    - name: assert that the second user would be created
      ansible.builtin.assert:
        that:
          - iam_user is changed

    - name: create second test user with password
      amazon.aws.iam_user:
        name: "{{ test_user3 }}"
        password: "{{ test_password }}"
        password_reset_required: true
        state: present
        wait: false
      register: iam_user
    - name: assert that the second user is created
      ansible.builtin.assert:
        that:
          - iam_user is changed
          - iam_user.iam_user.user.password_reset_required

    - name: get info on IAM user(s) on path
      amazon.aws.iam_user_info:
        path: "{{ test_path }}"
        name: "{{ test_user }}"
      register: iam_user_info
    - ansible.builtin.assert:
        that:
          - iam_user_info.iam_users | length == 1
          - iam_user_info.iam_users[0].arn == test_iam_user.arn
          - iam_user_info.iam_users[0].create_date == test_iam_user.create_date
          - iam_user_info.iam_users[0].path == test_iam_user.path
          - iam_user_info.iam_users[0].user_id == test_iam_user.user_id
          - iam_user_info.iam_users[0].user_name == test_iam_user.user_name
          - iam_user_info.iam_users[0].tags | length == 0

    # ------------------------------------------------------------------------------------------
    ## Test tags creation / updates
    - name: Add Tag (check mode)
      amazon.aws.iam_user:
        name: "{{ test_user }}"
        state: present
        tags:
          TagA: ValueA
      register: iam_user
      check_mode: true
    - ansible.builtin.assert:
        that:
          - iam_user is changed

    - name: Add Tag
      amazon.aws.iam_user:
        name: "{{ test_user }}"
        state: present
        tags:
          TagA: ValueA
      register: iam_user
    - ansible.builtin.assert:
        that:
          - iam_user is changed
          - iam_user.iam_user.user.user_name == test_user
          - iam_user.iam_user.user.tags | length == 1
          - '"TagA" in iam_user.iam_user.user.tags'
          - iam_user.iam_user.user.tags.TagA == "ValueA"

    - name: Add Tag (no change - check mode)
      amazon.aws.iam_user:
        name: "{{ test_user }}"
        state: present
        tags:
          TagA: ValueA
      register: iam_user
      check_mode: true
    - ansible.builtin.assert:
        that:
          - iam_user is not changed

    - name: Add Tag (no change)
      amazon.aws.iam_user:
        name: "{{ test_user }}"
        state: present
        tags:
          TagA: ValueA
      register: iam_user
    - ansible.builtin.assert:
        that:
          - iam_user is not changed
          - iam_user.iam_user.user.user_name == test_user
          - iam_user.iam_user.user.tags | length == 1
          - '"TagA" in iam_user.iam_user.user.tags'
          - iam_user.iam_user.user.tags.TagA == "ValueA"

    - name: Extend Tags
      amazon.aws.iam_user:
        name: "{{ test_user }}"
        state: present
        purge_tags: false
        tags:
          tag_b: value_b
          Tag C: Value C
          tag d: value d
      register: iam_user
    - ansible.builtin.assert:
        that:
          - iam_user is changed
          - iam_user.iam_user.user.user_name == test_user
          - iam_user.iam_user.user.tags | length == 4
          - '"TagA" in iam_user.iam_user.user.tags'
          - '"tag_b" in iam_user.iam_user.user.tags'
          - '"Tag C" in iam_user.iam_user.user.tags'
          - '"tag d" in iam_user.iam_user.user.tags'
          - iam_user.iam_user.user.tags.TagA == "ValueA"
          - iam_user.iam_user.user.tags.tag_b == "value_b"
          - iam_user.iam_user.user.tags["Tag C"] == "Value C"
          - iam_user.iam_user.user.tags["tag d"] == "value d"

    - name: Create user without Tag (no change)
      amazon.aws.iam_user:
        name: "{{ test_user }}"
        state: present
      register: iam_user
    - ansible.builtin.assert:
        that:
          - iam_user is not changed
          - iam_user.iam_user.user.user_name == test_user
          - iam_user.iam_user.user.tags | length == 4

    - name: Remove all Tags (check mode)
      amazon.aws.iam_user:
        name: "{{ test_user }}"
        state: present
        tags: {}
      check_mode: true
      register: iam_user
    - ansible.builtin.assert:
        that:
          - iam_user is changed

    - name: Remove 3 Tags
      amazon.aws.iam_user:
        name: "{{ test_user }}"
        state: present
        tags:
          TagA: ValueA
      register: iam_user
    - ansible.builtin.assert:
        that:
          - iam_user is changed
          - iam_user.iam_user.user.user_name == test_user
          - iam_user.iam_user.user.tags | length == 1
          - '"TagA" in iam_user.iam_user.user.tags'
          - iam_user.iam_user.user.tags.TagA == "ValueA"

    - name: Change Tag (check mode)
      amazon.aws.iam_user:
        name: "{{ test_user }}"
        state: present
        tags:
          TagA: AnotherValueA
      register: iam_user
      check_mode: true
    - ansible.builtin.assert:
        that:
          - iam_user is changed

    - name: Change Tag
      amazon.aws.iam_user:
        name: "{{ test_user }}"
        state: present
        tags:
          TagA: AnotherValueA
      register: iam_user
    - ansible.builtin.assert:
        that:
          - iam_user is changed
          - iam_user.iam_user.user.user_name == test_user
          - iam_user.iam_user.user.tags | length == 1
          - '"TagA" in iam_user.iam_user.user.tags'
          - iam_user.iam_user.user.tags.TagA == "AnotherValueA"

    - name: Remove All Tags
      amazon.aws.iam_user:
        name: "{{ test_user }}"
        state: present
        tags: {}
      register: iam_user
    - ansible.builtin.assert:
        that:
          - iam_user is changed
          - iam_user.iam_user.user.user_name == test_user
          - iam_user.iam_user.user.tags | length == 0

    - name: Remove All Tags (no change)
      amazon.aws.iam_user:
        name: "{{ test_user }}"
        state: present
        tags: {}
      register: iam_user
    - ansible.builtin.assert:
        that:
          - iam_user is not changed
          - iam_user.iam_user.user.user_name == test_user
          - iam_user.iam_user.user.tags | length == 0

    # ------------------------------------------------------------------------------------------
    ## Test user password update
    - name: test update IAM password with on_create only (check mode)
      amazon.aws.iam_user:
        name: "{{ test_user3 }}"
        password: "{{ test_new_password }}"
        update_password: on_create
        state: present
      register: iam_user_update
      check_mode: true
    - ansible.builtin.assert:
        that:
          - iam_user_update is not changed

    - name: test update IAM password with on_create only
      amazon.aws.iam_user:
        name: "{{ test_user3 }}"
        password: "{{ test_new_password }}"
        update_password: on_create
        state: present
      register: iam_user_update
    - ansible.builtin.assert:
        that:
          - iam_user_update is not changed

    - name: update IAM password (check mode)
      amazon.aws.iam_user:
        name: "{{ test_user3 }}"
        password: "{{ test_new_password }}"
        state: present
      register: iam_user_update
      check_mode: true
    - ansible.builtin.assert:
        that:
          - iam_user_update is changed

    # flakey, there is no waiter for login profiles
    # Login Profile for User ansible-user-c cannot be modified while login profile is being created.
    - name: update IAM password
      amazon.aws.iam_user:
        name: "{{ test_user3 }}"
        password: "{{ test_new_password }}"
        state: present
      register: iam_user_update
      until: iam_user_update.failed == false
      delay: 3
      retries: 5
    - ansible.builtin.assert:
        that:
          - iam_user_update is changed
          - iam_user_update.iam_user.user.user_name == test_user3

    # ===========================================
    # Test Managed Policy management
    #
    # Use a couple of benign policies for testing:
    # - AWSDenyAll
    # - ServiceQuotasReadOnlyAccess
    #
    - name: attach managed policy to user (check mode)
      amazon.aws.iam_user:
        name: "{{ test_user }}"
        state: present
        managed_policy:
          - arn:aws:iam::aws:policy/AWSDenyAll
      register: iam_user
      check_mode: true
    - name: assert that the user is changed
      ansible.builtin.assert:
        that:
          - iam_user is changed

    - name: attach managed policy to user
      amazon.aws.iam_user:
        name: "{{ test_user }}"
        state: present
        managed_policy:
          - arn:aws:iam::aws:policy/AWSDenyAll
      register: iam_user
    - name: assert that the user is changed
      ansible.builtin.assert:
        that:
          - iam_user is changed

    - name: ensure managed policy is attached to user (no change - check mode)
      amazon.aws.iam_user:
        name: "{{ test_user }}"
        state: present
        managed_policy:
          - arn:aws:iam::aws:policy/AWSDenyAll
      register: iam_user
      check_mode: true
    - name: assert that the user hasn't changed
      ansible.builtin.assert:
        that:
          - iam_user is not changed

    - name: ensure managed policy is attached to user (no change)
      amazon.aws.iam_user:
        name: "{{ test_user }}"
        state: present
        managed_policy:
          - arn:aws:iam::aws:policy/AWSDenyAll
      register: iam_user
    - name: assert that the user hasn't changed
      ansible.builtin.assert:
        that:
          - iam_user is not changed

    # ------------------------------------------------------------------------------------------

    - name: attach different managed policy to user (check mode)
      check_mode: true
      amazon.aws.iam_user:
        name: "{{ test_user }}"
        state: present
        managed_policy:
          - arn:aws:iam::aws:policy/ServiceQuotasReadOnlyAccess
        purge_policy: false
      register: iam_user
    - name: assert that the user changed
      ansible.builtin.assert:
        that:
          - iam_user is changed

    - name: attach different managed policy to user
      amazon.aws.iam_user:
        name: "{{ test_user }}"
        state: present
        managed_policy:
          - arn:aws:iam::aws:policy/ServiceQuotasReadOnlyAccess
        purge_policy: false
      register: iam_user
    - name: assert that the user changed
      ansible.builtin.assert:
        that:
          - iam_user is changed

    - name: attach different managed policy to user (no change - check mode)
      amazon.aws.iam_user:
        name: "{{ test_user }}"
        state: present
        managed_policy:
          - arn:aws:iam::aws:policy/ServiceQuotasReadOnlyAccess
        purge_policy: false
      register: iam_user
      check_mode: true
    - name: assert that the user hasn't changed
      ansible.builtin.assert:
        that:
          - iam_user is not changed

    - name: Check first policy wasn't purged
      amazon.aws.iam_user:
        name: "{{ test_user }}"
        state: present
        managed_policy:
          - arn:aws:iam::aws:policy/ServiceQuotasReadOnlyAccess
          - arn:aws:iam::aws:policy/AWSDenyAll
        purge_policy: false
      register: iam_user
    - name: assert that the user hasn't changed
      ansible.builtin.assert:
        that:
          - iam_user is not changed

    - name: Check that managed policy order doesn't matter
      amazon.aws.iam_user:
        name: "{{ test_user }}"
        state: present
        managed_policy:
          - arn:aws:iam::aws:policy/AWSDenyAll
          - arn:aws:iam::aws:policy/ServiceQuotasReadOnlyAccess
        purge_policy: false
      register: iam_user
    - name: assert that the user hasn't changed
      ansible.builtin.assert:
        that:
          - iam_user is not changed

    - name: Check that policy doesn't require full ARN path
      amazon.aws.iam_user:
        name: "{{ test_user }}"
        state: present
        managed_policy:
          - AWSDenyAll
          - arn:aws:iam::aws:policy/ServiceQuotasReadOnlyAccess
        purge_policy: false
      register: iam_user
    - name: assert that the user hasn't changed
      ansible.builtin.assert:
        that:
          - iam_user is not changed

    # ------------------------------------------------------------------------------------------

    - name: Remove one of the managed policies - with purge (check mode)
      check_mode: true
      amazon.aws.iam_user:
        name: "{{ test_user }}"
        state: present
        managed_policy:
          - arn:aws:iam::aws:policy/ServiceQuotasReadOnlyAccess
        purge_policy: true
      register: iam_user
    - name: assert that the user changed
      ansible.builtin.assert:
        that:
          - iam_user is changed

    - name: Remove one of the managed policies - with purge
      amazon.aws.iam_user:
        name: "{{ test_user }}"
        state: present
        managed_policy:
          - arn:aws:iam::aws:policy/ServiceQuotasReadOnlyAccess
        purge_policy: true
      register: iam_user
    - name: assert that the user changed
      ansible.builtin.assert:
        that:
          - iam_user is changed

    - name: Remove one of the managed policies - with purge (no change - check mode)
      amazon.aws.iam_user:
        name: "{{ test_user }}"
        state: present
        managed_policy:
          - arn:aws:iam::aws:policy/ServiceQuotasReadOnlyAccess
        purge_policy: true
      register: iam_user
      check_mode: true
    - name: assert that the user hasn't changed
      ansible.builtin.assert:
        that:
          - iam_user is not changed

    - name: Remove one of the managed policies - with purge (no change)
      amazon.aws.iam_user:
        name: "{{ test_user }}"
        state: present
        managed_policy:
          - arn:aws:iam::aws:policy/ServiceQuotasReadOnlyAccess
        purge_policy: true
      register: iam_user
    - name: assert that the user hasn't changed
      ansible.builtin.assert:
        that:
          - iam_user is not changed

    # ------------------------------------------------------------------------------------------

    - name: ensure group exists
      community.aws.iam_group:
        name: "{{ test_group }}"
        users:
          - "{{ test_user }}"
        state: present
      register: iam_group
    - ansible.builtin.assert:
        that:
          - iam_group.changed
          - iam_group.iam_group.users

    - name: get info on IAM user(s) in group
      amazon.aws.iam_user_info:
        group: "{{ test_group }}"
        name: "{{ test_user }}"
      register: iam_user_info
    - ansible.builtin.assert:
        that:
          - iam_user_info.iam_users | length == 1
          - iam_user_info.iam_users[0].arn == test_iam_user.arn
          - iam_user_info.iam_users[0].create_date == test_iam_user.create_date
          - iam_user_info.iam_users[0].path == test_iam_user.path
          - iam_user_info.iam_users[0].user_id == test_iam_user.user_id
          - iam_user_info.iam_users[0].user_name == test_iam_user.user_name
          - iam_user_info.iam_users[0].tags | length == 0

    - name: remove user from group
      community.aws.iam_group:
        name: "{{ test_group }}"
        purge_users: true
        users: []
        state: present
      register: iam_group
    - name: get info on IAM user(s) after removing from group
      amazon.aws.iam_user_info:
        group: "{{ test_group }}"
        name: "{{ test_user }}"
      register: iam_user_info
    - name: assert empty list of users for group are returned
      ansible.builtin.assert:
        that:
          - iam_user_info.iam_users | length == 0

    - name: ensure ansible users exist
      amazon.aws.iam_user:
        name: "{{ item }}"
        state: present
      with_items: "{{ test_users }}"
    - name: get info on multiple IAM user(s)
      amazon.aws.iam_user_info:
      register: iam_user_info
    - ansible.builtin.assert:
        that:
          - iam_user_info.iam_users | length != 0

    - name: ensure multiple user group exists with single user
      community.aws.iam_group:
        name: "{{ test_group }}"
        users:
          - "{{ test_user }}"
        state: present
      register: iam_group
    - name: get info on IAM user(s) in group
      amazon.aws.iam_user_info:
        group: "{{ test_group }}"
      register: iam_user_info
    - ansible.builtin.assert:
        that:
          - iam_user_info.iam_users | length == 1

    - name: add all users to group
      community.aws.iam_group:
        name: "{{ test_group }}"
        users: "{{ test_users }}"
        state: present
      register: iam_group
    - name: get info on multiple IAM user(s) in group
      amazon.aws.iam_user_info:
        group: "{{ test_group }}"
      register: iam_user_info
    - ansible.builtin.assert:
        that:
          - iam_user_info.iam_users | length == test_users | length

    - name: purge users from group
      community.aws.iam_group:
        name: "{{ test_group }}"
        purge_users: true
        users: []
        state: present
      register: iam_group
    - name: ensure info is empty for empty group
      amazon.aws.iam_user_info:
        group: "{{ test_group }}"
      register: iam_user_info
    - ansible.builtin.assert:
        that:
          - iam_user_info.iam_users | length == 0

    - name: get info on IAM user(s) after removing from group
      amazon.aws.iam_user_info:
        group: "{{ test_group }}"
      register: iam_user_info
    - name: assert empty list of users for group are returned
      ansible.builtin.assert:
        that:
          - iam_user_info.iam_users | length == 0

    - name: remove group
      community.aws.iam_group:
        name: "{{ test_group }}"
        state: absent
      register: iam_group
    - name: assert that group was removed
      ansible.builtin.assert:
        that:
          - iam_group.changed
          - iam_group

    - name: Test remove group again (idempotency)
      community.aws.iam_group:
        name: "{{ test_group }}"
        state: absent
      register: iam_group
    - name: assert that group remove is not changed
      ansible.builtin.assert:
        that:
          - not iam_group.changed

    # ------------------------------------------------------------------------------------------

    - name: Remove user with attached policy (check mode)
      amazon.aws.iam_user:
        name: "{{ test_user }}"
        state: absent
      register: iam_user
      check_mode: true
    - name: get info on IAM user(s) after deleting in check mode
      amazon.aws.iam_user_info:
        name: "{{ test_user }}"
      register: iam_user_info
    - name: Assert user was not removed in check mode
      ansible.builtin.assert:
        that:
          - iam_user.changed
          - iam_user_info.iam_users | length == 1

    - name: Remove user with attached policy
      amazon.aws.iam_user:
        name: "{{ test_user }}"
        state: absent
      register: iam_user
    - name: get info on IAM user(s) after deleting
      amazon.aws.iam_user_info:
        name: "{{ test_user }}"
      register: iam_user_info
    - name: Assert user was removed
      ansible.builtin.assert:
        that:
          - iam_user.changed
          - iam_user_info.iam_users | length == 0

    - name: Remove user with attached policy (idempotent - check mode)
      amazon.aws.iam_user:
        name: "{{ test_user }}"
        state: absent
      register: iam_user
      check_mode: true
    - name: Assert no change
      ansible.builtin.assert:
        that:
          - not iam_user.changed

    - name: Remove user with attached policy (idempotent)
      amazon.aws.iam_user:
        name: "{{ test_user }}"
        state: absent
      register: iam_user
    - name: Assert no change
      ansible.builtin.assert:
        that:
          - not iam_user.changed

    # ------------------------------------------------------------------------------------------
    ## Test user password removal
    - name: Delete IAM password (check mode)
      amazon.aws.iam_user:
        name: "{{ test_user3 }}"
        remove_password: true
        state: present
      register: iam_user_password_removal
      check_mode: true
    - ansible.builtin.assert:
        that:
          - iam_user_password_removal is changed

    - name: Delete IAM password
      amazon.aws.iam_user:
        name: "{{ test_user3 }}"
        remove_password: true
        state: present
      register: iam_user_password_removal
    - ansible.builtin.assert:
        that:
          - iam_user_password_removal is changed

    - name: Delete IAM password again (check mode)
      amazon.aws.iam_user:
        name: "{{ test_user3 }}"
        remove_password: true
        state: present
      register: iam_user_password_removal
      check_mode: true
    - ansible.builtin.assert:
        that:
          - iam_user_password_removal is not changed

    - name: Delete IAM password again
      amazon.aws.iam_user:
        name: "{{ test_user3 }}"
        remove_password: true
        state: present
      register: iam_user_password_removal
    - ansible.builtin.assert:
        that:
          - iam_user_password_removal is not changed

  always:
    - name: remove group
      community.aws.iam_group:
        name: "{{ test_group }}"
        state: absent
      ignore_errors: true
    - name: remove ansible users
      amazon.aws.iam_user:
        name: "{{ item }}"
        state: absent
      with_items: "{{ test_users }}"
      ignore_errors: true

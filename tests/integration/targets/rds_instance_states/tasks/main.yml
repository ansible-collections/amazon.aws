---
- name: rds_instance / states integration tests
  collections:
    - community.aws
  module_defaults:
    group/aws:
      access_key: "{{ aws_access_key }}"
      secret_key: "{{ aws_secret_key }}"
      session_token: "{{ security_token | default(omit) }}"
      region: "{{ aws_region }}"
  block:
    - name: Ensure the resource doesn't exist
      amazon.aws.rds_instance:
        id: "{{ instance_id }}"
        state: absent
        skip_final_snapshot: true
      register: result

    - ansible.builtin.assert:
        that:
          - not result.changed
      ignore_errors: true

    - name: Create a mariadb instance - check_mode
      amazon.aws.rds_instance:
        id: "{{ instance_id }}"
        state: present
        engine: mariadb
        username: "{{ username }}"
        password: "{{ password }}"
        db_instance_class: "{{ db_instance_class }}"
        allocated_storage: "{{ allocated_storage }}"
        deletion_protection: true
        tags:
          Name: "{{ instance_id }}"
          Created_by: Ansible rds_instance tests
      register: result
      check_mode: true

    - ansible.builtin.assert:
        that:
          - result.changed

    - name: Create a mariadb instance
      amazon.aws.rds_instance:
        id: "{{ instance_id }}"
        state: present
        engine: mariadb
        username: "{{ username }}"
        password: "{{ password }}"
        db_instance_class: "{{ db_instance_class }}"
        allocated_storage: "{{ allocated_storage }}"
        deletion_protection: true
        tags:
          Name: "{{ instance_id }}"
          Created_by: Ansible rds_instance tests
      register: result

    - ansible.builtin.assert:
        that:
          - result.changed
          - result.db_instance_identifier == '{{ instance_id }}'
          - result.tags | length == 2
          - result.tags.Name == '{{ instance_id }}'
          - result.tags.Created_by == 'Ansible rds_instance tests'
          - result.deletion_protection == True

    - name: Create a mariadb instance (idempotence) - check_mode
      amazon.aws.rds_instance:
        id: "{{ instance_id }}"
        state: present
        engine: mariadb
        username: "{{ username }}"
        password: "{{ password }}"
        db_instance_class: "{{ db_instance_class }}"
        allocated_storage: "{{ allocated_storage }}"
        deletion_protection: true
        tags:
          Name: "{{ instance_id }}"
          Created_by: Ansible rds_instance tests
      register: result
      check_mode: true

    - ansible.builtin.assert:
        that:
          - not result.changed

    - name: Create a mariadb instance (idempotence)
      amazon.aws.rds_instance:
        id: "{{ instance_id }}"
        state: present
        engine: mariadb
        username: "{{ username }}"
        password: "{{ password }}"
        db_instance_class: "{{ db_instance_class }}"
        allocated_storage: "{{ allocated_storage }}"
        deletion_protection: true
        tags:
          Name: "{{ instance_id }}"
          Created_by: Ansible rds_instance tests
      register: result

    - ansible.builtin.assert:
        that:
          - not result.changed
          - result.db_instance_identifier == '{{ instance_id }}'
          - result.tags | length == 2
          - result.tags.Name == '{{ instance_id }}'
          - result.tags.Created_by == 'Ansible rds_instance tests'
          - result.deletion_protection == True

    # ------------------------------------------------------------------------------------------
    # Test stopping / rebooting instances

    - name: Reboot a stopped instance - check_mode
      amazon.aws.rds_instance:
        id: "{{ instance_id }}"
        state: rebooted
      register: result
      check_mode: true

    - ansible.builtin.assert:
        that:
          - result.changed

    - name: Reboot a stopped instance
      amazon.aws.rds_instance:
        id: "{{ instance_id }}"
        state: rebooted
      register: result

    - ansible.builtin.assert:
        that:
          - result.changed

    # ------------------------------------------------------------------------------------------

    - name: Stop the instance - check_mode
      amazon.aws.rds_instance:
        id: "{{ instance_id }}"
        state: stopped
      register: result
      check_mode: true

    - ansible.builtin.assert:
        that:
          - result.changed

    - name: Stop the instance
      amazon.aws.rds_instance:
        id: "{{ instance_id }}"
        state: stopped
      register: result

    - ansible.builtin.assert:
        that:
          - result.changed

    - name: Stop the instance (idempotence) - check_mode
      amazon.aws.rds_instance:
        id: "{{ instance_id }}"
        state: stopped
      register: result
      check_mode: true

    - ansible.builtin.assert:
        that:
          - not result.changed

    - name: Stop the instance (idempotence)
      amazon.aws.rds_instance:
        id: "{{ instance_id }}"
        state: stopped
      register: result

    - ansible.builtin.assert:
        that:
          - not result.changed

    # ------------------------------------------------------------------------------------------

    - name: Start the instance - check_mode
      amazon.aws.rds_instance:
        id: "{{ instance_id }}"
        state: started
      register: result
      check_mode: true

    - ansible.builtin.assert:
        that:
          - result.changed

    - name: Start the instance
      amazon.aws.rds_instance:
        id: "{{ instance_id }}"
        state: started
      register: result

    - ansible.builtin.assert:
        that:
          - result.changed

    - name: Start the instance (idempotence) - check_mode
      amazon.aws.rds_instance:
        id: "{{ instance_id }}"
        state: started
      register: result
      check_mode: true

    - ansible.builtin.assert:
        that:
          - not result.changed

    - name: Start the instance (idempotence)
      amazon.aws.rds_instance:
        id: "{{ instance_id }}"
        state: started
      register: result

    - ansible.builtin.assert:
        that:
          - not result.changed

    # ------------------------------------------------------------------------------------------
    # Test deletion protection / deletion

    - name: Ensure instance exists prior to deleting
      amazon.aws.rds_instance_info:
        db_instance_identifier: "{{ instance_id }}"
      register: db_info

    - ansible.builtin.assert:
        that:
          - db_info.instances | length == 1

    - name: Attempt to delete DB instance with deletion protection (should fail)
      amazon.aws.rds_instance:
        id: "{{ instance_id }}"
        state: absent
        skip_final_snapshot: true
      register: result
      ignore_errors: true

    - ansible.builtin.assert:
        that:
          - result.failed

    - name: Turn off deletion protection
      amazon.aws.rds_instance:
        id: "{{ instance_id }}"
        deletion_protection: false
      register: result

    - ansible.builtin.assert:
        that:
          - result.changed
          - result.deletion_protection == False

    - name: Delete the instance - check_mode
      amazon.aws.rds_instance:
        id: "{{ instance_id }}"
        state: absent
        skip_final_snapshot: true
      register: result
      check_mode: true

    - ansible.builtin.assert:
        that:
          - result.changed

    - name: Delete the instance
      amazon.aws.rds_instance:
        id: "{{ instance_id }}"
        state: absent
        skip_final_snapshot: true
      register: result

    - ansible.builtin.assert:
        that:
          - result.changed

    - name: Ensure instance was deleted
      amazon.aws.rds_instance_info:
        db_instance_identifier: "{{ instance_id }}"
      register: db_info

    - ansible.builtin.assert:
        that:
          - db_info.instances | length == 0

    - name: Delete the instance (idempotence) - check_mode
      amazon.aws.rds_instance:
        id: "{{ instance_id }}"
        state: absent
        skip_final_snapshot: true
      register: result
      check_mode: true

    - ansible.builtin.assert:
        that:
          - not result.changed

    - name: Delete the instance (idempotence)
      amazon.aws.rds_instance:
        id: "{{ instance_id }}"
        state: absent
        skip_final_snapshot: true
      register: result

    - ansible.builtin.assert:
        that:
          - not result.changed

  always:
    - name: Remove DB instance
      amazon.aws.rds_instance:
        id: "{{ instance_id }}"
        state: absent
        skip_final_snapshot: true
        wait: false
      ignore_errors: true

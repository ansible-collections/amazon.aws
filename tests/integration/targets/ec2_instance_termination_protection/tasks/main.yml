---
- module_defaults:
    group/aws:
      access_key: "{{ aws_access_key }}"
      secret_key: "{{ aws_secret_key }}"
      session_token: "{{ security_token | default(omit) }}"
      region: "{{ aws_region }}"
  block:
    - name: Create instance with termination protection (check mode)
      amazon.aws.ec2_instance:
        name: "{{ resource_prefix }}-termination-protection"
        image_id: "{{ ec2_ami_id }}"
        tags:
          TestId: "{{ resource_prefix }}"
        security_groups: "{{ sg.group_id }}"
        vpc_subnet_id: "{{ testing_subnet_b.subnet.id }}"
        termination_protection: true
        instance_type: "{{ ec2_instance_type }}"
        state: running
        wait: true
      check_mode: true
      register: create_instance_check_mode_results

    - name: Check the returned value for the earlier task
      ansible.builtin.assert:
        that:
          - create_instance_check_mode_results is changed
          - create_instance_check_mode_results.spec.DisableApiTermination == True

    - name: Create instance with termination protection
      amazon.aws.ec2_instance:
        name: "{{ resource_prefix }}-termination-protection"
        image_id: "{{ ec2_ami_id }}"
        tags:
          TestId: "{{ resource_prefix }}"
        security_groups: "{{ sg.group_id }}"
        vpc_subnet_id: "{{ testing_subnet_b.subnet.id }}"
        termination_protection: true
        instance_type: "{{ ec2_instance_type }}"
        state: running
        wait: true
      register: create_instance_results

    - ansible.builtin.set_fact:
        instance_id: "{{ create_instance_results.instances[0].instance_id }}"

    - name: Check return values of the create instance task
      ansible.builtin.assert:
        that:
          - create_instance_results.instances | length > 0
          - create_instance_results.instances.0.state.name == 'running'
          - create_instance_results.spec.DisableApiTermination

    - name: Get info on termination protection
      amazon.aws.ec2_instance_info:
        instance_ids:
          - "{{ instance_id }}"
        include_attributes:
          - disableApiTermination
      register: instance_info

    - name: Assert termination protection status did not change in check_mode
      ansible.builtin.assert:
        that:
          - instance_info.instances.0.attributes.disable_api_termination.value is true

    - name: Create instance with termination protection (check mode) (idempotent)
      amazon.aws.ec2_instance:
        name: "{{ resource_prefix }}-termination-protection"
        image_id: "{{ ec2_ami_id }}"
        tags:
          TestId: "{{ resource_prefix }}"
        security_groups: "{{ sg.group_id }}"
        vpc_subnet_id: "{{ testing_subnet_b.subnet.id }}"
        termination_protection: true
        instance_type: "{{ ec2_instance_type }}"
        state: running
        wait: true
      check_mode: true
      register: create_instance_check_mode_results

    - name: Check the returned value for the earlier task
      ansible.builtin.assert:
        that:
          - create_instance_check_mode_results is not changed

    - name: Create instance with termination protection (idempotent)
      amazon.aws.ec2_instance:
        name: "{{ resource_prefix }}-termination-protection"
        image_id: "{{ ec2_ami_id }}"
        tags:
          TestId: "{{ resource_prefix }}"
        security_groups: "{{ sg.group_id }}"
        vpc_subnet_id: "{{ testing_subnet_b.subnet.id }}"
        termination_protection: true
        instance_type: "{{ ec2_instance_type }}"
        state: running
        wait: true
      register: create_instance_results

    - name: Check return values of the create instance task
      ansible.builtin.assert:
        that:
          - not create_instance_results.changed
          - create_instance_results.instances | length > 0

    - name: Try to terminate the instance (expected to fail)
      amazon.aws.ec2_instance:
        filters:
          tag:Name: "{{ resource_prefix }}-termination-protection"
        state: absent
      failed_when: "'Unable to terminate instances' not in terminate_instance_results.msg"
      register: terminate_instance_results

    - name: Set termination protection to false (check_mode)
      amazon.aws.ec2_instance:
        name: "{{ resource_prefix }}-termination-protection"
        image_id: "{{ ec2_ami_id }}"
        tags:
          TestId: "{{ resource_prefix }}"
        termination_protection: false
        instance_type: "{{ ec2_instance_type }}"
        vpc_subnet_id: "{{ testing_subnet_b.subnet.id }}"
      check_mode: true
      register: set_termination_protectioncheck_mode_results

    - name: Check return value
      ansible.builtin.assert:
        that:
          - set_termination_protectioncheck_mode_results.changed

    - name: Get info on termination protection
      amazon.aws.ec2_instance_info:
        instance_ids:
          - "{{ instance_id }}"
        include_attributes:
          - disableApiTermination
      register: instance_info

    - name: Assert termination protection status did not change in check_mode
      ansible.builtin.assert:
        that:
          - instance_info.instances.0.attributes.disable_api_termination.value is true

    - name: Set termination protection to false
      amazon.aws.ec2_instance:
        name: "{{ resource_prefix }}-termination-protection"
        image_id: "{{ ec2_ami_id }}"
        tags:
          TestId: "{{ resource_prefix }}"
        termination_protection: false
        instance_type: "{{ ec2_instance_type }}"
        vpc_subnet_id: "{{ testing_subnet_b.subnet.id }}"
      register: set_termination_protection_results

    - name: Check return value
      ansible.builtin.assert:
        that:
          - set_termination_protection_results.changed

    - name: Get info on termination protection
      amazon.aws.ec2_instance_info:
        instance_ids:
          - "{{ instance_id }}"
        include_attributes:
          - disableApiTermination
      register: instance_info

    - name: Assert termination protection status did not change in check_mode
      ansible.builtin.assert:
        that:
          - instance_info.instances.0.attributes.disable_api_termination.value is false

    - name: Set termination protection to false (idempotent)
      amazon.aws.ec2_instance:
        name: "{{ resource_prefix }}-termination-protection"
        image_id: "{{ ec2_ami_id }}"
        tags:
          TestId: "{{ resource_prefix }}"
        termination_protection: false
        instance_type: "{{ ec2_instance_type }}"
        vpc_subnet_id: "{{ testing_subnet_b.subnet.id }}"
      register: set_termination_protection_results

    - name: Check return value
      ansible.builtin.assert:
        that:
          - not set_termination_protection_results.changed

    - name: Set termination protection to true
      amazon.aws.ec2_instance:
        name: "{{ resource_prefix }}-termination-protection"
        image_id: "{{ ec2_ami_id }}"
        tags:
          TestId: "{{ resource_prefix }}"
        termination_protection: true
        instance_type: "{{ ec2_instance_type }}"
        vpc_subnet_id: "{{ testing_subnet_b.subnet.id }}"
      register: set_termination_protection_results

    - name: Check return value
      ansible.builtin.assert:
        that:
          - set_termination_protection_results.changed
          - set_termination_protection_results.changes[0].DisableApiTermination.Value

    - name: Set termination protection to true (idempotent)
      amazon.aws.ec2_instance:
        name: "{{ resource_prefix }}-termination-protection"
        image_id: "{{ ec2_ami_id }}"
        tags:
          TestId: "{{ resource_prefix }}"
        termination_protection: true
        instance_type: "{{ ec2_instance_type }}"
        vpc_subnet_id: "{{ testing_subnet_b.subnet.id }}"
      register: set_termination_protection_results

    - name: Check return value
      ansible.builtin.assert:
        that:
          - not set_termination_protection_results.changed

    - name: Set termination protection to false (so we can terminate instance)
      amazon.aws.ec2_instance:
        name: "{{ resource_prefix }}-termination-protection"
        image_id: "{{ ec2_ami_id }}"
        tags:
          TestId: "{{ resource_prefix }}"
        termination_protection: false
        instance_type: "{{ ec2_instance_type }}"
        vpc_subnet_id: "{{ testing_subnet_b.subnet.id }}"
      register: set_termination_protection_results

    - name: Terminate the instance
      amazon.aws.ec2_instance:
        filters:
          tag:TestId: "{{ resource_prefix }}"
        state: absent

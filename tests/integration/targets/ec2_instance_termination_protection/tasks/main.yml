- module_defaults:
    group/aws:
      access_key: "{{ aws_access_key }}"
      secret_key: "{{ aws_secret_key }}"
      session_token: "{{ security_token | default(omit) }}"
      region: "{{ aws_region }}"
  block:
    - name: Create instance with termination protection (check mode)
      ec2_instance:
        name: "{{ resource_prefix }}-termination-protection"
        image_id: "{{ ec2_ami_id }}"
        tags:
          TestId: "{{ resource_prefix }}"
        security_groups: "{{ sg.group_id }}"
        vpc_subnet_id: "{{ testing_subnet_b.subnet.id }}"
        termination_protection: true
        instance_type: "{{ ec2_instance_type }}"
        state: running
        wait: yes
      check_mode: yes
      register: create_instance_check_mode_results

    - name: Check the returned value for the earlier task
      assert:
        that:
          - create_instance_check_mode_results is changed
          - create_instance_check_mode_results.spec.DisableApiTermination == True

    - name: Create instance with termination protection
      ec2_instance:
        name: "{{ resource_prefix }}-termination-protection"
        image_id: "{{ ec2_ami_id }}"
        tags:
          TestId: "{{ resource_prefix }}"
        security_groups: "{{ sg.group_id }}"
        vpc_subnet_id: "{{ testing_subnet_b.subnet.id }}"
        termination_protection: true
        instance_type: "{{ ec2_instance_type }}"
        state: running
        wait: yes
      register: create_instance_results

    - set_fact:
        instance_id: '{{ create_instance_results.instances[0].instance_id }}'

    - name: Check return values of the create instance task
      assert:
        that:
          - "{{ create_instance_results.instances | length }} > 0"
          - "'{{ create_instance_results.instances.0.state.name }}' == 'running'"
          - "'{{ create_instance_results.spec.DisableApiTermination }}'"

    - name: Get info on termination protection
      command: 'aws ec2 describe-instance-attribute --attribute disableApiTermination --instance-id {{ instance_id }}'
      environment:
        AWS_ACCESS_KEY_ID: "{{ aws_access_key }}"
        AWS_SECRET_ACCESS_KEY: "{{ aws_secret_key }}"
        AWS_SESSION_TOKEN: "{{ security_token | default('') }}"
        AWS_DEFAULT_REGION: "{{ aws_region }}"
      register: instance_termination_check

    - name: convert it to an object
      set_fact:
        instance_termination_status: "{{ instance_termination_check.stdout | from_json }}"

    - name: Assert termination protection status did not change in check_mode
      assert:
        that:
          - instance_termination_status.DisableApiTermination.Value == true

    - name: Create instance with termination protection (check mode) (idempotent)
      ec2_instance:
        name: "{{ resource_prefix }}-termination-protection"
        image_id: "{{ ec2_ami_id }}"
        tags:
          TestId: "{{ resource_prefix }}"
        security_groups: "{{ sg.group_id }}"
        vpc_subnet_id: "{{ testing_subnet_b.subnet.id }}"
        termination_protection: true
        instance_type: "{{ ec2_instance_type }}"
        state: running
        wait: yes
      check_mode: yes
      register: create_instance_check_mode_results

    - name: Check the returned value for the earlier task
      assert:
        that:
          - create_instance_check_mode_results is not changed

    - name: Create instance with termination protection (idempotent)
      ec2_instance:
        name: "{{ resource_prefix }}-termination-protection"
        image_id: "{{ ec2_ami_id }}"
        tags:
          TestId: "{{ resource_prefix }}"
        security_groups: "{{ sg.group_id }}"
        vpc_subnet_id: "{{ testing_subnet_b.subnet.id }}"
        termination_protection: true
        instance_type: "{{ ec2_instance_type }}"
        state: running
        wait: yes
      register: create_instance_results

    - name: Check return values of the create instance task
      assert:
        that:
          - "{{ not create_instance_results.changed }}"
          - "{{ create_instance_results.instances | length }} > 0"

    - name: Try to terminate the instance (expected to fail)
      ec2_instance:
        filters:
          tag:Name: "{{ resource_prefix }}-termination-protection"
        state: absent
      failed_when: "'Unable to terminate instances' not in terminate_instance_results.msg"
      register: terminate_instance_results

    - name: Set termination protection to false (check_mode)
      ec2_instance:
        name: "{{ resource_prefix }}-termination-protection"
        image_id: "{{ ec2_ami_id }}"
        tags:
          TestId: "{{ resource_prefix }}"
        termination_protection: false
        instance_type: "{{ ec2_instance_type }}"
        vpc_subnet_id: "{{ testing_subnet_b.subnet.id }}"
      check_mode: True
      register: set_termination_protectioncheck_mode_results

    - name: Check return value
      assert:
        that:
          - "{{ set_termination_protectioncheck_mode_results.changed }}"

    - name: Get info on termination protection
      command: 'aws ec2 describe-instance-attribute --attribute disableApiTermination --instance-id {{ instance_id }}'
      environment:
        AWS_ACCESS_KEY_ID: "{{ aws_access_key }}"
        AWS_SECRET_ACCESS_KEY: "{{ aws_secret_key }}"
        AWS_SESSION_TOKEN: "{{ security_token | default('') }}"
        AWS_DEFAULT_REGION: "{{ aws_region }}"
      register: instance_termination_check

    - name: convert it to an object
      set_fact:
        instance_termination_status: "{{ instance_termination_check.stdout | from_json }}"

    - assert:
        that:
          - instance_termination_status.DisableApiTermination.Value == true

    - name: Set termination protection to false
      ec2_instance:
        name: "{{ resource_prefix }}-termination-protection"
        image_id: "{{ ec2_ami_id }}"
        tags:
          TestId: "{{ resource_prefix }}"
        termination_protection: false
        instance_type: "{{ ec2_instance_type }}"
        vpc_subnet_id: "{{ testing_subnet_b.subnet.id }}"
      register: set_termination_protection_results

    - name: Check return value
      assert:
        that:
          - set_termination_protection_results.changed

    - name: Get info on termination protection
      command: 'aws ec2 describe-instance-attribute --attribute disableApiTermination --instance-id {{ instance_id }}'
      environment:
        AWS_ACCESS_KEY_ID: "{{ aws_access_key }}"
        AWS_SECRET_ACCESS_KEY: "{{ aws_secret_key }}"
        AWS_SESSION_TOKEN: "{{ security_token | default('') }}"
        AWS_DEFAULT_REGION: "{{ aws_region }}"
      register: instance_termination_check

    - name: convert it to an object
      set_fact:
        instance_termination_status: "{{ instance_termination_check.stdout | from_json }}"

    - assert:
        that:
          - instance_termination_status.DisableApiTermination.Value == false

    - name: Set termination protection to false (idempotent)
      ec2_instance:
        name: "{{ resource_prefix }}-termination-protection"
        image_id: "{{ ec2_ami_id }}"
        tags:
          TestId: "{{ resource_prefix }}"
        termination_protection: false
        instance_type: "{{ ec2_instance_type }}"
        vpc_subnet_id: "{{ testing_subnet_b.subnet.id }}"
      register: set_termination_protection_results

    - name: Check return value
      assert:
        that:
          - "{{ not set_termination_protection_results.changed }}"

    - name: Set termination protection to true
      ec2_instance:
        name: "{{ resource_prefix }}-termination-protection"
        image_id: "{{ ec2_ami_id }}"
        tags:
          TestId: "{{ resource_prefix }}"
        termination_protection: true
        instance_type: "{{ ec2_instance_type }}"
        vpc_subnet_id: "{{ testing_subnet_b.subnet.id }}"
      register: set_termination_protection_results

    - name: Check return value
      assert:
        that:
          - "{{ set_termination_protection_results.changed }}"
          - "{{ set_termination_protection_results.changes[0].DisableApiTermination.Value }}"

    - name: Set termination protection to true (idempotent)
      ec2_instance:
        name: "{{ resource_prefix }}-termination-protection"
        image_id: "{{ ec2_ami_id }}"
        tags:
          TestId: "{{ resource_prefix }}"
        termination_protection: true
        instance_type: "{{ ec2_instance_type }}"
        vpc_subnet_id: "{{ testing_subnet_b.subnet.id }}"
      register: set_termination_protection_results

    - name: Check return value
      assert:
        that:
          - "{{ not set_termination_protection_results.changed }}"

    - name: Set termination protection to false (so we can terminate instance)
      ec2_instance:
        name: "{{ resource_prefix }}-termination-protection"
        image_id: "{{ ec2_ami_id }}"
        tags:
          TestId: "{{ resource_prefix }}"
        termination_protection: false
        instance_type: "{{ ec2_instance_type }}"
        vpc_subnet_id: "{{ testing_subnet_b.subnet.id }}"
      register: set_termination_protection_results

    - name: Terminate the instance
      ec2_instance:
        filters:
          tag:TestId: "{{ resource_prefix }}"
        state: absent

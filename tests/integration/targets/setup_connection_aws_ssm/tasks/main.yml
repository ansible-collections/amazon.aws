---
## Task file for setup/teardown AWS resources for aws_ssm integration testing
- name: 'aws_ssm connection plugin integration test resource creation'
  collections:
    - amazon.aws
  module_defaults:
    group/aws:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token | default(omit) }}'
      region: '{{ aws_region }}'
  block:

    - name: Ensure IAM instance role exists
      iam_role:
        name: "ansible-test-{{tiny_prefix}}-aws-ssm-role"
        assume_role_policy_document: "{{ lookup('file','ec2-trust-policy.json') }}"
        state: present
        create_instance_profile: yes
        managed_policy:
        - AmazonSSMManagedInstanceCore
        wait: True
      register: role_output

    - name: Lookup AMI configuration
      set_fact:
        ami_configuration: '{{ ami_details[(target_os | default("fedora"))] }}'

    - name: AMI Lookup
      ec2_ami_info:
        owners: '{{ ami_configuration.owner }}'
        filters:
          name: '{{ ami_configuration.name }}'
      register: ec2_amis

    - name: Set facts with latest AMIs
      vars:
        latest_ami: '{{ ec2_amis.images | sort(attribute="creation_date") | last }}'
      set_fact:
        latest_ami_id: '{{ latest_ami.image_id }}'

    # (Local installation of the SSM **client** which is then used by the plugin)
    - name: Install Session Manager Client for Debian/Ubuntu
      include_tasks: debian.yml
      when: ansible_distribution in ["Ubuntu", "Debian"]
      register: install_plugin_debian

    - name: Install Session Manager Client for RedHat/Amazon
      include_tasks: redhat.yml
      when: ansible_distribution in ["CentOS", "RedHat", "Amazon", "Fedora"]
      register: install_plugin_redhat

    - block:
        - name: Fail if the plugin was not installed
          fail:
            msg: The distribution does not contain the required Session Manager Plugin
          when:
            - install_plugin_debian is skipped
            - install_plugin_redhat is skipped
      always:
        - debug:
            var: ansible_distribution

    - name: Create EC2 instance
      ec2_instance:
        instance_type: "{{ instance_type }}"
        ebs_optimized: True
        image_id: "{{ latest_ami_id }}"
        wait: "yes"
        instance_role: "{{ role_output.iam_role.role_name }}"
        name: "{{ resource_prefix }}-connection-aws-ssm"
        user_data: "{{ ami_configuration.user_data }}"
        state: running
        tags:
          TestPrefix: '{{ resource_prefix }}'
      register: instance_output

    - name: create a KMS key
      aws_kms:
        alias: '{{ kms_key_name }}'
        tags:
          ansible-test: '{{ resource_prefix }}'
      when:
        - encrypted_bucket | default(False)

    - name: Create S3 bucket
      s3_bucket:
        name: "{{ s3_bucket_name }}"
      register: s3_output

    # Note: This bucket will **NOT** be deleted, there are some nasty gotchas with the time it takes
    # to properly enable encryption so we have a permanant bucket which is automatically emptied
    - name: Ensure encrypted bucket exists
      s3_bucket:
        name: "{{ encrypted_s3_bucket_name }}"

    - name: Create Inventory file
      template:
        dest: "{{ playbook_dir }}/ssm_inventory"
        src: inventory-combined.aws_ssm.j2

    - name: Create AWS Keys Environement
      template:
        dest: "{{ playbook_dir }}/aws-env-vars.sh"
        src: aws-env-vars.j2
      no_log: yes

  always:
    - name: Create EC2 Linux vars_to_delete.yml
      template:
        dest: "{{ playbook_dir }}/instance_vars_to_delete.yml"
        src: ec2_instance_vars_to_delete.yml.j2
      ignore_errors: yes
      when:
        - instance_output is successful

    - name: Create IAM Role vars_to_delete.yml
      template:
        dest: "{{ playbook_dir }}/iam_role_vars_to_delete.yml"
        src: iam_role_vars_to_delete.yml.j2
      when:
        - role_output is successful
      ignore_errors: yes

    - name: Create S3.yml
      template:
        dest: "{{ playbook_dir }}/s3_vars_to_delete.yml"
        src: s3_vars_to_delete.yml.j2
      when:
        - s3_output is successful
      ignore_errors: yes

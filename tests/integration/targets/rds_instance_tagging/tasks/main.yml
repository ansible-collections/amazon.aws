---
- name: rds_instance / tagging integration tests
  collections:
    - community.aws
  module_defaults:
    group/aws:
      access_key: "{{ aws_access_key }}"
      secret_key: "{{ aws_secret_key }}"
      session_token: "{{ security_token | default(omit) }}"
      region: "{{ aws_region }}"
  block:
    - name: Test tagging db with storage type gp3
      ansible.builtin.import_tasks: test_tagging_gp3.yml
    - name: Ensure the resource doesn't exist
      amazon.aws.rds_instance:
        id: "{{ instance_id }}"
        state: absent
        skip_final_snapshot: true
      register: result

    - ansible.builtin.assert:
        that:
          - not result.changed
      ignore_errors: true

    # Test invalid bad options
    - name: Create a DB instance with an invalid engine
      amazon.aws.rds_instance:
        id: "{{ instance_id }}"
        state: present
        engine: thisisnotavalidengine
        username: "{{ username }}"
        password: "{{ password }}"
        db_instance_class: "{{ db_instance_class }}"
        allocated_storage: "{{ allocated_storage }}"
      register: result
      ignore_errors: true

    - ansible.builtin.assert:
        that:
          - result.failed
          - '"value of engine must be one of" in result.msg'

    # Test creation, adding tags and enabling encryption
    - name: Create a mariadb instance
      amazon.aws.rds_instance:
        id: "{{ instance_id }}"
        state: present
        engine: mariadb
        username: "{{ username }}"
        password: "{{ password }}"
        db_instance_class: "{{ db_instance_class }}"
        allocated_storage: "{{ allocated_storage }}"
        storage_encrypted: true
        tags:
          Name: "{{ instance_id }}"
          Created_by: Ansible rds_instance tests
      register: result

    - ansible.builtin.assert:
        that:
          - result.changed
          - result.db_instance_identifier == '{{ instance_id }}'
          - result.tags | length == 2
          - result.tags.Name == '{{ instance_id }}'
          - result.tags.Created_by == 'Ansible rds_instance tests'
          - result.kms_key_id
          - result.storage_encrypted == true

    - name: Test impotency omitting tags - check_mode
      amazon.aws.rds_instance:
        id: "{{ instance_id }}"
        state: present
        engine: mariadb
        username: "{{ username }}"
        password: "{{ password }}"
        db_instance_class: "{{ db_instance_class }}"
        allocated_storage: "{{ allocated_storage }}"
      register: result
      check_mode: true

    - ansible.builtin.assert:
        that:
          - not result.changed

    - name: Test impotency omitting tags
      amazon.aws.rds_instance:
        id: "{{ instance_id }}"
        state: present
        engine: mariadb
        username: "{{ username }}"
        password: "{{ password }}"
        db_instance_class: "{{ db_instance_class }}"
        allocated_storage: "{{ allocated_storage }}"
      register: result

    - ansible.builtin.assert:
        that:
          - not result.changed
          - result.db_instance_identifier
          - result.tags | length == 2

    - name: Idempotence with minimal options
      amazon.aws.rds_instance:
        id: "{{ instance_id }}"
        state: present
      register: result

    - ansible.builtin.assert:
        that:
          - not result.changed
          - result.db_instance_identifier
          - result.tags | length == 2

    - name: Test tags are not purged if purge_tags is False
      amazon.aws.rds_instance:
        db_instance_identifier: "{{ instance_id }}"
        state: present
        engine: mariadb
        username: "{{ username }}"
        password: "{{ password }}"
        db_instance_class: "{{ db_instance_class }}"
        allocated_storage: "{{ allocated_storage }}"
        tags: {}
        purge_tags: false
      register: result

    - ansible.builtin.assert:
        that:
          - not result.changed
          - result.tags | length == 2

    - name: Add a tag and remove a tag - check_mode
      amazon.aws.rds_instance:
        db_instance_identifier: "{{ instance_id }}"
        state: present
        tags:
          Name: "{{ instance_id }}-new"
          Created_by: Ansible rds_instance tests
        purge_tags: true
      register: result
      check_mode: true

    - ansible.builtin.assert:
        that:
          - result.changed

    - name: Add a tag and remove a tag
      amazon.aws.rds_instance:
        db_instance_identifier: "{{ instance_id }}"
        state: present
        tags:
          Name: "{{ instance_id }}-new"
          Created_by: Ansible rds_instance tests
        purge_tags: true
      register: result

    - ansible.builtin.assert:
        that:
          - result.changed
          - result.tags | length == 2
          - result.tags.Name == '{{ instance_id }}-new'

    - name: Add a tag and remove a tag (idempotence) - check_mode
      amazon.aws.rds_instance:
        db_instance_identifier: "{{ instance_id }}"
        state: present
        tags:
          Name: "{{ instance_id }}-new"
          Created_by: Ansible rds_instance tests
        purge_tags: true
      register: result
      check_mode: true

    - ansible.builtin.assert:
        that:
          - not result.changed

    - name: Add a tag and remove a tag (idempotence)
      amazon.aws.rds_instance:
        db_instance_identifier: "{{ instance_id }}"
        state: present
        tags:
          Name: "{{ instance_id }}-new"
          Created_by: Ansible rds_instance tests
        purge_tags: true
      register: result

    - ansible.builtin.assert:
        that:
          - not result.changed
          - result.tags | length == 2
          - result.tags.Name == '{{ instance_id }}-new'

  always:
    - name: Remove DB instance
      amazon.aws.rds_instance:
        id: "{{ instance_id }}"
        state: absent
        skip_final_snapshot: true
        wait: false
      ignore_errors: true

---
# Test suite for ec2_ami
- module_defaults:
    group/aws:
      aws_region: '{{ aws_region }}'
      access_key: '{{ aws_access_key }}'
      secret_key: '{{ aws_secret_key }}'
      session_token: '{{ security_token | default(omit) }}'
  collections:
    - amazon.aws
  block:

    # AWS CLI is needed until there's a module to get instance uefi data
    - name: Install AWS CLI
      pip:
        name: awscli==1.25.83
        state: present

    # ============================================================

    # SETUP: vpc, ec2 key pair, subnet, security group, ec2 instance, snapshot
    - name: create a VPC to work in
      ec2_vpc_net:
        cidr_block: '{{ vpc_cidr }}'
        state: present
        name: '{{ ec2_ami_name }}_setup'
        resource_tags:
          Name: '{{ ec2_ami_name }}_setup'
      register: setup_vpc

    - name: create a key pair to use for creating an ec2 instance
      ec2_key:
        name: '{{ ec2_ami_name }}_setup'
        state: present
      register: setup_key

    - name: create a subnet to use for creating an ec2 instance
      ec2_vpc_subnet:
        az: '{{ availability_zone }}'
        tags: '{{ ec2_ami_name }}_setup'
        vpc_id: '{{ setup_vpc.vpc.id }}'
        cidr: '{{ subnet_cidr }}'
        state: present
        resource_tags:
          Name: '{{ ec2_ami_name }}_setup'
      register: setup_subnet

    - name: create a security group to use for creating an ec2 instance
      ec2_security_group:
        name: '{{ ec2_ami_name }}_setup'
        description: 'created by Ansible integration tests'
        state: present
        vpc_id: '{{ setup_vpc.vpc.id }}'
      register: setup_sg

    - name: provision ec2 instance to create an image
      ec2_instance:
        state: running
        key_name: '{{ setup_key.key.name }}'
        instance_type: t2.micro
        image_id: '{{ ec2_ami_id }}'
        tags:
          '{{ec2_ami_name}}_instance_setup': 'integration_tests'
        security_group: '{{ setup_sg.group_id }}'
        vpc_subnet_id: '{{ setup_subnet.subnet.id }}'
        volumes:
          - device_name: /dev/sdc
            virtual_name: ephemeral1
        wait: yes
      register: setup_instance

    - name: Store EC2 Instance ID
      set_fact:
        ec2_instance_id: '{{ setup_instance.instances[0].instance_id }}'

    - name: take a snapshot of the instance to create an image
      ec2_snapshot:
        instance_id: '{{ ec2_instance_id }}'
        device_name: '{{ ec2_ami_root_disk }}'
        state: present
      register: setup_snapshot

    # note: the current CI supported instance types (t2, t3, m1) do not support uefi boot mode + tpm_support
    # disabling the task as aws documentation states that support for t3 will be coming soon
    # - name: get instance UEFI data
    #   command: aws ec2 get-instance-uefi-data --instance-id {{ ec2_instance_id }} --region {{ aws_region }}
    #   environment:
    #     AWS_ACCESS_KEY_ID: "{{ aws_access_key }}"
    #     AWS_SECRET_ACCESS_KEY: "{{ aws_secret_key }}"
    #     AWS_SESSION_TOKEN: "{{ security_token | default('') }}"
    #     AWS_DEFAULT_REGION: "{{ aws_region }}"
    #   register: instance_uefi_data_output

    # - name: Convert it to an object
    #   set_fact:
    #     instance_uefi_data: "{{ instance_uefi_data_output.stdout | from_json }}"

    # ============================================================

    - name: test clean failure if not providing image_id or name with state=present
      ec2_ami:
        instance_id: '{{ ec2_instance_id }}'
        state: present
        description: '{{ ec2_ami_description }}'
        tags:
          Name: '{{ ec2_ami_name }}_ami'
        wait: yes
        root_device_name: '{{ ec2_ami_root_disk }}'
      register: result
      ignore_errors: yes

    - name: assert error message is helpful
      assert:
        that:
          - result.failed
          - "result.msg == 'one of the following is required: name, image_id'"

    # ============================================================

    - name: create an image from the instance (check mode)
      ec2_ami:
        instance_id: '{{ ec2_instance_id }}'
        state: present
        name: '{{ ec2_ami_name }}_ami'
        description: '{{ ec2_ami_description }}'
        tags:
          Name: '{{ ec2_ami_name }}_ami'
        wait: yes
        root_device_name: '{{ ec2_ami_root_disk }}'
      check_mode: true
      register: check_mode_result

    - name: assert that check_mode result is changed
      assert:
        that:
          - check_mode_result is changed

    - name: create an image from the instance
      ec2_ami:
        instance_id: '{{ ec2_instance_id }}'
        state: present
        name: '{{ ec2_ami_name }}_ami'
        description: '{{ ec2_ami_description }}'
        tags:
          Name: '{{ ec2_ami_name }}_ami'
        wait: yes
        root_device_name: '{{ ec2_ami_root_disk }}'
      register: result

    - name: set image id fact for deletion later
      set_fact:
        ec2_ami_image_id: "{{ result.image_id }}"

    - name: assert that image has been created
      assert:
        that:
          - "result.changed"
          - "result.image_id.startswith('ami-')"
          - "'Name' in result.tags and result.tags.Name == ec2_ami_name + '_ami'"

    - name: get related snapshot info and ensure the tags have been propagated
      ec2_snapshot_info:
        snapshot_ids:
          - "{{ result.block_device_mapping[ec2_ami_root_disk].snapshot_id }}"
      register: snapshot_result

    - name: ensure the tags have been propagated to the snapshot
      assert:
        that:
          - "'tags' in snapshot_result.snapshots[0]"
          - "'Name' in snapshot_result.snapshots[0].tags and snapshot_result.snapshots[0].tags.Name == ec2_ami_name + '_ami'"

    # ============================================================

    - name: create an image from the instance with attached devices with no_device true (check mode)
      ec2_ami:
        name: '{{ ec2_ami_name }}_no_device_true_ami'
        instance_id: '{{ ec2_instance_id }}'
        device_mapping:
          - device_name: /dev/sda1
            volume_size: 10
            delete_on_termination: true
            volume_type: gp2
          - device_name: /dev/sdf
            no_device: yes
        state: present
        wait: yes
        root_device_name: '{{ ec2_ami_root_disk }}'
      check_mode: true
      register: check_mode_result

    - name: assert that check_mode result is changed
      assert:
        that:
          - check_mode_result is changed

    - name: create an image from the instance with attached devices with no_device true
      ec2_ami:
        name: '{{ ec2_ami_name }}_no_device_true_ami'
        instance_id: '{{ ec2_instance_id }}'
        device_mapping:
          - device_name: /dev/sda1
            volume_size: 10
            delete_on_termination: true
            volume_type: gp2
          - device_name: /dev/sdf
            no_device: yes
        state: present
        wait: yes
        root_device_name: '{{ ec2_ami_root_disk }}'
      register: result_no_device_true

    - name: set image id fact for deletion later
      set_fact:
        ec2_ami_no_device_true_image_id: "{{ result_no_device_true.image_id }}"

    - name: assert that image with no_device option yes has been created
      assert:
        that:
          - "result_no_device_true.changed"
          - "'/dev/sdf' not in result_no_device_true.block_device_mapping"

    - name: create an image from the instance with attached devices with no_device false
      ec2_ami:
        name: '{{ ec2_ami_name }}_no_device_false_ami'
        instance_id: '{{ ec2_instance_id }}'
        device_mapping:
          - device_name: /dev/sda1
            volume_size: 10
            delete_on_termination: true
            volume_type: gp2
            no_device: no
        state: present
        wait: yes
        root_device_name: '{{ ec2_ami_root_disk }}'
      register: result_no_device_false

    - name: set image id fact for deletion later
      set_fact:
        ec2_ami_no_device_false_image_id: "{{ result_no_device_false.image_id }}"

    - name: assert that image with no_device option no has been created
      assert:
        that:
          - "result_no_device_false.changed"
          - "'/dev/sda1' in result_no_device_false.block_device_mapping"

    # ============================================================

    - name: gather facts about the image created
      ec2_ami_info:
        image_ids: '{{ ec2_ami_image_id }}'
      register: ami_facts_result
      ignore_errors: true

    - name: assert that the right image was found
      assert:
        that:
          - "ami_facts_result.images[0].image_id == ec2_ami_image_id"

   # some ec2_ami_info tests to test if the filtering is working fine.
   # ============================================================

    - name: gather info about the image
      ec2_ami_info:
        image_ids: '{{ ec2_region_images[ec2_region] }}'
      register: ami_info_result
      ignore_errors: true

    - name: assert that the right image was found
      assert:
        that:
          - "ami_info_result.images[0].image_id == '{{ ec2_region_images[ec2_region] }}'"

    # ============================================================

    - name: gather info about the image using boolean filter
      ec2_ami_info:
        image_ids: '{{ ec2_region_images[ec2_region] }}'
        filters:
          is-public: true
      register: ami_info_result
      ignore_errors: true

    - name: assert that the right image was found
      assert:
        that:
          - "ami_info_result.images[0].image_id == '{{ ec2_region_images[ec2_region] }}'"

    # ============================================================

    - name: gather info about the image using integer filter
      ec2_ami_info:
        image_ids: '{{ ec2_region_images[ec2_region] }}'
        filters:
          # Amazon owned
          owner-id: 137112412989
      register: ami_info_result
      ignore_errors: true

    - name: assert that the right image was found
      assert:
        that:
          - "ami_info_result.images[0].image_id == '{{ ec2_region_images[ec2_region] }}'"

    # ============================================================

    - name: gather info about the image using string filter
      ec2_ami_info:
        image_ids: '{{ ec2_region_images[ec2_region] }}'
        filters:
          name: 'amzn-ami-hvm-2017.09.0.20170930-x86_64-gp2'
      register: ami_info_result
      ignore_errors: true

    - name: assert that the right image was found
      assert:
        that:
          - "ami_info_result.images[0].image_id == '{{ ec2_region_images[ec2_region] }}'"

    # e2_ami_info filtering tests ends
    # ============================================================

    - name: delete the image (check mode)
      ec2_ami:
        instance_id: '{{ ec2_instance_id }}'
        state: absent
        delete_snapshot: yes
        name: '{{ ec2_ami_name }}_ami'
        description: '{{ ec2_ami_description }}'
        image_id: '{{ result.image_id }}'
        tags:
          Name: '{{ ec2_ami_name }}_ami'
        wait: yes
      ignore_errors: true
      check_mode: true
      register: check_mode_result

    - name: assert that check_mode result is changed
      assert:
        that:
          - check_mode_result is changed

    - name: delete the image
      ec2_ami:
        instance_id: '{{ ec2_instance_id }}'
        state: absent
        delete_snapshot: yes
        name: '{{ ec2_ami_name }}_ami'
        description: '{{ ec2_ami_description }}'
        image_id: '{{ result.image_id }}'
        tags:
          Name: '{{ ec2_ami_name }}_ami'
        wait: yes
      ignore_errors: true
      register: result

    - name: assert that the image has been deleted
      assert:
        that:
          - "result.changed"
          - "'image_id' not in result"
          - "result.snapshots_deleted"

    # ==============================================================

    - name: test removing an ami if no image ID is provided (expected failed=true)
      ec2_ami:
        state: absent
      register: result
      ignore_errors: yes

    - name: assert that an image ID is required
      assert:
        that:
          - "result.failed"
          - "result.msg == 'state is absent but all of the following are missing: image_id'"

    # ============================================================

    - name: create an image from the snapshot
      ec2_ami:
        name: '{{ ec2_ami_name }}_ami'
        description: '{{ ec2_ami_description }}'
        state: present
        launch_permissions:
          user_ids: []
        tags:
          Name: '{{ ec2_ami_name }}_ami'
        root_device_name: '{{ ec2_ami_root_disk }}'
        device_mapping:
          - device_name: '{{ ec2_ami_root_disk }}'
            volume_type: gp2
            size: 8
            delete_on_termination: true
            snapshot_id: '{{ setup_snapshot.snapshot_id }}'
      register: result
      ignore_errors: true

    - name: set image id fact for deletion later
      set_fact:
        ec2_ami_image_id: "{{ result.image_id }}"
        ec2_ami_snapshot: "{{ result.block_device_mapping[ec2_ami_root_disk].snapshot_id }}"

    - name: assert a new ami has been created
      assert:
        that:
          - "result.changed"
          - "result.image_id.startswith('ami-')"

    # ============================================================

    - name: test default launch permissions idempotence (check mode)
      ec2_ami:
        description: '{{ ec2_ami_description }}'
        state: present
        name: '{{ ec2_ami_name }}_ami'
        tags:
          Name: '{{ ec2_ami_name }}_ami'
        root_device_name: '{{ ec2_ami_root_disk }}'
        image_id: '{{ result.image_id }}'
        launch_permissions:
          user_ids: []
        device_mapping:
          - device_name: '{{ ec2_ami_root_disk }}'
            volume_type: gp2
            size: 8
            delete_on_termination: true
            snapshot_id: '{{ setup_snapshot.snapshot_id }}'
      check_mode: true
      register: check_mode_result

    - name: assert that check_mode result is not changed
      assert:
        that:
          - check_mode_result is not changed

    - name: test default launch permissions idempotence
      ec2_ami:
        description: '{{ ec2_ami_description }}'
        state: present
        name: '{{ ec2_ami_name }}_ami'
        tags:
          Name: '{{ ec2_ami_name }}_ami'
        root_device_name: '{{ ec2_ami_root_disk }}'
        image_id: '{{ result.image_id }}'
        launch_permissions:
          user_ids: []
        device_mapping:
          - device_name: '{{ ec2_ami_root_disk }}'
            volume_type: gp2
            size: 8
            delete_on_termination: true
            snapshot_id: '{{ setup_snapshot.snapshot_id }}'
      register: result

    - name: assert a new ami has not been created
      assert:
        that:
          - "not result.changed"
          - "result.image_id.startswith('ami-')"

    # ============================================================

    - name: add a tag to the AMI
      ec2_ami:
        state: present
        description: '{{ ec2_ami_description }}'
        image_id: '{{ result.image_id }}'
        name: '{{ ec2_ami_name }}_ami'
        tags:
          New: Tag
        purge_tags: no
      register: result

    - name: assert a tag was added
      assert:
        that:
          - "'Name' in result.tags and result.tags.Name == ec2_ami_name + '_ami'"
          - "'New' in result.tags and result.tags.New == 'Tag'"

    - name: use purge_tags to remove a tag from the AMI
      ec2_ami:
        state: present
        description: '{{ ec2_ami_description }}'
        image_id: '{{ result.image_id }}'
        name: '{{ ec2_ami_name }}_ami'
        tags:
          New: Tag
      register: result

    - name: assert a tag was removed
      assert:
        that:
          - "'Name' not in result.tags"
          - "'New' in result.tags and result.tags.New == 'Tag'"

    # ============================================================

    - name: update AMI launch permissions (check mode)
      ec2_ami:
        state: present
        image_id: '{{ result.image_id }}'
        description: '{{ ec2_ami_description }}'
        tags:
          Name: '{{ ec2_ami_name }}_ami'
        launch_permissions:
          group_names: ['all']
      check_mode: true
      register: check_mode_result

    - name: assert that check_mode result is changed
      assert:
        that:
          - check_mode_result is changed

    - name: update AMI launch permissions
      ec2_ami:
        state: present
        image_id: '{{ result.image_id }}'
        description: '{{ ec2_ami_description }}'
        tags:
          Name: '{{ ec2_ami_name }}_ami'
        launch_permissions:
          group_names: ['all']
      register: result

    - name: assert launch permissions were updated
      assert:
        that:
          - "result.changed"

    # ============================================================

    - name: modify the AMI description (check mode)
      ec2_ami:
        state: present
        image_id: '{{ result.image_id }}'
        name: '{{ ec2_ami_name }}_ami'
        description: '{{ ec2_ami_description }}CHANGED'
        tags:
          Name: '{{ ec2_ami_name }}_ami'
        launch_permissions:
          group_names: ['all']
      check_mode: true
      register: check_mode_result

    - name: assert that check_mode result is changed
      assert:
        that:
          - check_mode_result is changed

    - name: modify the AMI description
      ec2_ami:
        state: present
        image_id: '{{ result.image_id }}'
        name: '{{ ec2_ami_name }}_ami'
        description: '{{ ec2_ami_description }}CHANGED'
        tags:
          Name: '{{ ec2_ami_name }}_ami'
        launch_permissions:
          group_names: ['all']
      register: result

    - name: assert the description changed
      assert:
        that:
          - "result.changed"

    # ============================================================

    - name: remove public launch permissions
      ec2_ami:
        state: present
        image_id: '{{ result.image_id }}'
        name: '{{ ec2_ami_name }}_ami'
        tags:
          Name: '{{ ec2_ami_name }}_ami'
        launch_permissions:
          group_names: []
      register: result

    - name: assert launch permissions were updated
      assert:
        that:
          - "result.changed"

    # ============================================================

    - name: delete ami without deleting the snapshot (default is not to delete)
      ec2_ami:
        instance_id: '{{ ec2_instance_id }}'
        state: absent
        name: '{{ ec2_ami_name }}_ami'
        image_id: '{{ ec2_ami_image_id }}'
        tags:
          Name: '{{ ec2_ami_name }}_ami'
        wait: yes
      ignore_errors: true
      register: result

    - name: assert that the image has been deleted
      assert:
        that:
          - "result.changed"
          - "'image_id' not in result"

    - name: ensure the snapshot still exists
      ec2_snapshot_info:
        snapshot_ids:
          - '{{ ec2_ami_snapshot }}'
      register: snapshot_result

    - name: assert the snapshot wasn't deleted
      assert:
        that:
          - "snapshot_result.snapshots[0].snapshot_id == ec2_ami_snapshot"

    - name: delete ami for a second time (check mode)
      ec2_ami:
        instance_id: '{{ ec2_instance_id }}'
        state: absent
        name: '{{ ec2_ami_name }}_ami'
        image_id: '{{ ec2_ami_image_id }}'
        tags:
          Name: '{{ ec2_ami_name }}_ami'
        wait: yes
      check_mode: true
      register: check_mode_result

    - name: assert that check_mode result is not changed
      assert:
        that:
          - check_mode_result is not changed

    - name: delete ami for a second time
      ec2_ami:
        instance_id: '{{ ec2_instance_id }}'
        state: absent
        name: '{{ ec2_ami_name }}_ami'
        image_id: '{{ ec2_ami_image_id }}'
        tags:
          Name: '{{ ec2_ami_name }}_ami'
        wait: yes
      register: result

    - name: assert that image does not exist
      assert:
        that:
          - not result.changed
          - not result.failed

    # ============================================================

    - name: create an image from the snapshot with boot_mode and tpm_support
      ec2_ami:
        name: '{{ ec2_ami_name }}_ami-boot-tpm'
        description: '{{ ec2_ami_description }}'
        state: present
        boot_mode: uefi
        tpm_support: v2.0
        launch_permissions:
          user_ids: []
        tags:
          Name: '{{ ec2_ami_name }}_ami-boot-tpm'
        root_device_name: '{{ ec2_ami_root_disk }}'
        device_mapping:
          - device_name: '{{ ec2_ami_root_disk }}'
            volume_type: gp2
            size: 8
            delete_on_termination: true
            snapshot_id: '{{ setup_snapshot.snapshot_id }}'
      register: result
      ignore_errors: true
      vars:
        ansible_python_interpreter: "{{ botocore_virtualenv_interpreter }}"

    - name: set image id fact for deletion later
      set_fact:
        ec2_ami_image_id_boot_tpm: "{{ result.image_id }}"
        ec2_ami_snapshot_boot_tpm: "{{ result.block_device_mapping[ec2_ami_root_disk].snapshot_id }}"

    - name: gather facts about the image created
      ec2_ami_info:
        image_ids: '{{ ec2_ami_image_id_boot_tpm }}'
      register: ami_facts_result_boot_tpm
      ignore_errors: true
      vars:
        ansible_python_interpreter: "{{ botocore_virtualenv_interpreter }}"

    - name: assert that new ami has been created with desired options
      assert:
        that:
          - "result.changed"
          - "result.image_id.startswith('ami-')"
          - ami_facts_result_boot_tpm.images[0].image_id | length != 0
          - ami_facts_result_boot_tpm.images[0].boot_mode == 'uefi'
          - ami_facts_result_boot_tpm.images[0].tpm_support == 'v2.0'

    # === Test modify launch permissions org_arns and org_unit_arns=========================

    - name: create an image from the instance
      ec2_ami:
        instance_id: '{{ ec2_instance_id }}'
        state: present
        name: '{{ ec2_ami_name }}_permissions'
        description: '{{ ec2_ami_description }}'
        tags:
          Name: '{{ ec2_ami_name }}_permissions'
        wait: yes
        root_device_name: '{{ ec2_ami_root_disk }}'
      register: permissions_create_result

    - name: modify the AMI launch permissions
      ec2_ami:
        state: present
        image_id: '{{ permissions_create_result.image_id }}'
        name: '{{ ec2_ami_name }}_permissions'
        tags:
          Name: '{{ ec2_ami_name }}_permissions'
        launch_permissions:
          org_arns: ['arn:aws:organizations::123456789012:organization/o-123ab4cdef']
          org_unit_arns: ['arn:aws:organizations::123456789012:ou/o-123example/ou-1234-5exampld']
      register: permissions_update_result

    - name: Get ami info
      amazon.aws.ec2_ami_info:
        image_ids: '{{ permissions_create_result.image_id }}'
        describe_image_attributes: true
      register: permissions_info_result

    - name: assert that launch permissions have changed
      assert:
        that:
          - "permissions_update_result.changed"
          - "'organization_arn' in permissions_info_result.images[0].launch_permissions[0]"
          - "permissions_info_result.images[0].launch_permissions[0]['organization_arn'] == 'arn:aws:organizations::123456789012:organization/o-123ab4cdef'"
          - "'organizational_unit_arn' in permissions_info_result.images[0].launch_permissions[1]"
          - "permissions_info_result.images[0].launch_permissions[1]['organizational_unit_arn'] == 'arn:aws:organizations::123456789012:ou/o-123example/ou-1234-5exampld'"


    # ============================================================

  always:

    # ============================================================

    # TEAR DOWN: snapshot, ec2 instance, ec2 key pair, security group, vpc
    - name: Announce teardown start
      debug:
        msg: "***** TESTING COMPLETE. COMMENCE TEARDOWN *****"

    - name: delete ami
      ec2_ami:
        state: absent
        image_id: "{{ ec2_ami_image_id_boot_tpm }}"
        wait: yes
      ignore_errors: yes

    - name: delete ami
      ec2_ami:
        state: absent
        image_id: "{{ ec2_ami_image_id }}"
        name: '{{ ec2_ami_name }}_ami'
        wait: yes
      ignore_errors: yes

    - name: delete ami
      ec2_ami:
        state: absent
        image_id: "{{ ec2_ami_no_device_true_image_id }}"
        wait: yes
      ignore_errors: yes

    - name: delete ami
      ec2_ami:
        state: absent
        image_id: "{{ ec2_ami_no_device_false_image_id }}"
        wait: yes
      ignore_errors: yes

    - name: delete ami
      ec2_ami:
        state: absent
        image_id: "{{ ec2_ami_image_id }}"
        name: '{{ ec2_ami_name }}_permissions'
        wait: yes
      ignore_errors: yes

    - name: remove setup snapshot of ec2 instance
      ec2_snapshot:
        state: absent
        snapshot_id: '{{ setup_snapshot.snapshot_id }}'
      ignore_errors: yes

    - name: remove setup ec2 instance
      ec2_instance:
        state: absent
        instance_ids:
        - '{{ ec2_instance_id }}'
        wait: true
      ignore_errors: yes

    - name: remove setup keypair
      ec2_key:
        name: '{{ec2_ami_name}}_setup'
        state: absent
      ignore_errors: yes

    - name: remove setup security group
      ec2_security_group:
        name: '{{ ec2_ami_name }}_setup'
        description: 'created by Ansible integration tests'
        state: absent
        vpc_id: '{{ setup_vpc.vpc.id }}'
      ignore_errors: yes

    - name: remove setup subnet
      ec2_vpc_subnet:
        az: '{{ availability_zone }}'
        tags: '{{ec2_ami_name}}_setup'
        vpc_id: '{{ setup_vpc.vpc.id }}'
        cidr: '{{ subnet_cidr }}'
        state: absent
        resource_tags:
          Name: '{{ ec2_ami_name }}_setup'
      ignore_errors: yes

    - name: remove setup VPC
      ec2_vpc_net:
        cidr_block: '{{ vpc_cidr }}'
        state: absent
        name: '{{ ec2_ami_name }}_setup'
        resource_tags:
          Name: '{{ ec2_ami_name }}_setup'
      ignore_errors: yes
